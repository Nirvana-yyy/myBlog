/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.5.40 : Database - my_blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`my_blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `my_blog`;

/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `article_id` int(11) NOT NULL AUTO_INCREMENT,
  `article_user_id` int(11) DEFAULT NULL,
  `article_title` varchar(255) DEFAULT NULL,
  `article_content` mediumtext,
  `article_comment_count` int(11) DEFAULT NULL,
  `article_like_count` int(11) DEFAULT NULL,
  `article_create_time` datetime DEFAULT NULL,
  `article_random_pic` varchar(255) DEFAULT NULL,
  `article_type` int(11) DEFAULT NULL,
  `article_summary` text,
  PRIMARY KEY (`article_id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;

/*Data for the table `article` */

insert  into `article`(`article_id`,`article_user_id`,`article_title`,`article_content`,`article_comment_count`,`article_like_count`,`article_create_time`,`article_random_pic`,`article_type`,`article_summary`) values (4,1,'java学习笔记','<h1 id=\"h1-java-\"><a name=\"java学习笔记\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>java学习笔记</h1><h2 id=\"h2--intellij-idea-2020-3-1-x64-\"><a name=\"附录：IntelliJ IDEA 2020.3.1 x64的使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>附录：IntelliJ IDEA 2020.3.1 x64的使用</h2><h3 id=\"h3-1-\"><a name=\"1、项目结构\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1、项目结构</h3><p>project(项目)—&gt;module(模块)-&gt;package(包)</p>\n<p>关系如图所示</p>\n<p><img src=\"https://gitee.com/yjl_gitee/typora-pictures/raw/master/img/20210121101051.png\" alt=\"image-20210121101051334\"></p>\n<p>注意：包名不能写成java</p>\n<h3 id=\"h3-2-\"><a name=\"2、快捷键\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2、快捷键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><code>Alt</code>+<code>Enter</code></th>\n<th>导入包，自动修正代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><strong><code>Ctrl</code>+<code>Alt</code>+<code>L</code></strong></td>\n<td><strong>格式化代码</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>Ctrl</code>+<code>/</code></strong></td>\n<td><strong>单行注释</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>Ctrl</code>+<code>shift</code>+<code>/</code></strong></td>\n<td><strong>选中代码多行注释，再按则取消注释</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>Ctrl</code>+<code>z</code></strong></td>\n<td><strong>撤销上一步的操作</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>Ctrl</code>+<code>Shift</code>+<code>Z</code></strong></td>\n<td><strong>恢复撤销的内容</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>ctrl</code>+<code>alt</code>+<code>t</code></strong></td>\n<td><strong>surround with</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>ctrl</code>+<code>f</code></strong></td>\n<td><strong>find</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong><code>ctrl</code>+<code>f</code></strong></td>\n<td><strong>replace</strong></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"h2--\"><a name=\"一、输出语句\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一、输出语句</h2><h3 id=\"h3-1-\"><a name=\"1、输出\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1、输出</h3><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"typ\">System</span><span class=\"pun\">.</span><span class=\"pln\">out</span><span class=\"pun\">.</span><span class=\"pln\">println</span><span class=\"pun\">();</span></code></li></ol></pre>\n<p>关于<code>+</code>:不仅可以表示加法运算还可以表示字符串的连接</p>\n<h2 id=\"h2--\"><a name=\"二、数组\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二、数组</h2><h3 id=\"h3-1-\"><a name=\"1、数组的定义\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1、数组的定义</h3><ul>\n<li><p>动态定义（指定长度）guo</p>\n<p>数组类型[] 数组名称 = new 数组类型[长度]；</p>\n<p>其实上述过程可以分为两步：</p>\n<ol>\n<li>数组类型[] 数组名称；</li><li>数组类型[] 数组名称 = new 数组类型[长度]；</li></ol>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"kwd\">int</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"typ\">ArryA</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">[</span><span class=\"lit\">10</span><span class=\"pun\">];</span></code></li></ol></pre>\n</li></ul>\n<ul>\n<li><p>静态定义（指定内容）</p>\n<p>数组类型[] 数组名称  = new 数组类型[] {数据1，数据2，…}</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"kwd\">int</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"typ\">ArryB</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"kwd\">int</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"lit\">1</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">,</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">,</span><span class=\"lit\">7</span><span class=\"pun\">,</span><span class=\"lit\">8</span><span class=\"pun\">,</span><span class=\"lit\">9</span><span class=\"pun\">,</span><span class=\"lit\">10</span><span class=\"pun\">};</span></code></li></ol></pre>\n<p>也可以采用省略格式：</p>\n<p>数组类型[] 数组名称 = {数据1，数据2，数据3}；</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"kwd\">int</span><span class=\"pun\">[]</span><span class=\"pln\"> </span><span class=\"typ\">ArryB</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"lit\">1</span><span class=\"pun\">,</span><span class=\"lit\">2</span><span class=\"pun\">,</span><span class=\"lit\">3</span><span class=\"pun\">,</span><span class=\"lit\">4</span><span class=\"pun\">,</span><span class=\"lit\">5</span><span class=\"pun\">,</span><span class=\"lit\">6</span><span class=\"pun\">,</span><span class=\"lit\">7</span><span class=\"pun\">,</span><span class=\"lit\">8</span><span class=\"pun\">,</span><span class=\"lit\">9</span><span class=\"pun\">,</span><span class=\"lit\">10</span><span class=\"pun\">};</span></code></li></ol></pre>\n<p>同样的，也可以分为两步</p>\n<ol>\n<li>数组类型[] 数组名称；</li><li>数组类型[] 数组名称  = new 数组类型[] {数据1，数据2，…}</li></ol>\n</li></ul>\n<h3 id=\"h3-2-\"><a name=\"2、内存划分\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2、内存划分</h3><p>Java的内存划分分为5个部分：</p>\n<p>栈（Stack）:</p>\n<p>存放的都是方法中的局部变量，方法的运行一定要在栈中</p>\n<p>堆（Heap）：</p>\n<p>凡是new出来的东西都在堆中</p>\n<p>方法区（Method Area）</p>\n<p>储存class相关信息，包含方法的信息</p>\n<p>本地方法栈（Native Method Stack）</p>\n<p>与操作系统相关</p>\n<p>寄存器（pc Register）</p>\n<p>与CPU相关</p>\n',0,0,'2021-06-18 02:06:29','/img/articlePic/img1.jpg',1,'java学习笔记附录：IntelliJ IDEA 2020.3.1 x64的使用1、项目结构project(项目)—&gt;module(模块)-&gt;package(包)\n关系如图所示\n\n注意：包名不能写成java\n2、快捷键\n\n\nAlt+Enter\n导入包，自动修正代码\n\n\n\n\nCtrl+Alt+L\n格式化代码\n\n\nCtrl+/\n单行注释\n\n\nCtrl+shift+/\n选中代码多行注释，再按则取消注释\n\n\nCtrl+z\n撤销上一步的操作\n\n\nCtrl+Shift+Z\n恢复撤销的内容\n\n\nctrl+alt+t\nsurround with\n\n\nctrl+f\nfind\n\n\nctrl+f\nreplace\n\n\n\n一、输出语句1、输出System.out.println();\n\n关于+:不仅可以表示加法运算还可以表示字符串的连接\n二、数组1、数组的定义\n动态定义（指定长度）guo\n数组类型[] 数组名称 = new 数组类型[长度]；\n其实上述过程可以分为两步：\n\n数组类型[] 数组名称；数组类型[] 数组名称 = new 数组类型[长度]；\nint[] ArryA = new int[10];\n\n\n\n静态定义（指定内容）\n数组类型[] 数组名称  = new 数组类型[] {数据1，数据2，…}\nint[] ArryB = new int[] {1,2,3,4,5,6,7,8,9,10};\n\n也可以采用省略格式：\n数组类型[] 数组名称 = {数据1，数据2，数据3}；\nint[] ArryB = {1,2,3,4,5,6,7,8,9,10};\n\n同样的，也可以分为两步\n\n数组类型[] 数组名称；数组类型[] 数组名称  = new 数组类型[] {数据1，数据2，…}\n\n2、内存划分Java的内存划分分为5个部分：\n栈（Stack）:\n存放的都是方法中的局部变量，方法的运行一定要在栈中\n堆（Heap）：\n凡是new出来的东西都在堆中\n方法区（Method Area）\n储存class相关信息，包含方法的信息\n本地方法栈（Native Method Stack）\n与操作系统相关\n寄存器（pc Register）\n与CPU相关\n'),(5,1,'会话','<h2 id=\"h2-u4F1Au8BDDu6280u672F\"><a name=\"会话技术\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>会话技术</h2><p>会话：一次会话中包含多次请求和响应</p>\n<p>一次会话：浏览器第一次服务器资源发送请求，会话建立，直到有一方断开为止</p>\n<p>功能：在一次绘画的范围内，共享数据</p>\n<p>方式：</p>\n<ol>\n<li>客户端会话技术：Cookie</li><li>服务器会话技术：Session</li></ol>\n<h3 id=\"h3-cookie\"><a name=\"Cookie\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Cookie</h3><p>快速入门：</p>\n<h4 id=\"h4--\"><a name=\"使用步骤：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>使用步骤：</h4><ol>\n<li><p>创建Cookie对象，绑定数据</p>\n<p><code>new Cookie(String name, String value)</code></p>\n</li><li><p>发送Cookie</p>\n<p><code>response.addCookie(Cookie cookie)</code>  </p>\n</li><li><p>获取Cookie，拿到数据</p>\n<p><code>Cookie[]  request.getCookies()</code></p>\n</li></ol>\n<h4 id=\"h4-cookie-\"><a name=\"cookie 的细节：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>cookie 的细节：</h4><ol>\n<li><p>一次可以发送多个Cookie</p>\n</li><li><p>默认情况下 ，当浏览器被关闭后，Cookie数据被销毁</p>\n<p>持久化存储：</p>\n<p><code>setMaxage(int seconds)</code></p>\n<ul>\n<li>正数：持久化将Cookie传递到硬盘的文件中，Cookie的存活时间</li><li>负数：默认值，当浏览器被关闭后，Cookie数据被销毁</li><li>0：删除Cookie信息</li></ul>\n</li><li><p>在tomcat8之后，支持中文</p>\n</li><li><p>默认情况下，在同一个tomcat服务器下，不能共享多个web项目下的Cookie</p>\n<p>当虚拟目录为“/”的时候，则可以共享</p>\n<p>设置虚拟目录的方法：</p>\n<p><code>setPath(String dir)</code></p>\n<p>如果在不同的tomcat服务器上，调用</p>\n<p><code>setDomain(String path)</code>:如果设置一级域名相同，那么多个服务器之间的cookie可以共享</p>\n<p>eg：<code>tieba.baidu.com</code>中<code>baidu.com</code>就是一个一级域名</p>\n</li></ol>\n<h4 id=\"h4-cookie-\"><a name=\"cookie的特点和作用：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>cookie的特点和作用：</h4><p>特点：</p>\n<ul>\n<li>Cookie存储数据在服务器浏览器</li><li>浏览器对单个Cookie的大小有限制，对同一个域名下恶的总Cookie数量也有限制</li></ul>\n<p>作用：</p>\n<ul>\n<li>Cookie一般用于存储少量的不太敏感的数据</li><li>在不登陆的情况下对服务器的登陆识别</li></ul>\n<h3 id=\"h3-session\"><a name=\"Session\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Session</h3><p>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中，是一个域对象</p>\n<p>快速入门：</p>\n<ul>\n<li><p>获取HttpSession对象</p>\n<p>HttpSession session = request.getSession();</p>\n</li><li><p>使用HttpSession对象</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"typ\">HttpSession</span><span class=\"pln\"> session </span><span class=\"pun\">=</span><span class=\"pln\"> request</span><span class=\"pun\">.</span><span class=\"pln\">getSession</span><span class=\"pun\">();</span></code></li><li class=\"L1\"><code><span class=\"typ\">Object</span><span class=\"pln\"> msg </span><span class=\"pun\">=</span><span class=\"pln\"> session</span><span class=\"pun\">.</span><span class=\"pln\">getAttribute</span><span class=\"pun\">(</span><span class=\"str\">\"msg\"</span><span class=\"pun\">);</span></code></li><li class=\"L2\"><code><span class=\"kwd\">void</span><span class=\"pln\"> removeAttribute</span><span class=\"pun\">(</span><span class=\"typ\">String</span><span class=\"pln\"> name</span><span class=\"pun\">);</span></code></li></ol></pre></li></ul>\n<p>细节:</p>\n<ol>\n<li><p>客户端关闭后，服务器不关:</p>\n<p>默认情况下，两次获取session不是同一个</p>\n<p>解决办法：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"com\">//创建Cookie，键为JSESSIONID，设置最大存活时间，让Cookie持久化保存</span></code></li><li class=\"L1\"><code class=\"lang-java\"><span class=\"typ\">HttpSession</span><span class=\"pln\"> session </span><span class=\"pun\">=</span><span class=\"pln\"> request</span><span class=\"pun\">.</span><span class=\"pln\">getSession</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code class=\"lang-java\"></code></li><li class=\"L3\"><code class=\"lang-java\"><span class=\"pln\">        </span><span class=\"com\">//期望客户端关闭后，session也能用</span></code></li><li class=\"L4\"><code class=\"lang-java\"><span class=\"pln\">        </span><span class=\"typ\">Cookie</span><span class=\"pln\"> c </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Cookie</span><span class=\"pun\">(</span><span class=\"str\">\"JSESSIONID\"</span><span class=\"pun\">,</span><span class=\"pln\"> session</span><span class=\"pun\">.</span><span class=\"pln\">getId</span><span class=\"pun\">());</span></code></li><li class=\"L5\"><code class=\"lang-java\"><span class=\"pln\">        c</span><span class=\"pun\">.</span><span class=\"pln\">setMaxAge</span><span class=\"pun\">(</span><span class=\"lit\">60</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"lit\">60</span><span class=\"pun\">);</span></code></li><li class=\"L6\"><code class=\"lang-java\"><span class=\"pln\">        response</span><span class=\"pun\">.</span><span class=\"pln\">addCookie</span><span class=\"pun\">(</span><span class=\"pln\">c</span><span class=\"pun\">);</span></code></li></ol></pre>\n</li><li><p>客户端不关闭，服务器关闭后：</p>\n<p>两次获取的session不是同一个，但是要确保对象不丢失</p>\n<ul>\n<li><p>session的钝化：在服务器正常关闭后，将session对象序列化到硬盘上</p>\n</li><li><p>session的活化：在服务器启动后，将session文件转化为内存中的session对象即可</p>\n<p>idea无法实现此功能</p>\n</li></ul>\n</li><li><p>session的失效时间：</p>\n<ol>\n<li>服务器被关闭</li><li>session对象调用<code>invalidata()</code>方法</li><li>session默认失效时间30min</li></ol>\n</li></ol>\n<p>特点：</p>\n<ol>\n<li>session用于存储一次会话的多次请求的数据，存在服务器端</li><li>session可以存储任意类型，任意大小的数据</li></ol>\n<p>session与cookie的区别：</p>\n<ol>\n<li>session储存数据在服务器端，Cookie在客户端</li><li>session没有数据大小限制</li><li>session相对安全</li></ol>\n',0,0,'2021-06-18 09:12:34','/img/articlePic/img5.jpg',1,'会话技术会话：一次会话中包含多次请求和响应\n一次会话：浏览器第一次服务器资源发送请求，会话建立，直到有一方断开为止\n功能：在一次绘画的范围内，共享数据\n方式：\n\n客户端会话技术：Cookie服务器会话技术：Session\nCookie快速入门：\n使用步骤：\n创建Cookie对象，绑定数据\nnew Cookie(String name, String value)\n发送Cookie\nresponse.addCookie(Cookie cookie)  \n获取Cookie，拿到数据\nCookie[]  request.getCookies()\n\ncookie 的细节：\n一次可以发送多个Cookie\n默认情况下 ，当浏览器被关闭后，Cookie数据被销毁\n持久化存储：\nsetMaxage(int seconds)\n\n正数：持久化将Cookie传递到硬盘的文件中，Cookie的存活时间负数：默认值，当浏览器被关闭后，Cookie数据被销毁0：删除Cookie信息\n在tomcat8之后，支持中文\n默认情况下，在同一个tomcat服务器下，不能共享多个web项目下的Cookie\n当虚拟目录为“/”的时候，则可以共享\n设置虚拟目录的方法：\nsetPath(String dir)\n如果在不同的tomcat服务器上，调用\nsetDomain(String path):如果设置一级域名相同，那么多个服务器之间的cookie可以共享\neg：tieba.baidu.com中baidu.com就是一个一级域名\n\ncookie的特点和作用：特点：\n\nCookie存储数据在服务器浏览器浏览器对单个Cookie的大小有限制，对同一个域名下恶的总Cookie数量也有限制\n作用：\n\nCookie一般用于存储少量的不太敏感的数据在不登陆的情况下对服务器的登陆识别\nSession服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中，是一个域对象\n快速入门：\n\n获取HttpSession对象\nHttpSession session = request.getSession();\n使用HttpSession对象\nHttpSession session = request.getSession();\nObject msg = session.getAttribute(&quot;msg&quot;);\nvoid removeAttribute(String name);\n\n细节:\n\n客户端关闭后，服务器不关:\n默认情况下，两次获取session不是同一个\n解决办法：\n//创建Cookie，键为JSESSIONID，设置最大存活时间，让Cookie持久化保存\nHttpSession session = request.getSession();\n\n        //期望客户端关闭后，session也能用\n        Cookie c = new Cookie(&quot;JSESSIONID&quot;, session.getId());\n        c.setMaxAge(60 * 60);\n        response.addCookie(c);\n\n客户端不关闭，服务器关闭后：\n两次获取的session不是同一个，但是要确保对象不丢失\n\nsession的钝化：在服务器正常关闭后，将session对象序列化到硬盘上\nsession的活化：在服务器启动后，将session文件转化为内存中的session对象即可\nidea无法实现此功能\n\nsession的失效时间：\n\n服务器被关闭session对象调用invalidata()方法session默认失效时间30min\n\n特点：\n\nsession用于存储一次会话的多次请求的数据，存在服务器端session可以存储任意类型，任意大小的数据\nsession与cookie的区别：\n\nsession储存数据在服务器端，Cookie在客户端session没有数据大小限制session相对安全\n'),(6,1,'MySQL数据库的增删改查','<h2 id=\"h2--\"><a name=\"一、数据库\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>一、数据库</h2><h3 id=\"h3-mysql\"><a name=\"MySQL\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>MySQL</h3><h4 id=\"h4-sql-structured-query-language-\"><a name=\"SQL：Structured Query Language:结构化查询语言\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>SQL：Structured Query Language:结构化查询语言</h4><ol>\n<li><p>sql语句不区分大小写，但是关键字建议大写</p>\n</li><li><p>3种注释方式：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-sql\"><span class=\"pun\">单行注释：--或者#</span></code></li><li class=\"L1\"><code class=\"lang-sql\"><span class=\"pun\">多行注释：</span><span class=\"com\">/**/</span></code></li></ol></pre>\n</li></ol>\n<h4 id=\"h4-ddl-data-definetion-language-\"><a name=\"DDL(Data Definetion Language)数据定义语言\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>DDL(Data Definetion Language)数据定义语言</h4><p>操作数据库CRUD</p>\n<ol>\n<li><p>C(Create):创建</p>\n<p><code>create database  数据库名称</code>;</p>\n<p><code>create database if not exists 数据库名称;</code>:判断是否已经存在，不存在则创建数据库</p>\n<p><code>create database 数据库名称 character set 字符集名</code>:创建数据库并指定字符集，默认是utf8</p>\n</li><li><p>R(Retrieve):查询</p>\n<p>查询所有的数据库的名称：</p>\n<p><code>show databases;</code></p>\n<p>查询某个数据库的字符集：</p>\n<p><code>show create database 数据库名称</code></p>\n</li><li><p>U(Updata):修改</p>\n<p>修改数据库的字符集：</p>\n<p><code>alter database 数据库名称 character set 字符集</code>:修改数据库的字符集</p>\n</li><li><p>D(Delete):删除</p>\n<p><code>drop database 数据库名称;</code></p>\n<p><code>drop database if not exists 数据库名</code></p>\n</li><li><p>使用数据库</p>\n<p><code>select database();</code>:查询当前正在使用的数据库名称</p>\n<p><code>use 数据库名称;</code>:使用数据库</p>\n</li></ol>\n<p>操作表</p>\n<ol>\n<li><p>C(Create):创建</p>\n<p><code>create table 表名(</code></p>\n<p><code>列名1 数据类型1,</code></p>\n<p><code>列名2 数据类型2,</code></p>\n<p><code>列名3 数据类型3,</code></p>\n<p><code>...</code></p>\n<p><code>列名n 数据类型n);</code></p>\n<p>数据类型：</p>\n<ul>\n<li>int 整数类型</li><li>double 小数类型</li><li>date 日期，只包含年月日,yyyy-mm-dd</li><li>datetime  日期，包含年月日时分秒，yyyy-mm-dd HH:mm:ss</li><li>datestamp:时间戳类型 包含年月日时分秒,yyyy-MM-dd</li><li>varchar :字符串类型：name varchar(20) name最大20个字符</li></ul>\n<p>复制表：</p>\n<p><code>create table 表名 like 被复制的表名;</code></p>\n<p>注意：最后一列不需要加逗号</p>\n</li><li><p>R(Retrieve):查询</p>\n<p><code>show tables;</code>：查询所有的表名称</p>\n</li><li><p>U(Update):修改：</p>\n<ul>\n<li><p>修改表名</p>\n<p><code>alter table 表名 rename to 新的表名</code> </p>\n</li><li><p>修改表的字符集</p>\n<p><code>alter table 表名 character set 字符集</code></p>\n</li><li><p>添加一列 </p>\n<p><code>alter table 表名 add 列名 数据类型</code></p>\n</li><li><p>修改列名称 类型</p>\n<p><code>alter table 表名 change 列名 新列名 新数据类型；</code></p>\n<p><code>alter table 表名 modify 列名 新数据类型；</code></p>\n</li><li><p>删除列</p>\n<p><code>alter table drop 列名;</code></p>\n</li></ul>\n</li><li><p>D(Delete):删除：</p>\n<p><code>drop table 表名 if exits</code></p>\n</li></ol>\n<h4 id=\"h4-dml-\"><a name=\"DML:增删改表中数据的\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>DML:增删改表中数据的</h4><ol>\n<li><p>添加数据</p>\n<p><code>insert into 表名(列名1，列名2...,列名n) values(值1，值2，...值n);</code></p>\n<p>如果表名后，不定义列名，则默认给所有的列添价值</p>\n<p>注意：除了数字类型，其他类型需要使用引号单双都可以</p>\n</li><li><p>删除数据</p>\n<p><code>delete from 表名 [where 条件]</code></p>\n<p>如果不加条件，则删除表中所有记录 </p>\n<p><code>truncate table 表名</code>:删除表，然后再创建一个一弄一样的空表，效率更高</p>\n<p><code>delete from 表名;</code>删除所有记录，不推荐，因为他有多少记录就会执行多少次，效率较低</p>\n</li><li><p>修改数据</p>\n<p><code>updata 表名 set 列名1 = 值1，列名2 = 值2 ，...[条件];</code></p>\n<p>如果不加任何条件则会将表中所有记录全部修改</p>\n</li></ol>\n<h4 id=\"h4-dql-\"><a name=\"DQL：查询表中的记录\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>DQL：查询表中的记录</h4><p><code>select * from 表名;</code></p>\n<p>语法：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">select</span><span class=\"pln\"> </span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pun\">​</span><span class=\"pln\">    </span><span class=\"pun\">字段列表</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\"> </span><span class=\"kwd\">from</span><span class=\"pln\"> </span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pun\">​</span><span class=\"pln\">    </span><span class=\"pun\">表名列表</span><span class=\"pln\"> </span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"kwd\">where</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"pun\">​</span><span class=\"pln\">    </span><span class=\"pun\">条件列表</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"kwd\">group</span><span class=\"pln\"> </span><span class=\"kwd\">by</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pun\">​</span><span class=\"pln\">    </span><span class=\"pun\">分组字段</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\">having</span></code></li><li class=\"L7\"><code></code></li><li class=\"L8\"><code><span class=\"pun\">​</span><span class=\"pln\">    </span><span class=\"pun\">分组之后的条件</span></code></li><li class=\"L9\"><code></code></li><li class=\"L0\"><code><span class=\"pln\">order </span><span class=\"kwd\">by</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pun\">​</span><span class=\"pln\">    </span><span class=\"pun\">排序</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">limit </span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pun\">​</span><span class=\"pln\">    </span><span class=\"pun\">分页限定</span></code></li></ol></pre><p>基础查询</p>\n<ol>\n<li><p>多个字段的查询</p>\n<p><code>SELECT 字段名1，字段名2... FROM 表名 ;</code></p>\n<p>如果想查询所有字段，则可以使用*来代替字段列表</p>\n</li><li><p>去除重复</p>\n<p><code>distinct</code></p>\n</li><li><p>计算列</p>\n<p>一般可以使用四则运算一些列的值</p>\n<p><code>ifnull(表达式1 ,表达式2 )</code>;</p>\n<p>表达式1 ：判断该字段是否为null</p>\n<p>表达式2：如果该字段为null后的替换值</p>\n</li><li><p>起别名</p>\n<p><code>as</code>,也可以省略</p>\n</li></ol>\n<p>条件查询：</p>\n<ol>\n<li><p>where子句后跟条件</p>\n</li><li><p>运算符</p>\n<p><code>&lt;&gt;</code>：不等于</p>\n<p><code>between... and</code></p>\n<p><code>in(集合)</code></p>\n<p><code>like</code>：</p>\n<p>占位符：</p>\n<ul>\n<li>_:单个任意字符</li><li>%:多个任意字符</li></ul>\n<p><code>is null</code></p>\n<p><code>or</code> </p>\n</li></ol>\n<p>查询语句：</p>\n<ol>\n<li><p>排序查询</p>\n<p><code>order by 排序字段1 排序方式1，排序字段2 排序方式2...</code>第二排序条件只有当第一排序条件一样的时候，才会判断</p>\n<p>排序方式：</p>\n<p><code>ASC</code>:升序，默认的</p>\n<p><code>DESC</code>:降序的</p>\n</li><li><p>聚合函数：将一列数据作为一个整体，进行纵向的计算</p>\n<p><code>count</code>:计算个数</p>\n<p><code>max</code>:获取最大值</p>\n<p><code>min</code>:计算最小值</p>\n<p><code>sum</code>:计算和</p>\n<p><code>avg</code>:计算平均值</p>\n<p>注意：聚合函数的计算会排除null值</p>\n</li><li><p>分组查询</p>\n<p><code>group by 分组字段</code></p>\n<p>注意：</p>\n<p> where 和 having 的区别：</p>\n<ul>\n<li>where 在分组之前进行限定，如果不满足条件，则不参与分组。having是在分组之后进行限定，如果不满足结果，就不会被查询出来</li><li>where后不可以跟聚合函数，而having可以进行聚合函数的限定</li></ul>\n</li><li><p>分页查询</p>\n<p><code>limit 开始的索引, 每页查询的条数</code>;</p>\n<p>这个语法只能在MySQL里面用</p>\n<h3 id=\"h3-u7EA6u675F\"><a name=\"约束\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>约束</h3><p>对表里的数据进行限定，保证数据的正确性有效性和完整性。</p>\n<ol>\n<li><p>主键约束</p>\n<p><code>primary key</code></p>\n<p>注意：</p>\n<ol>\n<li>非空且唯一</li><li>一张表就只能有一个字段为主键</li><li>逐渐就是表中记录的唯一标识</li></ol>\n<p>删除主键：<code>alter table stu modify 字段名 数据类型</code></p>\n<p>自动增长：</p>\n<p>概念：如果某一烈士数值类型的，使用<code>auto_increment</code>可以来完成自动增长</p>\n<p>在创建表时，添加表的约束，并且完成主键的自动增长：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-sql\"><span class=\"pln\">CREATE TABLE stu</span><span class=\"pun\">(</span></code></li><li class=\"L1\"><code class=\"lang-sql\"><span class=\"pln\">    id INT PRIMARY KEY AUTO_INCREMENT</span><span class=\"pun\">,</span></code></li><li class=\"L2\"><code class=\"lang-sql\"><span class=\"pln\">    NAME VARCHAR</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code class=\"lang-sql\"><span class=\"pun\">);</span></code></li></ol></pre>\n</li></ol>\n</li></ol>\n<ol>\n<li><p>非空约束</p>\n<p><code>not null</code> </p>\n<p>创建表时添加约束:eg</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-sql\"><span class=\"pln\">CREATE TABLE stu</span><span class=\"pun\">(</span><span class=\"pln\">id INT </span><span class=\"pun\">,</span></code></li><li class=\"L1\"><code class=\"lang-sql\"><span class=\"pln\">NAME VARCHAR</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> NOT NULL</span></code></li><li class=\"L2\"><code class=\"lang-sql\"><span class=\"pun\">);</span></code></li></ol></pre>\n<p>创建表完后再添加约束：eg</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-sql\"><span class=\"pln\">ALTER TABLE stu MODIFY NAME VARCHAR</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> NOT NULL</span><span class=\"pun\">;</span></code></li></ol></pre>\n<p>删除name的非空约束：eg</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-sql\"><span class=\"pln\">ALTER TABLE stu MODIFY NAME VARCHAR</span><span class=\"pun\">(</span><span class=\"lit\">20</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">;</span></code></li></ol></pre>\n</li><li><p>唯一约束：某一列的值不能重复</p>\n<p><code>unique</code></p>\n<p>注意：可以有多个null</p>\n<p>删除唯一约束：</p>\n<p><code>alter table stu drop index 字段名;</code></p>\n</li><li><p>外键约束</p>\n<p><code>foreign key</code></p>\n<p>用于让两个表产生关联,从而保证数据的正确性</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-sql\"><span class=\"pln\">create table </span><span class=\"pun\">表名(</span></code></li><li class=\"L1\"><code class=\"lang-sql\"><span class=\"pln\">    </span><span class=\"pun\">...</span></code></li><li class=\"L2\"><code class=\"lang-sql\"><span class=\"pln\">    </span><span class=\"pun\">外键列</span></code></li><li class=\"L3\"><code class=\"lang-sql\"><span class=\"pln\">    constraint </span><span class=\"pun\">外键名称</span><span class=\"pln\"> foreign key </span><span class=\"pun\">外键列名称</span><span class=\"pln\"> reference </span><span class=\"pun\">主表名称(主表列名称)</span></code></li><li class=\"L4\"><code class=\"lang-sql\"><span class=\"pun\">);</span></code></li></ol></pre>\n<p>删除外键：</p>\n<p><code>ALTER TABLE 表名 DROP FOREIGN KEY 字段名;</code></p>\n<p>添加外键：</p>\n<p><code>ALTER TABLE 表名 ADD CONSTRAINT  字段名 FOREIGN KEY (字段名) REFERENCES 表名(字段名)</code></p>\n</li></ol>\n',0,0,'2021-06-18 09:14:38','/img/articlePic/img1.jpg',1,'一、数据库MySQLSQL：Structured Query Language:结构化查询语言\nsql语句不区分大小写，但是关键字建议大写\n3种注释方式：\n单行注释：--或者#\n多行注释：/**/\n\n\nDDL(Data Definetion Language)数据定义语言操作数据库CRUD\n\nC(Create):创建\ncreate database  数据库名称;\ncreate database if not exists 数据库名称;:判断是否已经存在，不存在则创建数据库\ncreate database 数据库名称 character set 字符集名:创建数据库并指定字符集，默认是utf8\nR(Retrieve):查询\n查询所有的数据库的名称：\nshow databases;\n查询某个数据库的字符集：\nshow create database 数据库名称\nU(Updata):修改\n修改数据库的字符集：\nalter database 数据库名称 character set 字符集:修改数据库的字符集\nD(Delete):删除\ndrop database 数据库名称;\ndrop database if not exists 数据库名\n使用数据库\nselect database();:查询当前正在使用的数据库名称\nuse 数据库名称;:使用数据库\n\n操作表\n\nC(Create):创建\ncreate table 表名(\n列名1 数据类型1,\n列名2 数据类型2,\n列名3 数据类型3,\n...\n列名n 数据类型n);\n数据类型：\n\nint 整数类型double 小数类型date 日期，只包含年月日,yyyy-mm-dddatetime  日期，包含年月日时分秒，yyyy-mm-dd HH:mm:ssdatestamp:时间戳类型 包含年月日时分秒,yyyy-MM-ddvarchar :字符串类型：name varchar(20) name最大20个字符\n复制表：\ncreate table 表名 like 被复制的表名;\n注意：最后一列不需要加逗号\nR(Retrieve):查询\nshow tables;：查询所有的表名称\nU(Update):修改：\n\n修改表名\nalter table 表名 rename to 新的表名 \n修改表的字符集\nalter table 表名 character set 字符集\n添加一列 \nalter table 表名 add 列名 数据类型\n修改列名称 类型\nalter table 表名 change 列名 新列名 新数据类型；\nalter table 表名 modify 列名 新数据类型；\n删除列\nalter table drop 列名;\n\nD(Delete):删除：\ndrop table 表名 if exits\n\nDML:增删改表中数据的\n添加数据\ninsert into 表名(列名1，列名2...,列名n) values(值1，值2，...值n);\n如果表名后，不定义列名，则默认给所有的列添价值\n注意：除了数字类型，其他类型需要使用引号单双都可以\n删除数据\ndelete from 表名 [where 条件]\n如果不加条件，则删除表中所有记录 \ntruncate table 表名:删除表，然后再创建一个一弄一样的空表，效率更高\ndelete from 表名;删除所有记录，不推荐，因为他有多少记录就会执行多少次，效率较低\n修改数据\nupdata 表名 set 列名1 = 值1，列名2 = 值2 ，...[条件];\n如果不加任何条件则会将表中所有记录全部修改\n\nDQL：查询表中的记录select * from 表名;\n语法：\nselect \n\n​    字段列表\n\n from \n\n​    表名列表 \n\nwhere\n\n​    条件列表\n\ngroup by\n\n​    分组字段\n\nhaving\n\n​    分组之后的条件\n\norder by\n\n​    排序\n\nlimit \n\n​    分页限定\n基础查询\n\n多个字段的查询\nSELECT 字段名1，字段名2... FROM 表名 ;\n如果想查询所有字段，则可以使用*来代替字段列表\n去除重复\ndistinct\n计算列\n一般可以使用四则运算一些列的值\nifnull(表达式1 ,表达式2 );\n表达式1 ：判断该字段是否为null\n表达式2：如果该字段为null后的替换值\n起别名\nas,也可以省略\n\n条件查询：\n\nwhere子句后跟条件\n运算符\n&lt;&gt;：不等于\nbetween... and\nin(集合)\nlike：\n占位符：\n\n_:单个任意字符%:多个任意字符\nis null\nor \n\n查询语句：\n\n排序查询\norder by 排序字段1 排序方式1，排序字段2 排序方式2...第二排序条件只有当第一排序条件一样的时候，才会判断\n排序方式：\nASC:升序，默认的\nDESC:降序的\n聚合函数：将一列数据作为一个整体，进行纵向的计算\ncount:计算个数\nmax:获取最大值\nmin:计算最小值\nsum:计算和\navg:计算平均值\n注意：聚合函数的计算会排除null值\n分组查询\ngroup by 分组字段\n注意：\n where 和 having 的区别：\n\nwhere 在分组之前进行限定，如果不满足条件，则不参与分组。having是在分组之后进行限定，如果不满足结果，就不会被查询出来where后不可以跟聚合函数，而having可以进行聚合函数的限定\n分页查询\nlimit 开始的索引, 每页查询的条数;\n这个语法只能在MySQL里面用\n约束对表里的数据进行限定，保证数据的正确性有效性和完整性。\n\n主键约束\nprimary key\n注意：\n\n非空且唯一一张表就只能有一个字段为主键逐渐就是表中记录的唯一标识\n删除主键：alter table stu modify 字段名 数据类型\n自动增长：\n概念：如果某一烈士数值类型的，使用auto_increment可以来完成自动增长\n在创建表时，添加表的约束，并且完成主键的自动增长：\nCREATE TABLE stu(\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    NAME VARCHAR(20)\n);\n\n\n\n\n非空约束\nnot null \n创建表时添加约束:eg\nCREATE TABLE stu(id INT ,\nNAME VARCHAR(20) NOT NULL\n);\n\n创建表完后再添加约束：eg\nALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;\n\n删除name的非空约束：eg\nALTER TABLE stu MODIFY NAME VARCHAR(20) ;\n\n唯一约束：某一列的值不能重复\nunique\n注意：可以有多个null\n删除唯一约束：\nalter table stu drop index 字段名;\n外键约束\nforeign key\n用于让两个表产生关联,从而保证数据的正确性\ncreate table 表名(\n    ...\n    外键列\n    constraint 外键名称 foreign key 外键列名称 reference 主表名称(主表列名称)\n);\n\n删除外键：\nALTER TABLE 表名 DROP FOREIGN KEY 字段名;\n添加外键：\nALTER TABLE 表名 ADD CONSTRAINT  字段名 FOREIGN KEY (字段名) REFERENCES 表名(字段名)\n\n'),(7,1,'Linux常用命令','<h2 id=\"h2--linux\"><a name=\"二十三、Linux\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>二十三、Linux</h2><p>Linux常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>pwd</th>\n<th>查看当前所在的目录</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ls</td>\n<td>查看当前文件夹的文件</td>\n</tr>\n<tr>\n<td>ls -l（ll）</td>\n<td>查看当前文件夹的文件的详细信息</td>\n</tr>\n<tr>\n<td>cd</td>\n<td>切换目录</td>\n</tr>\n<tr>\n<td>cd ..</td>\n<td>回退到上一级</td>\n</tr>\n<tr>\n<td>mkdir</td>\n<td>创建目录</td>\n</tr>\n<tr>\n<td>rmdir</td>\n<td>删除目录</td>\n</tr>\n<tr>\n<td>xx —help</td>\n<td>帮助信息</td>\n</tr>\n<tr>\n<td>cat</td>\n<td>查看文件的所有内容</td>\n</tr>\n<tr>\n<td>cp</td>\n<td>拷贝</td>\n</tr>\n<tr>\n<td>mv</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>rm</td>\n<td>删除文件</td>\n</tr>\n<tr>\n<td>tar</td>\n<td>打包或者解压（-c:创建一个新tar文件，-v：显示运行过程的信息，-f：指定文件名，-z：调用gzip压缩命令进行压缩，-t：查看压缩文件的内容，-x：解开tar文件）</td>\n</tr>\n<tr>\n<td>tar -cvf xxx.tar ./*</td>\n<td>打包</td>\n</tr>\n<tr>\n<td>tar -zcvf xxx.tar.gz ./*</td>\n<td>打包并压缩</td>\n</tr>\n<tr>\n<td>tar -xvf xxx.tar</td>\n<td>解压</td>\n</tr>\n<tr>\n<td>find 文件夹名 -name 文件名</td>\n<td>在指定文件夹中按名字查找指定名字的文件</td>\n</tr>\n<tr>\n<td>clear</td>\n<td>请屏</td>\n</tr>\n<tr>\n<td>touch</td>\n<td>创建文件</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>重定向输出（覆盖）</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>重定向输出（追加）</td>\n</tr>\n</tbody>\n</table>\n',0,0,'2021-06-18 09:19:58','/img/articlePic/img7.jpg',1,'二十三、LinuxLinux常用命令：\n\n\n\npwd\n查看当前所在的目录\n\n\n\n\nls\n查看当前文件夹的文件\n\n\nls -l（ll）\n查看当前文件夹的文件的详细信息\n\n\ncd\n切换目录\n\n\ncd ..\n回退到上一级\n\n\nmkdir\n创建目录\n\n\nrmdir\n删除目录\n\n\nxx —help\n帮助信息\n\n\ncat\n查看文件的所有内容\n\n\ncp\n拷贝\n\n\nmv\n移动\n\n\nrm\n删除文件\n\n\ntar\n打包或者解压（-c:创建一个新tar文件，-v：显示运行过程的信息，-f：指定文件名，-z：调用gzip压缩命令进行压缩，-t：查看压缩文件的内容，-x：解开tar文件）\n\n\ntar -cvf xxx.tar ./*\n打包\n\n\ntar -zcvf xxx.tar.gz ./*\n打包并压缩\n\n\ntar -xvf xxx.tar\n解压\n\n\nfind 文件夹名 -name 文件名\n在指定文件夹中按名字查找指定名字的文件\n\n\nclear\n请屏\n\n\ntouch\n创建文件\n\n\n&gt;\n重定向输出（覆盖）\n\n\n&gt;&gt;\n重定向输出（追加）\n\n\n\n'),(8,1,'Spring相关知识','<h2 id=\"h2-spring\"><a name=\"Spring\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Spring</h2><h3 id=\"h3-1-spring-\"><a name=\"1、Spring程序开发步骤：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1、Spring程序开发步骤：</h3><ol>\n<li><p>导入Spring开发的基本包坐标</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-xml\"><span class=\"tag\">&lt;dependency&gt;</span></code></li><li class=\"L1\"><code class=\"lang-xml\"><span class=\"pln\">    </span><span class=\"tag\">&lt;groupId&gt;</span><span class=\"pln\">org.springframework</span><span class=\"tag\">&lt;/groupId&gt;</span></code></li><li class=\"L2\"><code class=\"lang-xml\"><span class=\"pln\">    </span><span class=\"tag\">&lt;artifactId&gt;</span><span class=\"pln\">spring-context</span><span class=\"tag\">&lt;/artifactId&gt;</span></code></li><li class=\"L3\"><code class=\"lang-xml\"><span class=\"pln\">    </span><span class=\"tag\">&lt;version&gt;</span><span class=\"pln\">5.0.5.RELEASE</span><span class=\"tag\">&lt;/version&gt;</span></code></li><li class=\"L4\"><code class=\"lang-xml\"><span class=\"tag\">&lt;/dependency&gt;</span></code></li></ol></pre>\n</li><li><p>编写Dao接口和实现类</p>\n<p>…</p>\n</li><li><p>创建Spring核心配置文件</p>\n<p><img src=\"https://gitee.com/yjl_gitee/typora-pictures/raw/master/img/20210423162157.png\" alt=\"image-20210423162150027\"></p>\n</li><li><p>在Spring配置文件中配置userDao</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-xml\"><span class=\"tag\">&lt;bean</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"userDao\"</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"nrivana.dao.impl.UserDaoImpl\"</span><span class=\"tag\">&gt;&lt;/bean&gt;</span></code></li></ol></pre>\n</li></ol>\n<ol>\n<li><p>使用Spring的API获得Bean实例</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"typ\">ApplicationContext</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">ClassPathXmlApplicationContext</span><span class=\"pun\">(</span><span class=\"str\">\"applicationContext.xml\"</span><span class=\"pun\">);</span></code></li><li class=\"L1\"><code class=\"lang-java\"><span class=\"typ\">UserDao</span><span class=\"pln\"> userDao </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">UserDao</span><span class=\"pun\">)</span><span class=\"pln\"> app</span><span class=\"pun\">.</span><span class=\"pln\">getBean</span><span class=\"pun\">(</span><span class=\"str\">\"userDao\"</span><span class=\"pun\">);</span></code></li></ol></pre>\n</li></ol>\n<h3 id=\"h3-2-spring-\"><a name=\"2、Spring配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2、Spring配置文件</h3><h4 id=\"h4-1-bean-\"><a name=\"1、Bean标签基本配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1、Bean标签基本配置</h4><p>用于配置对象交由Spring来创建</p>\n<p>默认情况下他调用的是类中的<strong>无参构造</strong>，如果没有无参构造函数则不能被创建成功</p>\n<p>基本属性：</p>\n<ul>\n<li>id：Bean实例子啊Spring容器中的唯一标识</li><li>class：Bean的全限定名称（包路径名）</li></ul>\n<h4 id=\"h4-2-bean-\"><a name=\"2、Bean标签范围配置：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2、Bean标签范围配置：</h4><p>scope：指对象的作用范围，取值如下：</p>\n<p><img src=\"https://gitee.com/yjl_gitee/typora-pictures/raw/master/img/20210423164657.png\" alt=\"image-20210423164657422\"></p>\n<p>①当scope的取值为<strong>singleton</strong>时</p>\n<p>Bean的实例化个数：1个</p>\n<p>Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p>\n<p>Bean的生命周期：</p>\n<ul>\n<li>对象创建：当应用加载，创建容器时，头像就被创建了</li><li>对象运行：只要容器在，对象一直活着 </li><li>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</li></ul>\n<p>②当scope的取值为<strong>prototype</strong>时</p>\n<p>Bean的实例化个数：多个</p>\n<p>Bean的实例化时期：当调用getBean()方法时实例化Bean</p>\n<ul>\n<li>对象创建：当使用对象时，创建新的对象实例</li><li>对象运行：只要对象在使用中，就一直活着</li><li>对象销毁：当对象长时间不用时，被Java的垃圾回收器回收了</li></ul>\n<h4 id=\"h4-3-bean-\"><a name=\"3、Bean生命周期配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3、Bean生命周期配置</h4><ol>\n<li>init-method:指定类中的初始化方法名称</li><li>destroy-method:指定类中销毁方法名称</li></ol>\n<h4 id=\"h4-4-bean-\"><a name=\"4、Bean实例化三种方式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4、Bean实例化三种方式</h4><ul>\n<li><p>无参构造方法实例化</p>\n</li><li><p>工厂静态方法实例化：factory-method属性</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">static</span><span class=\"pln\"> </span><span class=\"typ\">UserDao</span><span class=\"pln\"> getUserDao</span><span class=\"pun\">(){</span></code></li><li class=\"L1\"><code class=\"lang-java\"><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">UserDaoImpl</span><span class=\"pun\">();</span></code></li><li class=\"L2\"><code class=\"lang-java\"><span class=\"pun\">}</span></code></li></ol></pre>\n</li></ul>\n<ul>\n<li>工厂实例方法实例化</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"pun\">&lt;</span><span class=\"pln\">bean id</span><span class=\"pun\">=</span><span class=\"str\">\"factory\"</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pun\">=</span><span class=\"str\">\"nrivana.factory.DynamicFactory\"</span><span class=\"pun\">&gt;&lt;/</span><span class=\"pln\">bean</span><span class=\"pun\">&gt;</span></code></li><li class=\"L1\"><code class=\"lang-java\"><span class=\"pun\">&lt;</span><span class=\"pln\">bean id</span><span class=\"pun\">=</span><span class=\"str\">\"userDao\"</span><span class=\"pln\"> factory</span><span class=\"pun\">-</span><span class=\"pln\">bean</span><span class=\"pun\">=</span><span class=\"str\">\"factory\"</span><span class=\"pln\"> factory</span><span class=\"pun\">-</span><span class=\"pln\">method</span><span class=\"pun\">=</span><span class=\"str\">\"getUserDao\"</span><span class=\"pun\">/&gt;</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">DynamicFactory</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code class=\"lang-java\"><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">UserDao</span><span class=\"pln\"> getUserDao</span><span class=\"pun\">(){</span></code></li><li class=\"L2\"><code class=\"lang-java\"><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">UserDaoImpl</span><span class=\"pun\">();</span></code></li><li class=\"L3\"><code class=\"lang-java\"><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L4\"><code class=\"lang-java\"><span class=\"pun\">}</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-java\"><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">DynamicFactory</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code class=\"lang-java\"><span class=\"pln\">    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"typ\">UserDao</span><span class=\"pln\"> getUserDao</span><span class=\"pun\">(){</span></code></li><li class=\"L2\"><code class=\"lang-java\"><span class=\"pln\">        </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">UserDaoImpl</span><span class=\"pun\">();</span></code></li><li class=\"L3\"><code class=\"lang-java\"><span class=\"pln\">    </span><span class=\"pun\">}</span></code></li><li class=\"L4\"><code class=\"lang-java\"><span class=\"pun\">}</span></code></li></ol></pre>\n',0,0,'2021-06-18 09:26:01','/img/articlePic/img3.jpg',1,'Spring1、Spring程序开发步骤：\n导入Spring开发的基本包坐标\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n\n编写Dao接口和实现类\n…\n创建Spring核心配置文件\n\n在Spring配置文件中配置userDao\n&lt;bean id=&quot;userDao&quot; class=&quot;nrivana.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;\n\n\n\n使用Spring的API获得Bean实例\nApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\nUserDao userDao = (UserDao) app.getBean(&quot;userDao&quot;);\n\n\n2、Spring配置文件1、Bean标签基本配置用于配置对象交由Spring来创建\n默认情况下他调用的是类中的无参构造，如果没有无参构造函数则不能被创建成功\n基本属性：\n\nid：Bean实例子啊Spring容器中的唯一标识class：Bean的全限定名称（包路径名）\n2、Bean标签范围配置：scope：指对象的作用范围，取值如下：\n\n①当scope的取值为singleton时\nBean的实例化个数：1个\nBean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例\nBean的生命周期：\n\n对象创建：当应用加载，创建容器时，头像就被创建了对象运行：只要容器在，对象一直活着 对象销毁：当应用卸载，销毁容器时，对象就被销毁了\n②当scope的取值为prototype时\nBean的实例化个数：多个\nBean的实例化时期：当调用getBean()方法时实例化Bean\n\n对象创建：当使用对象时，创建新的对象实例对象运行：只要对象在使用中，就一直活着对象销毁：当对象长时间不用时，被Java的垃圾回收器回收了\n3、Bean生命周期配置\ninit-method:指定类中的初始化方法名称destroy-method:指定类中销毁方法名称\n4、Bean实例化三种方式\n无参构造方法实例化\n工厂静态方法实例化：factory-method属性\npublic static UserDao getUserDao(){\n    return new UserDaoImpl();\n}\n\n\n\n工厂实例方法实例化\n&lt;bean id=&quot;factory&quot; class=&quot;nrivana.factory.DynamicFactory&quot;&gt;&lt;/bean&gt;\n&lt;bean id=&quot;userDao&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getUserDao&quot;/&gt;\n\npublic class DynamicFactory {\n    public UserDao getUserDao(){\n        return new UserDaoImpl();\n    }\n}\n\npublic class DynamicFactory {\n    public UserDao getUserDao(){\n        return new UserDaoImpl();\n    }\n}\n\n'),(9,2,'JavaScript简介','<h3 id=\"h3-1-javascript-\"><a name=\"1.什么是Javascript？\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.什么是Javascript？</h3><ul>\n<li>javascript是一种编程语言</li></ul>\n<h3 id=\"h3-2-javascript-\"><a name=\"2.学习Javascript的意义\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.学习Javascript的意义</h3><ul>\n<li><p>一个前端网页主要由三门语言组成，他们之间是缺一不可的关系</p>\n<ul>\n<li>HTML：确定网页的结构</li><li>CSS: 确定网页的样式</li><li><p>JavaScript: 确定网页的行为(交互)</p>\n<ul>\n<li>众所周知，在前端开发中一个网页的源代码主要由三部分组成（HTML,CSS,Javascript）,其中HTML确定网页的结构，CSS确定网页的样式,而JavaScript则主要负责网页的行为（动态效果，交互事件等）。</li></ul>\n</li></ul>\n</li><li><p>JavaScript应用场景</p>\n<ul>\n<li>1.网页特效</li><li>2.游戏开发(cocos2d-js)</li><li>3.服务端开发(Node.js)</li><li>4.命令行工具(Node.js)</li><li>5.桌面程序(Electron)</li><li>6.App(Cordova)</li><li><p>7.控制硬件-物联网(Ruff)</p>\n<ul>\n<li><strong><em>js作者有一句经典名言：凡是能用js实现的功能，最终都会用js来实现</em></strong></li></ul>\n</li></ul>\n</li></ul>\n<h3 id=\"h3-3-javascript-\"><a name=\"3.JavaScript语言的组成\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3.JavaScript语言的组成</h3><ul>\n<li><p>ECMAScript - JavaScript的核心</p>\n<ul>\n<li>ECMAScript定义了JavaScript的语言规范</li><li>JavaScript的核心：描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</li></ul>\n</li><li><p>DOM - 文档对象模型</p>\n<ul>\n<li>一套操作页面元素的API</li><li>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</li></ul>\n</li><li><p>BOM - 浏览器对象模型</p>\n<ul>\n<li>一套操作浏览器功能的API</li><li>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</li></ul>\n</li></ul>\n<h2 id=\"h2-1-2-javascript-\"><a name=\"1.2-JavaScript的三种写法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2-JavaScript的三种写法</h2><h3 id=\"h3-1-css-\"><a name=\"1-复习CSS代码的三种写法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1-复习CSS代码的三种写法</h3><ul>\n<li>1.行内样式：不推荐，因为不便于维护<ul>\n<li><code>&lt;h1 style=\"background: bisque\"&gt;哈哈哈&lt;/h1&gt;</code></li></ul>\n</li><li>2.内联样式：写在style标签中,如果界面css样式比较简单可以使用，复杂的话不推荐<ul>\n<li><code>&lt;style&gt;.div{background: hotpink;}&lt;/style&gt;</code></li></ul>\n</li><li>3.外联样式：写在css文件中，使用link导入<ul>\n<li><code>&lt;link rel=\"stylesheet\" href=\"./01-css外联样式.css\"&gt;</code><ul>\n<li><strong><em>css外联样式的本质其实就是字符串替换 将下方这行代码替换成对应文件的所有代码</em></strong></li></ul>\n</li></ul>\n</li></ul>\n<h3 id=\"h3-2-js-\"><a name=\"2-JS代码三种写法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2-JS代码三种写法</h3><ul>\n<li><p>JavaScript也有三种书写方式，并且与CSS的三种书写方式几乎一致</p>\n</li><li><p>1.行内样式：不推荐，因为不便于维护</p>\n<ul>\n<li><code>&lt;button onclick=\"window.alert(\'坤哥\')\"&gt;点我就告诉你黑马谁最帅&lt;/button&gt;</code></li></ul>\n</li><li>2.内联样式：写在script标签中,如果界面js代码较少可以使用，复杂的话不推荐<ul>\n<li><code>&lt;script &gt;alert(\"这是JS内联样式\")&lt;/script &gt;</code></li></ul>\n</li><li>3.外联样式：写在js文件中，使用script的src属性导入<ul>\n<li><code>&lt;script src=\"./01-JS外联写法.js\"&gt;&lt;/script&gt;</code></li></ul>\n</li></ul>\n<h3 id=\"h3--strong-3-strong-\"><a name=\"<strong>3</strong>-细节注意点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span><strong>3</strong>-细节注意点</h3><ul>\n<li>1.无论是CSS还是JS的三种写法，当一个html文件存在多种写法时要记住HTML的代码是从上往下解析的</li><li>2.如果script标签没有src属性则表示内联样式，如果有src属性则表示外联样式，外联样式JS代码只能写在<br>js文件中而不能写在script标签中</li></ul>\n',0,0,'2021-06-18 12:22:16','/img/articlePic/img2.jpg',2,'1.什么是Javascript？\njavascript是一种编程语言\n2.学习Javascript的意义\n一个前端网页主要由三门语言组成，他们之间是缺一不可的关系\n\nHTML：确定网页的结构CSS: 确定网页的样式JavaScript: 确定网页的行为(交互)\n\n众所周知，在前端开发中一个网页的源代码主要由三部分组成（HTML,CSS,Javascript）,其中HTML确定网页的结构，CSS确定网页的样式,而JavaScript则主要负责网页的行为（动态效果，交互事件等）。\n\nJavaScript应用场景\n\n1.网页特效2.游戏开发(cocos2d-js)3.服务端开发(Node.js)4.命令行工具(Node.js)5.桌面程序(Electron)6.App(Cordova)7.控制硬件-物联网(Ruff)\n\njs作者有一句经典名言：凡是能用js实现的功能，最终都会用js来实现\n\n\n3.JavaScript语言的组成\nECMAScript - JavaScript的核心\n\nECMAScript定义了JavaScript的语言规范JavaScript的核心：描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关\nDOM - 文档对象模型\n\n一套操作页面元素的APIDOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作\nBOM - 浏览器对象模型\n\n一套操作浏览器功能的API通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等\n\n1.2-JavaScript的三种写法1-复习CSS代码的三种写法\n1.行内样式：不推荐，因为不便于维护\n&lt;h1 style=&quot;background: bisque&quot;&gt;哈哈哈&lt;/h1&gt;\n2.内联样式：写在style标签中,如果界面css样式比较简单可以使用，复杂的话不推荐\n&lt;style&gt;.div{background: hotpink;}&lt;/style&gt;\n3.外联样式：写在css文件中，使用link导入\n&lt;link rel=&quot;stylesheet&quot; href=&quot;./01-css外联样式.css&quot;&gt;\ncss外联样式的本质其实就是字符串替换 将下方这行代码替换成对应文件的所有代码\n\n\n2-JS代码三种写法\nJavaScript也有三种书写方式，并且与CSS的三种书写方式几乎一致\n1.行内样式：不推荐，因为不便于维护\n\n&lt;button onclick=&quot;window.alert(&#39;坤哥&#39;)&quot;&gt;点我就告诉你黑马谁最帅&lt;/button&gt;\n2.内联样式：写在script标签中,如果界面js代码较少可以使用，复杂的话不推荐\n&lt;script &gt;alert(&quot;这是JS内联样式&quot;)&lt;/script &gt;\n3.外联样式：写在js文件中，使用script的src属性导入\n&lt;script src=&quot;./01-JS外联写法.js&quot;&gt;&lt;/script&gt;\n\n3-细节注意点\" class=\"reference-link\">3-细节注意点\n1.无论是CSS还是JS的三种写法，当一个html文件存在多种写法时要记住HTML的代码是从上往下解析的2.如果script标签没有src属性则表示内联样式，如果有src属性则表示外联样式，外联样式JS代码只能写在js文件中而不能写在script标签中\n'),(10,2,'JavaScript运算符','<h1 id=\"h1-04-\"><a name=\"04-运算符与表达式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>04-运算符与表达式</h1><ul>\n<li><code>1.运算符只是一种运算的符号，单独使用无意义，通常与需要计算的数据在一起组成表达式</code></li><li><code>2.表达式一定有结果，要么直接打印要么存入变量中</code></li></ul>\n<h2 id=\"h2-1-1-js-\"><a name=\"1.1-js中+号的作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.1-js中+号的作用</h2><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> name </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"str\">\'林立群\'</span><span class=\"pln\"> </span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"我的名字是name\"</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"com\">//这里name是字符串的一部分，无法获取到变量的值</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\'我的名字是：\'</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> name </span><span class=\"pun\">);</span><span class=\"com\">//使用+号连接左右数据</span></code></li><li class=\"L4\"><code class=\"lang-html\"></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//1.字符串连接符：如果+号两边，只要有一边是字符串，就是字符串的连接符</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"10\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> name </span><span class=\"pun\">);</span><span class=\"com\">//10林立群</span></code></li><li class=\"L7\"><code class=\"lang-html\"></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//2.数学加法：两边都要是number</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">);</span></code></li><li class=\"L0\"><code class=\"lang-html\"></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//示例</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"com\">//30</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\"10\"</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"com\">//2010</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"str\">\"10\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">);</span><span class=\"com\">//201010</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"tag\">&lt;/script&gt;</span></code></li></ol></pre>\n<h2 id=\"h2-1-2-\"><a name=\"1.2-算术运算符与算术表达式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2-算术运算符与算术表达式</h2><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/**1.算术运算符：数学中的算术运算</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"com\">     +：加法</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"com\">     -：减法</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"com\">     *：乘法</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"com\">     /：除法</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"com\">     %：求余（求模运算）</span></code></li><li class=\"L7\"><code class=\"lang-html\"></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"com\">     运算符只是一种运算的符号，由运算符参与的式子称之为表达式</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"com\">     2.算术表达式（运算式）：由算术运算符组成的式子    例如： 数字1 + 数字2</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"com\">     3.表达式一定会得到一个运算的结果：要么直接打印这个结果（直接量），要么用变量保存</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"com\">     4.算术运算符的优先级与小学数学学的一致：小括号&gt;乘除模&gt;加减</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"com\">     */</span></code></li><li class=\"L3\"><code class=\"lang-html\"></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/**加法*/</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"com\">//2  直接打印算术表达式的结果</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">100</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">50</span><span class=\"pun\">;</span><span class=\"com\">//用变量保存表达式的结果</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> num </span><span class=\"pun\">);</span><span class=\"com\">//150</span></code></li><li class=\"L8\"><code class=\"lang-html\"></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/**减*/</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"com\">//1 数值</span></code></li><li class=\"L1\"><code class=\"lang-html\"></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/**乘法*/</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pln\"> </span><span class=\"pun\">*</span><span class=\"pln\"> </span><span class=\"lit\">3</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"com\">//60</span></code></li><li class=\"L4\"><code class=\"lang-html\"></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/**除法</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"com\">     * 1.如果两数相除的结果是一个无理数（无限不循环小数）或者无限循环小数，则无法完整的表示所有的小数</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"com\">     一般这种情况不影响开发，可以忽略</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"com\">     * 2.数学中0不能作为除数，JS里也一样</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"com\">     如果作为除数会得到一个关键字：Infinity，代表无穷大的意思</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"com\">     */</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">/</span><span class=\"pln\"> </span><span class=\"lit\">3</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"com\">//3.333333</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">/</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"com\">//-5</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">/</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"com\">//Infinity无穷大</span></code></li><li class=\"L4\"><code class=\"lang-html\"></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/**求模*/</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pln\"> </span><span class=\"pun\">%</span><span class=\"pln\"> </span><span class=\"lit\">3</span><span class=\"pln\"> </span><span class=\"pun\">)</span><span class=\"com\">//1</span></code></li><li class=\"L7\"><code class=\"lang-html\"></code></li><li class=\"L8\"><code class=\"lang-html\"></code></li><li class=\"L9\"><code class=\"lang-html\"></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;/script&gt;</span></code></li></ol></pre>\n<h2 id=\"h2-1-3-\"><a name=\"1.3-复合算术运算符\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.3-复合算术运算符</h2><ul>\n<li>符合算术运算符是算术运算符的一种简写形式<ul>\n<li><code>num += 5</code> 只是 <code>num = num + 5</code>的简写形式，他们之间完全等价</li></ul>\n</li></ul>\n<p><img src=\"day01.assets/0106.gif\" alt=\"\"></p>\n<ul>\n<li><code>+=</code>: 在自身值的基础上再加多少</li><li><code>-=</code>：在自身值的基础上减多少</li><li><code>*=</code>: 在自身值的基础上乘多少</li><li><code>/=</code>: 在自身值的基础上除多少</li><li><code>%=</code>：在自身值的基础上模多少</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/**</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"com\">     *  `+=`: 在自身值的基础上再加多少</span></code></li><li class=\"L3\"><code class=\"lang-html\"></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"com\">     * `-=`：在自身值的基础上减多少</span></code></li><li class=\"L5\"><code class=\"lang-html\"></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"com\">     * `*=`: 在自身值的基础上乘多少</span></code></li><li class=\"L7\"><code class=\"lang-html\"></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"com\">     * `/=`: 在自身值的基础上除多少</span></code></li><li class=\"L9\"><code class=\"lang-html\"></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"com\">     * `%=`：在自身值的基础上模多少</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"com\">     */</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//+=</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num1 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    num1 </span><span class=\"pun\">+=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"com\">//这行代码相当于 num1 = num1 + 10 的简写形式</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> num1 </span><span class=\"pun\">);</span><span class=\"com\">//20</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//-=</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num2 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">70</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    num2 </span><span class=\"pun\">-=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">//相当于  num2 = num2 - 10;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">num2</span><span class=\"pun\">);</span><span class=\"com\">//60</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//*=</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num3 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    num3  </span><span class=\"pun\">*=</span><span class=\"pln\">  </span><span class=\"lit\">4</span><span class=\"pun\">;</span><span class=\"pln\">  </span><span class=\"com\">//相当于  num3 = num3 * 4;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">num3</span><span class=\"pun\">);</span><span class=\"com\">//80</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">// /=</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num4 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">90</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    num4 </span><span class=\"pun\">/=</span><span class=\"pln\"> </span><span class=\"lit\">3</span><span class=\"pun\">;</span><span class=\"com\">//相当于 num4 = num4 / 3</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">num4</span><span class=\"pun\">);</span><span class=\"com\">//30</span></code></li><li class=\"L8\"><code class=\"lang-html\"></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num5 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    num5 </span><span class=\"pun\">%=</span><span class=\"pln\"> </span><span class=\"lit\">3</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">// num5 = num5 % 3;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log</span><span class=\"pun\">(</span><span class=\"pln\">num5</span><span class=\"pun\">);</span><span class=\"com\">//1</span></code></li><li class=\"L2\"><code class=\"lang-html\"></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"tag\">&lt;/script&gt;</span></code></li></ol></pre>\n<h2 id=\"h2-1-4-\"><a name=\"1.4-自增/自减运算符\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.4-自增/自减运算符</h2><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//自增运算符 : ++</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//自增表达式： num++</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//以后用的最多的就是自增表达式：num++</span></code></li><li class=\"L4\"><code class=\"lang-html\"></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    num</span><span class=\"pun\">++;</span><span class=\"com\">//num = num + 1</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> num </span><span class=\"pun\">);</span></code></li><li class=\"L8\"><code class=\"lang-html\"></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">// 自减运算符：--</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">// 自减表达式：num--</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num1 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">20</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    num1</span><span class=\"pun\">--;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> num1 </span><span class=\"pun\">);</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"tag\">&lt;/script&gt;</span></code></li></ol></pre>\n<h3 id=\"h3--\"><a name=\"课后拓展：前自增与后自增区别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>课后拓展：前自增与后自增区别</h3><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">/*1.自增/自减运算符既可以写在变量的前面，也可以写在后面</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"com\">        * 前自增表达式: ++num</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"com\">        * 后自增表达式: num++</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"com\">      2.前自增与后自增异同点</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"com\">        * 相同点：对于变量自身而言，没有任何区别，都是自身+1</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"com\">        * 不同点：表达式的结果不同</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"com\">            * 前自增表达式：先自身+1，后赋值（将num的值赋值给自增表达式的结果）</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"com\">            * 后自增表达式：先赋值，后自身+1</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"com\">     */</span></code></li><li class=\"L0\"><code class=\"lang-html\"></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//1.前自增表达式</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num1 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> res1 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">++</span><span class=\"pln\">num1</span><span class=\"pun\">;</span><span class=\"com\">//将前自增表达式的结果赋值给res1</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"num1:\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> num1 </span><span class=\"pun\">);</span><span class=\"com\">//11</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"res1:\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> res1 </span><span class=\"pun\">);</span><span class=\"com\">//11</span></code></li><li class=\"L6\"><code class=\"lang-html\"></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//2.后自增表达式</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> num2 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> res2 </span><span class=\"pun\">=</span><span class=\"pln\"> num2</span><span class=\"pun\">++;</span><span class=\"com\">//将后自增表达式的结果赋值给res2</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"num2:\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> num2 </span><span class=\"pun\">);</span><span class=\"com\">//11</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"res2:\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> res2 </span><span class=\"pun\">);</span><span class=\"com\">//10</span></code></li><li class=\"L2\"><code class=\"lang-html\"></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//3.例子（开发中不会遇到）</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> n1 </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">10</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"kwd\">var</span><span class=\"pln\"> res </span><span class=\"pun\">=</span><span class=\"pln\"> n1</span><span class=\"pun\">++</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> n1</span><span class=\"pun\">++;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//分析：自增表达式结果/n1的值</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">//res = 10/11 + 11/12</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"n1:\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> n1 </span><span class=\"pun\">);</span><span class=\"com\">//12</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    console</span><span class=\"pun\">.</span><span class=\"pln\">log </span><span class=\"pun\">(</span><span class=\"pln\"> </span><span class=\"str\">\"res:\"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> res </span><span class=\"pun\">);</span><span class=\"com\">//21</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;/script&gt;</span></code></li></ol></pre>\n',0,0,'2021-06-18 12:24:53','/img/articlePic/img4.jpg',2,'04-运算符与表达式\n1.运算符只是一种运算的符号，单独使用无意义，通常与需要计算的数据在一起组成表达式2.表达式一定有结果，要么直接打印要么存入变量中\n1.1-js中+号的作用&lt;script&gt;\n    var name = &#39;林立群&#39; ;\n    console.log ( &quot;我的名字是name&quot; );//这里name是字符串的一部分，无法获取到变量的值\n    console.log ( &#39;我的名字是：&#39; + name );//使用+号连接左右数据\n\n    //1.字符串连接符：如果+号两边，只要有一边是字符串，就是字符串的连接符\n    console.log ( &quot;10&quot; + name );//10林立群\n\n    //2.数学加法：两边都要是number\n    console.log ( 10 + 10 );\n\n    //示例\n    console.log ( 20 + 10 );//30\n    console.log ( 20 + &quot;10&quot; );//2010\n    console.log ( 20 + &quot;10&quot; + 10 );//201010\n&lt;/script&gt;\n\n1.2-算术运算符与算术表达式&lt;script&gt;\n    /**1.算术运算符：数学中的算术运算\n     +：加法\n     -：减法\n     *：乘法\n     /：除法\n     %：求余（求模运算）\n\n     运算符只是一种运算的符号，由运算符参与的式子称之为表达式\n     2.算术表达式（运算式）：由算术运算符组成的式子    例如： 数字1 + 数字2\n     3.表达式一定会得到一个运算的结果：要么直接打印这个结果（直接量），要么用变量保存\n     4.算术运算符的优先级与小学数学学的一致：小括号&gt;乘除模&gt;加减\n     */\n\n    /**加法*/\n    console.log ( 1 + 1 )//2  直接打印算术表达式的结果\n    var num = 100 + 50;//用变量保存表达式的结果\n    console.log ( num );//150\n\n    /**减*/\n    console.log ( 2 - 1 )//1 数值\n\n    /**乘法*/\n    console.log ( 20 * 3 )//60\n\n    /**除法\n     * 1.如果两数相除的结果是一个无理数（无限不循环小数）或者无限循环小数，则无法完整的表示所有的小数\n     一般这种情况不影响开发，可以忽略\n     * 2.数学中0不能作为除数，JS里也一样\n     如果作为除数会得到一个关键字：Infinity，代表无穷大的意思\n     */\n    console.log ( 10 / 3 )//3.333333\n    console.log ( 10 / - 2 )//-5\n    console.log ( 10 / 0 )//Infinity无穷大\n\n    /**求模*/\n    console.log ( 10 % 3 )//1\n\n\n\n&lt;/script&gt;\n\n1.3-复合算术运算符\n符合算术运算符是算术运算符的一种简写形式\nnum += 5 只是 num = num + 5的简写形式，他们之间完全等价\n\n\n\n+=: 在自身值的基础上再加多少-=：在自身值的基础上减多少*=: 在自身值的基础上乘多少/=: 在自身值的基础上除多少%=：在自身值的基础上模多少\n&lt;script&gt;\n    /**\n     *  `+=`: 在自身值的基础上再加多少\n\n     * `-=`：在自身值的基础上减多少\n\n     * `*=`: 在自身值的基础上乘多少\n\n     * `/=`: 在自身值的基础上除多少\n\n     * `%=`：在自身值的基础上模多少\n     */\n    //+=\n    var num1 = 10;\n    num1 += 10;//这行代码相当于 num1 = num1 + 10 的简写形式\n    console.log ( num1 );//20\n    //-=\n    var num2 = 70;\n    num2 -= 10; //相当于  num2 = num2 - 10;\n    console.log(num2);//60\n    //*=\n    var num3 = 20;\n    num3  *=  4;  //相当于  num3 = num3 * 4;\n    console.log(num3);//80\n    // /=\n    var num4 = 90;\n    num4 /= 3;//相当于 num4 = num4 / 3\n    console.log(num4);//30\n\n    var num5 = 10;\n    num5 %= 3; // num5 = num5 % 3;\n    console.log(num5);//1\n\n&lt;/script&gt;\n\n1.4-自增/自减运算符&lt;script&gt;\n    //自增运算符 : ++\n    //自增表达式： num++\n    //以后用的最多的就是自增表达式：num++\n\n    var num = 10;\n    num++;//num = num + 1\n    console.log ( num );\n\n    // 自减运算符：--\n    // 自减表达式：num--\n    var num1 = 20;\n    num1--;\n    console.log ( num1 );\n&lt;/script&gt;\n\n课后拓展：前自增与后自增区别&lt;script&gt;\n    /*1.自增/自减运算符既可以写在变量的前面，也可以写在后面\n        * 前自增表达式: ++num\n        * 后自增表达式: num++\n      2.前自增与后自增异同点\n        * 相同点：对于变量自身而言，没有任何区别，都是自身+1\n        * 不同点：表达式的结果不同\n            * 前自增表达式：先自身+1，后赋值（将num的值赋值给自增表达式的结果）\n            * 后自增表达式：先赋值，后自身+1\n     */\n\n    //1.前自增表达式\n    var num1 = 10;\n    var res1 = ++num1;//将前自增表达式的结果赋值给res1\n    console.log ( &quot;num1:&quot; + num1 );//11\n    console.log ( &quot;res1:&quot; + res1 );//11\n\n    //2.后自增表达式\n    var num2 = 10;\n    var res2 = num2++;//将后自增表达式的结果赋值给res2\n    console.log ( &quot;num2:&quot; + num2 );//11\n    console.log ( &quot;res2:&quot; + res2 );//10\n\n    //3.例子（开发中不会遇到）\n    var n1 = 10;\n    var res = n1++ + n1++;\n    //分析：自增表达式结果/n1的值\n    //res = 10/11 + 11/12\n    console.log ( &quot;n1:&quot; + n1 );//12\n    console.log ( &quot;res:&quot; + res );//21\n&lt;/script&gt;\n\n'),(11,2,'初识node.js','<h1 id=\"h1-01-nodejs-\"><a name=\"01-nodejs入门\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>01-nodejs入门</h1><h2 id=\"h2-1-1-nodejs-\"><a name=\"1.1-学习NodeJS的意义\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.1-学习NodeJS的意义</h2><ul>\n<li>1.<code>了解客户端浏览器与服务端后台的交互过程</code>，可以在以后的前端开发工作中与后台人员之间的沟通更加容易理解<ul>\n<li>虽然以后工作中不一定用的上nodejs，但是通过对服务端开发的了解，能够让你在日常工作中与公司后台人员之间的沟通变得更加轻松</li></ul>\n</li><li><p>2.了解服务端开发的一些特性，可以在以后的工作中，当我们前端与后台交互出现bug问题时，能够更快速的定位bug是出现在自己的客户端还是别人的服务端。</p>\n<ul>\n<li>作为一名前端人员，如果对后台不了解，那么以后在与后台交互的开发中有可能明明是后台的问题，但是由于自身对后台的不了解再加上前期的经验不足，导致解决问题的时间增加（加班）。</li></ul>\n</li><li><p>3.了解服务端开发的过程，可以为以后的职业发展打下一定的基础（全栈工程师）</p>\n</li></ul>\n<h2 id=\"h2-1-2-nodejs\"><a name=\"1.2-什么是nodejs\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2-什么是nodejs</h2><ul>\n<li>1.Node.js官网地址：<a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a></li><li>中文:<a href=\"http://nodejs.cn/api/\">http://nodejs.cn/api/</a></li><li>1.Node 是一个构建于 Chrome V8引擎之上的一个Javascript 运行环境<ul>\n<li>Node<code>是</code>一个<code>运行环境</code>，作用是让js拥有开发服务端的功能</li></ul>\n</li><li>2.Node使用事件驱动、非阻塞IO模型（异步读写）使得它非常的轻量级和高效<ul>\n<li>Node中绝大多数API都是异步（类似于ajax），目的是提高性能</li></ul>\n</li><li>3.Node中的<code>NPM</code>是世界上最大的开源库生态系统（类似于github）<ul>\n<li>NMP官网:<a href=\"https://www.npmjs.com\">https://www.npmjs.com</a></li></ul>\n</li></ul>\n<h2 id=\"h2-1-3-node-js-\"><a name=\"1.3-Node.js环境安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.3-Node.js环境安装</h2><h3 id=\"h3-1-3-1-node-\"><a name=\"1.3.1-如何确认当前电脑是否已经安装了Node环境\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.3.1-如何确认当前电脑是否已经安装了Node环境</h3><ul>\n<li>打开终端，输入 <code>node -v</code>,如果能看到版本号则说明当前电脑已经安装Node环境，如果提示<code>Node不是内部或外部命令</code>，则表示未安装<ul>\n<li><strong><em>一旦安装了node，则会自动一并安装<code>npm</code></em></strong></li></ul>\n</li></ul>\n<h3 id=\"h3-1-3-2-npm-cnpm-\"><a name=\"1.3.2-npm介绍与cnpm安装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.3.2-npm介绍与cnpm安装</h3><ul>\n<li>1.npm<ul>\n<li>全称node package manager</li><li>官方推出的包管理工具</li><li>不需要额外安装，安装node之后自带</li><li>因为服务器不在国内，所以有时候安装特别慢，甚至无法成功</li></ul>\n</li><li>2.cnpm<ul>\n<li>全称china node package manager</li><li>非官方推出的包管理工具</li><li>需要额外安装：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li><li>国内安装特别快，不需要翻墙（如果特殊情况无法安装，也可使用npm）</li><li>安装成功之后，通过<code>cnpm -v</code>查看</li></ul>\n</li></ul>\n<h2 id=\"h2--1-3-node-js-\"><a name=\"==1.3-如何运行Node.js程序==\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>==1.3-如何运行Node.js程序==</h2><ul>\n<li><p>1.REPL：交互解释器</p>\n<ul>\n<li>Node运行环境的另一种叫法，作用是解析执行js代码</li><li>用法<ul>\n<li>第一种方式：直接双击打开 node.exe,然后写js代码</li><li>第二种方式：<ul>\n<li>先在终端先执行node，进入node环境</li><li>然后写js代码</li></ul>\n</li></ul>\n</li></ul>\n</li><li><p>2.使用终端命令<code>node [js文件路径]</code>开始运行js文件</p>\n<ul>\n<li>（1）其实当我们在终端执行Node命令时，并不是我们终端去编译解释js代码，而是电脑会自动打开Node安装包中Node.exe应用程序来打开js文件<ul>\n<li>Node.exe是一个类似于终端的应用程序，没有界面(CLI程序：command-line interface，命令行界面)</li><li>Node.exe工作环境称之为REPL环境，也就是交互式解释器</li></ul>\n</li><li>（2）REPL才是真正解释执行我们js代码的解释器</li></ul>\n</li></ul>\n<p>  3.nodemon</p>\n<ul>\n<li>node开发之友，当你的js文件发生变化的时候，nodemon会自动帮你启动node程序</li></ul>\n<ul>\n<li><p>安装: <code>npm install -g nodemon</code></p>\n<ul>\n<li>使用：<code>nodemon [js文件名]</code></li></ul>\n</li></ul>\n<h2 id=\"h2-1-4-js-js-\"><a name=\"1.4-服务端js与客户端js区别\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.4-服务端js与客户端js区别</h2><ul>\n<li>1.客户端JS由三部分组成<ul>\n<li>ECMAScript：确定js的语法规范</li><li>DOM：js操作网页内容</li><li>BOM：js操作浏览器窗口</li></ul>\n</li><li>2.服务端JS只有ECMAScript<ul>\n<li>因为服务端是没有界面的<ul>\n<li>==<strong>在nodejs中使用dom与bom的api程序会报错</strong>==</li></ul>\n</li></ul>\n</li></ul>\n',0,0,'2021-06-18 12:28:01','/img/articlePic/img6.jpg',2,'01-nodejs入门1.1-学习NodeJS的意义\n1.了解客户端浏览器与服务端后台的交互过程，可以在以后的前端开发工作中与后台人员之间的沟通更加容易理解\n虽然以后工作中不一定用的上nodejs，但是通过对服务端开发的了解，能够让你在日常工作中与公司后台人员之间的沟通变得更加轻松\n2.了解服务端开发的一些特性，可以在以后的工作中，当我们前端与后台交互出现bug问题时，能够更快速的定位bug是出现在自己的客户端还是别人的服务端。\n\n作为一名前端人员，如果对后台不了解，那么以后在与后台交互的开发中有可能明明是后台的问题，但是由于自身对后台的不了解再加上前期的经验不足，导致解决问题的时间增加（加班）。\n3.了解服务端开发的过程，可以为以后的职业发展打下一定的基础（全栈工程师）\n\n1.2-什么是nodejs\n1.Node.js官网地址：https://nodejs.org/en/中文:http://nodejs.cn/api/1.Node 是一个构建于 Chrome V8引擎之上的一个Javascript 运行环境\nNode是一个运行环境，作用是让js拥有开发服务端的功能\n2.Node使用事件驱动、非阻塞IO模型（异步读写）使得它非常的轻量级和高效\nNode中绝大多数API都是异步（类似于ajax），目的是提高性能\n3.Node中的NPM是世界上最大的开源库生态系统（类似于github）\nNMP官网:https://www.npmjs.com\n\n1.3-Node.js环境安装1.3.1-如何确认当前电脑是否已经安装了Node环境\n打开终端，输入 node -v,如果能看到版本号则说明当前电脑已经安装Node环境，如果提示Node不是内部或外部命令，则表示未安装\n一旦安装了node，则会自动一并安装npm\n\n1.3.2-npm介绍与cnpm安装\n1.npm\n全称node package manager官方推出的包管理工具不需要额外安装，安装node之后自带因为服务器不在国内，所以有时候安装特别慢，甚至无法成功\n2.cnpm\n全称china node package manager非官方推出的包管理工具需要额外安装：npm install -g cnpm --registry=https://registry.npm.taobao.org国内安装特别快，不需要翻墙（如果特殊情况无法安装，也可使用npm）安装成功之后，通过cnpm -v查看\n\n==1.3-如何运行Node.js程序==\n1.REPL：交互解释器\n\nNode运行环境的另一种叫法，作用是解析执行js代码用法\n第一种方式：直接双击打开 node.exe,然后写js代码第二种方式：\n先在终端先执行node，进入node环境然后写js代码\n\n\n2.使用终端命令node [js文件路径]开始运行js文件\n\n（1）其实当我们在终端执行Node命令时，并不是我们终端去编译解释js代码，而是电脑会自动打开Node安装包中Node.exe应用程序来打开js文件\nNode.exe是一个类似于终端的应用程序，没有界面(CLI程序：command-line interface，命令行界面)Node.exe工作环境称之为REPL环境，也就是交互式解释器\n（2）REPL才是真正解释执行我们js代码的解释器\n\n  3.nodemon\n\nnode开发之友，当你的js文件发生变化的时候，nodemon会自动帮你启动node程序\n\n安装: npm install -g nodemon\n\n使用：nodemon [js文件名]\n\n1.4-服务端js与客户端js区别\n1.客户端JS由三部分组成\nECMAScript：确定js的语法规范DOM：js操作网页内容BOM：js操作浏览器窗口\n2.服务端JS只有ECMAScript\n因为服务端是没有界面的\n==在nodejs中使用dom与bom的api程序会报错==\n\n\n'),(12,3,'Vue入门','<h1 id=\"h1--01-vue-\"><a name=\"==01-Vue入门==\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>==01-Vue入门==</h1><ul>\n<li>==学习Vue最好的方式：查看官网文档==<ul>\n<li><a href=\"https://cn.vuejs.org/\">https://cn.vuejs.org/</a></li></ul>\n</li></ul>\n<h2 id=\"h2-1-1-vue-\"><a name=\"1.1-Vue介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.1-Vue介绍</h2><table>\n<thead>\n<tr>\n<th>Vue介绍</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.Vue是一个JavaScript框架</td>\n<td>框架：别人写好的js文件</td>\n</tr>\n<tr>\n<td>2.作用 ： 构建用户页面</td>\n<td>将数据渲染到页面</td>\n</tr>\n<tr>\n<td>3.特点：渐进式</td>\n<td>组件式开发</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>1.Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong><ul>\n<li>Vue是一个<code>JavaScript框架</code><ul>\n<li>Vue是一个用于<code>构建用户页面</code>的框架<ul>\n<li>Vue是一个用于构建用户界面得<code>渐进式框架</code></li></ul>\n</li></ul>\n</li></ul>\n</li><li>2.渐进式框架介绍<ul>\n<li>a. Vue.js提供了很多的功能，但是这些功能并不是集成在一起的，而是分开的<ul>\n<li>类似于Nodejs,拆分成很多个小模块</li></ul>\n</li><li>b. 在项目中我们用到什么，就导入什么<ul>\n<li>这样可以保证我们用到的最少</li></ul>\n</li><li>c. 说人话：Vue相当于是一个五星级自助餐，我们想要用什么就拿什么，这样可以最大限度避免浪费资源</li></ul>\n</li></ul>\n<ul>\n<li>==3.总结==<ul>\n<li>(1)Vue是什么？<ul>\n<li>一个JavaScript框架</li></ul>\n</li><li>(2)Vue干什么用的?<ul>\n<li>作用是构建用户界面</li></ul>\n</li><li>(3)有什么特点？<ul>\n<li>特点是：渐进式</li></ul>\n</li></ul>\n</li></ul>\n<h2 id=\"h2-1-2-vue-\"><a name=\"1.2-Vue特点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2-Vue特点</h2><h3 id=\"h3-1-\"><a name=\"1-数据驱动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1-数据驱动</h3><ul>\n<li>1.数据驱动 ：Vue会根据数据，自动渲染页面<ul>\n<li>无需DOM操作，修改了对象中的数据，页面会自动渲染</li><li>Vue的底层使用了一种叫做虚拟DOM的技术，能够实时监听js对象的属性变化从而自动更新页面DOM元素<ul>\n<li>关于虚拟DOM了解传送门(难度极大，可以留着以后进阶学习)<ul>\n<li><a href=\"https://www.jianshu.com/p/ce2cdd4b1f04\">https://www.jianshu.com/p/ce2cdd4b1f04</a></li><li><a href=\"https://www.jianshu.com/p/d1afa813d566\">https://www.jianshu.com/p/d1afa813d566</a></li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n<table>\n<thead>\n<tr>\n<th>原始的前端开发</th>\n<th>Vue.js的前端开发</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1.使用HTML+CSS搭建页面</td>\n<td>1.使用HTML+CSS搭建页面</td>\n</tr>\n<tr>\n<td>2.使用异步请求技术向后台请求数据</td>\n<td>2.使用异步请求技术向后台请求数据</td>\n</tr>\n<tr>\n<td>3.使用原生的js或者jQuery操作DOM，渲染数据</td>\n<td><code>3.Vue自动渲染数据</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"h3-2-\"><a name=\"2-组件化开发\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2-组件化开发</h3><ul>\n<li>2.组件化开发 ： 网页中的某一个部分,可能需要在多个地方被重复使用，就可以定义成一个组件<ul>\n<li>组件化开发好处 <ul>\n<li>a. 一次定义，多处使用</li><li>b. 便于开发维护<ul>\n<li>类似于我们之前的函数封装解决代码冗余问题。Vue.js可以把网页的某一个部分(HTML+CSS+JS)封装成一个组件</li></ul>\n</li></ul>\n</li></ul>\n</li></ul>\n<h2 id=\"h2-1-3-vue-\"><a name=\"1.3-Vue基本使用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.3-Vue基本使用</h2><ul>\n<li>官方文档传送门：<a href=\"https://cn.vuejs.org/v2/guide/#起步\">Vue官方文档</a></li><li>第三方框架通用的使用步骤<ul>\n<li>1.导包</li><li>2.写HTML结构</li><li>3.js中初始化配置</li></ul>\n</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"dec\">&lt;!DOCTYPE html&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"tag\">&lt;html</span><span class=\"pln\"> </span><span class=\"atn\">lang</span><span class=\"pun\">=</span><span class=\"atv\">\"en\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"tag\">&lt;head&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">charset</span><span class=\"pun\">=</span><span class=\"atv\">\"UTF-8\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"viewport\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"width=device-width, initial-scale=1.0\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">http-equiv</span><span class=\"pun\">=</span><span class=\"atv\">\"X-UA-Compatible\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"ie=edge\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;title&gt;</span><span class=\"pln\">Document</span><span class=\"tag\">&lt;/title&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 1.导包 --&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;script</span><span class=\"pln\"> </span><span class=\"atn\">src</span><span class=\"pun\">=</span><span class=\"atv\">\"./vue.js\"</span><span class=\"tag\">&gt;&lt;/script&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;/head&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"tag\">&lt;body&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 2.HTML结构 --&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"app\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">        {{ message }}</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">        {{ name }}</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">        {{ age }}</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">        {{ sex }}</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"com\">/* 3.初始化配置 */</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"com\">/* </span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"com\">        (1)Vue是导入vue.js之后得到的一个全局构造函数</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"com\">        (2)调用Vue构造函数 创建一个vue实例对象</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"com\">        */</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"kwd\">var</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Vue</span><span class=\"pun\">({</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">//el: element 用来设置vue实例的挂载点（将数据渲染到哪个元素身上）</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">            el</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'#app\'</span><span class=\"pun\">,</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">//data: 要渲染的数据</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 数据驱动：vue会根据data中的数据，自动渲染页面(无需DOM操作) */</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            data</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">                message</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'Hello Vue!\'</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">                name</span><span class=\"pun\">:</span><span class=\"str\">\'坤哥\'</span><span class=\"pun\">,</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">                age</span><span class=\"pun\">:</span><span class=\"lit\">32</span><span class=\"pun\">,</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">                sex</span><span class=\"pun\">:</span><span class=\"str\">\'男\'</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">})</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/script&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"tag\">&lt;/body&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"tag\">&lt;/html&gt;</span></code></li></ol></pre>\n<h2 id=\"h2-1-4-vue-\"><a name=\"1.4-Vue的挂载点介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.4-Vue的挂载点介绍</h2><ul>\n<li><p>el挂载点官方文档传送门：<a href=\"https://cn.vuejs.org/v2/api/#el\">https://cn.vuejs.org/v2/api/#el</a></p>\n</li><li><p>1.挂载点<code>el</code>作用 ： 告诉vue实例，你要将data中的数据渲染到哪一个试图</p>\n</li><li><p>2.<code>注意点</code></p>\n<ul>\n<li>(1)挂载点可以使用  id选择器（vue推荐使用）  类选择器  标签选择器<ul>\n<li>开发中基本上都是id选择器，保证HTML标签唯一性</li><li>如果你希望data中的数据能够对多个元素生效，可以将vue实例挂载到父元素中</li></ul>\n</li><li>(2)如果选择器选中了多个元素，只会选择第一个元素</li><li>(3)挂载点不能设置为html和body标签 （程序报错）</li></ul>\n</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"dec\">&lt;!DOCTYPE html&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"tag\">&lt;html</span><span class=\"pln\"> </span><span class=\"atn\">lang</span><span class=\"pun\">=</span><span class=\"atv\">\"en\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"tag\">&lt;head&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">charset</span><span class=\"pun\">=</span><span class=\"atv\">\"UTF-8\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"viewport\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"width=device-width, initial-scale=1.0\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">http-equiv</span><span class=\"pun\">=</span><span class=\"atv\">\"X-UA-Compatible\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"ie=edge\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;title&gt;</span><span class=\"pln\">Document</span><span class=\"tag\">&lt;/title&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 1.导包 --&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;script</span><span class=\"pln\"> </span><span class=\"atn\">src</span><span class=\"pun\">=</span><span class=\"atv\">\"./vue.js\"</span><span class=\"tag\">&gt;&lt;/script&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;/head&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"tag\">&lt;body&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 2.HTML结构 --&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"hm\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"app\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">            {{ message }}</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;hr&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"box\"</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"container\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">            {{ message }}</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;hr&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"container\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">            {{ message }}</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"com\">/* 3.初始化配置 */</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"com\">/* </span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"com\">        (1)Vue是导入vue.js之后得到的一个全局构造函数</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"com\">        (2)调用Vue构造函数 创建一个vue实例对象</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"com\">        */</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"kwd\">var</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Vue</span><span class=\"pun\">({</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">//el: element 用来设置vue实例的挂载点（将数据渲染到哪个元素身上）</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* </span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"com\">            (1)挂载点可以使用  id选择器（vue推荐使用）  类选择器  标签选择器</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"com\">            (2)如果选择器选中了多个元素，只会选择第一个元素</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"com\">            (3)挂载点不能设置为html和body标签 （程序报错）</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"com\">            */</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">            el</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'#hm\'</span><span class=\"pun\">,</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">//data: 要渲染的数据</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 数据驱动：vue会根据data中的数据，自动渲染页面(无需DOM操作) */</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">            data</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">                message</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'Hello Vue!\'</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">})</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/script&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"tag\">&lt;/body&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"tag\">&lt;/html&gt;</span></code></li></ol></pre>\n<h2 id=\"h2-1-5-vue-\"><a name=\"1.5-Vue的插值表达式介绍\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.5-Vue的插值表达式介绍</h2><ul>\n<li>插值表达式(模板语法)官网文档传送门：<a href=\"https://cn.vuejs.org/v2/guide/syntax.html\">https://cn.vuejs.org/v2/guide/syntax.html</a><ul>\n<li><code>插值表达式</code> 有点<code>类似于</code>以前学习的 <code>art-template</code>模板语法，但是不同的框架有自己不同的语法规则</li></ul>\n</li><li>1.Vue会自动将data对象中的数据渲染到视图</li><li>2.在视图中,使用插值表达式来告诉vue，你想把数据渲染在什么位置</li><li>3.关于插值表达式一些<code>注意点</code><ul>\n<li>(1)  <code>{{ }}</code> : 插值表达式，也叫胡子语法</li><li>(2)  插值表达式作用：将数据渲染到页面</li><li>(3)  支持二元运算   {{ age + 1 }}</li><li>(4)  支持三元运算   {{ age&gt;30?’老男人’:’小鲜肉’ }}</li><li>(5)  支持数组与对象的取值语法</li><li>(6)  不支持分支语法与循环语法</li></ul>\n</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"dec\">&lt;!DOCTYPE html&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"tag\">&lt;html</span><span class=\"pln\"> </span><span class=\"atn\">lang</span><span class=\"pun\">=</span><span class=\"atv\">\"en\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"tag\">&lt;head&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">charset</span><span class=\"pun\">=</span><span class=\"atv\">\"UTF-8\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"viewport\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"width=device-width, initial-scale=1.0\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">http-equiv</span><span class=\"pun\">=</span><span class=\"atv\">\"X-UA-Compatible\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"ie=edge\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;title&gt;</span><span class=\"pln\">Document</span><span class=\"tag\">&lt;/title&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 1.导包 --&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;script</span><span class=\"pln\"> </span><span class=\"atn\">src</span><span class=\"pun\">=</span><span class=\"atv\">\"./vue.js\"</span><span class=\"tag\">&gt;&lt;/script&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;/head&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"tag\">&lt;body&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 2.HTML结构 --&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"app\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">        名字： {{ name }}   </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">        年龄： {{ age + 1 }} </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">        介绍： {{ age&gt;30?\'老男人\':\'小鲜肉\' }}  </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">        女朋友：{{ girlFried[1] }} </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">        女儿： {{ daughter.name }} </span><span class=\"tag\">&lt;br&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;script&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"com\">/* 3.初始化配置 */</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"com\">/* </span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"com\">        (1)Vue是导入vue.js之后得到的一个全局构造函数</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"com\">        (2)调用Vue构造函数 创建一个vue实例对象</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"com\">        */</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"kwd\">var</span><span class=\"pln\"> app </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Vue</span><span class=\"pun\">({</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">//el: element 用来设置vue实例的挂载点（将数据渲染到哪个元素身上）</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* </span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"com\">            (1)挂载点可以使用  id选择器（vue推荐使用）  类选择器  标签选择器</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"com\">            (2)如果选择器选中了多个元素，只会选择第一个元素</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"com\">            (3)挂载点不能设置为html和body标签 （程序报错）</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"com\">            */</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            el</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'#app\'</span><span class=\"pun\">,</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">//data: 要渲染的数据 </span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 数据驱动：vue会根据data中的数据，自动渲染页面(无需DOM操作)</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"com\">            (1)  {{ }} : 插值表达式，也叫胡子语法</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"com\">            (2)  插值表达式作用：将数据渲染到页面</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"com\">            (3)  支持二元运算   {{ age + 1 }}</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"com\">            (4)  支持三元运算   {{ age&gt;30?\'老男人\':\'小鲜肉\' }}</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"com\">            (5)  支持数组与对象的取值语法</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"com\">            (6)  不支持分支语法与循环语法</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"com\">            */</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            data</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">                message</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'Hello Vue!\'</span><span class=\"pun\">,</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">                name</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'坤哥\'</span><span class=\"pun\">,</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">                age</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">32</span><span class=\"pun\">,</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">                sex</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\'男\'</span><span class=\"pun\">,</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">                girlFried</span><span class=\"pun\">:[</span><span class=\"str\">\'代码\'</span><span class=\"pun\">,</span><span class=\"str\">\'学生\'</span><span class=\"pun\">,</span><span class=\"str\">\'咖啡\'</span><span class=\"pun\">],</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">                daughter</span><span class=\"pun\">:{</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">                    name</span><span class=\"pun\">:</span><span class=\"str\">\'小布丁\'</span><span class=\"pun\">,</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">                    age</span><span class=\"pun\">:</span><span class=\"lit\">1</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">                </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"pun\">}</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">})</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/script&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"tag\">&lt;/body&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;/html&gt;</span></code></li></ol></pre>\n',0,0,'2021-06-18 12:45:27','/img/articlePic/img7.jpg',2,'==01-Vue入门==\n==学习Vue最好的方式：查看官网文档==\nhttps://cn.vuejs.org/\n\n1.1-Vue介绍\n\n\nVue介绍\n描述\n\n\n\n\n1.Vue是一个JavaScript框架\n框架：别人写好的js文件\n\n\n2.作用 ： 构建用户页面\n将数据渲染到页面\n\n\n3.特点：渐进式\n组件式开发\n\n\n\n\n1.Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架\nVue是一个JavaScript框架\nVue是一个用于构建用户页面的框架\nVue是一个用于构建用户界面得渐进式框架\n\n\n2.渐进式框架介绍\na. Vue.js提供了很多的功能，但是这些功能并不是集成在一起的，而是分开的\n类似于Nodejs,拆分成很多个小模块\nb. 在项目中我们用到什么，就导入什么\n这样可以保证我们用到的最少\nc. 说人话：Vue相当于是一个五星级自助餐，我们想要用什么就拿什么，这样可以最大限度避免浪费资源\n\n\n==3.总结==\n(1)Vue是什么？\n一个JavaScript框架\n(2)Vue干什么用的?\n作用是构建用户界面\n(3)有什么特点？\n特点是：渐进式\n\n\n1.2-Vue特点1-数据驱动\n1.数据驱动 ：Vue会根据数据，自动渲染页面\n无需DOM操作，修改了对象中的数据，页面会自动渲染Vue的底层使用了一种叫做虚拟DOM的技术，能够实时监听js对象的属性变化从而自动更新页面DOM元素\n关于虚拟DOM了解传送门(难度极大，可以留着以后进阶学习)\nhttps://www.jianshu.com/p/ce2cdd4b1f04https://www.jianshu.com/p/d1afa813d566\n\n\n\n\n\n\n原始的前端开发\nVue.js的前端开发\n\n\n\n\n1.使用HTML+CSS搭建页面\n1.使用HTML+CSS搭建页面\n\n\n2.使用异步请求技术向后台请求数据\n2.使用异步请求技术向后台请求数据\n\n\n3.使用原生的js或者jQuery操作DOM，渲染数据\n3.Vue自动渲染数据\n\n\n\n2-组件化开发\n2.组件化开发 ： 网页中的某一个部分,可能需要在多个地方被重复使用，就可以定义成一个组件\n组件化开发好处 \na. 一次定义，多处使用b. 便于开发维护\n类似于我们之前的函数封装解决代码冗余问题。Vue.js可以把网页的某一个部分(HTML+CSS+JS)封装成一个组件\n\n\n\n1.3-Vue基本使用\n官方文档传送门：Vue官方文档第三方框架通用的使用步骤\n1.导包2.写HTML结构3.js中初始化配置\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;!-- 1.导包 --&gt;\n    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!-- 2.HTML结构 --&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        {{ message }}\n        &lt;br&gt;\n        {{ name }}\n        &lt;br&gt;\n        {{ age }}\n        &lt;br&gt;\n        {{ sex }}\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        /* 3.初始化配置 */\n        /* \n        (1)Vue是导入vue.js之后得到的一个全局构造函数\n        (2)调用Vue构造函数 创建一个vue实例对象\n        */\n        var app = new Vue({\n            //el: element 用来设置vue实例的挂载点（将数据渲染到哪个元素身上）\n            el: &#39;#app&#39;,\n            //data: 要渲染的数据\n            /* 数据驱动：vue会根据data中的数据，自动渲染页面(无需DOM操作) */\n            data: {\n                message: &#39;Hello Vue!&#39;,\n                name:&#39;坤哥&#39;,\n                age:32,\n                sex:&#39;男&#39;\n            }\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n1.4-Vue的挂载点介绍\nel挂载点官方文档传送门：https://cn.vuejs.org/v2/api/#el\n1.挂载点el作用 ： 告诉vue实例，你要将data中的数据渲染到哪一个试图\n2.注意点\n\n(1)挂载点可以使用  id选择器（vue推荐使用）  类选择器  标签选择器\n开发中基本上都是id选择器，保证HTML标签唯一性如果你希望data中的数据能够对多个元素生效，可以将vue实例挂载到父元素中\n(2)如果选择器选中了多个元素，只会选择第一个元素(3)挂载点不能设置为html和body标签 （程序报错）\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;!-- 1.导包 --&gt;\n    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!-- 2.HTML结构 --&gt;\n    &lt;div id=&quot;hm&quot;&gt;\n        &lt;div id=&quot;app&quot;&gt;\n            {{ message }}\n        &lt;/div&gt;\n\n        &lt;hr&gt;\n        &lt;div id=&quot;box&quot; class=&quot;container&quot;&gt;\n            {{ message }}\n        &lt;/div&gt;\n\n        &lt;hr&gt;\n        &lt;div class=&quot;container&quot;&gt;\n            {{ message }}\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        /* 3.初始化配置 */\n        /* \n        (1)Vue是导入vue.js之后得到的一个全局构造函数\n        (2)调用Vue构造函数 创建一个vue实例对象\n        */\n        var app = new Vue({\n            //el: element 用来设置vue实例的挂载点（将数据渲染到哪个元素身上）\n            /* \n            (1)挂载点可以使用  id选择器（vue推荐使用）  类选择器  标签选择器\n            (2)如果选择器选中了多个元素，只会选择第一个元素\n            (3)挂载点不能设置为html和body标签 （程序报错）\n            */\n            el: &#39;#hm&#39;,\n            //data: 要渲染的数据\n            /* 数据驱动：vue会根据data中的数据，自动渲染页面(无需DOM操作) */\n            data: {\n                message: &#39;Hello Vue!&#39;\n            }\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n1.5-Vue的插值表达式介绍\n插值表达式(模板语法)官网文档传送门：https://cn.vuejs.org/v2/guide/syntax.html\n插值表达式 有点类似于以前学习的 art-template模板语法，但是不同的框架有自己不同的语法规则\n1.Vue会自动将data对象中的数据渲染到视图2.在视图中,使用插值表达式来告诉vue，你想把数据渲染在什么位置3.关于插值表达式一些注意点\n(1)  {{ }} : 插值表达式，也叫胡子语法(2)  插值表达式作用：将数据渲染到页面(3)  支持二元运算   {{ age + 1 }}(4)  支持三元运算   {{ age&gt;30?’老男人’:’小鲜肉’ }}(5)  支持数组与对象的取值语法(6)  不支持分支语法与循环语法\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n    &lt;!-- 1.导包 --&gt;\n    &lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!-- 2.HTML结构 --&gt;\n    &lt;div id=&quot;app&quot;&gt;\n        名字： {{ name }}   &lt;br&gt;\n        年龄： {{ age + 1 }} &lt;br&gt;\n        介绍： {{ age&gt;30?&#39;老男人&#39;:&#39;小鲜肉&#39; }}  &lt;br&gt;\n        女朋友：{{ girlFried[1] }} &lt;br&gt;\n        女儿： {{ daughter.name }} &lt;br&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        /* 3.初始化配置 */\n        /* \n        (1)Vue是导入vue.js之后得到的一个全局构造函数\n        (2)调用Vue构造函数 创建一个vue实例对象\n        */\n        var app = new Vue({\n            //el: element 用来设置vue实例的挂载点（将数据渲染到哪个元素身上）\n            /* \n            (1)挂载点可以使用  id选择器（vue推荐使用）  类选择器  标签选择器\n            (2)如果选择器选中了多个元素，只会选择第一个元素\n            (3)挂载点不能设置为html和body标签 （程序报错）\n            */\n            el: &#39;#app&#39;,\n            //data: 要渲染的数据 \n            /* 数据驱动：vue会根据data中的数据，自动渲染页面(无需DOM操作)\n            (1)  {{ }} : 插值表达式，也叫胡子语法\n            (2)  插值表达式作用：将数据渲染到页面\n            (3)  支持二元运算   {{ age + 1 }}\n            (4)  支持三元运算   {{ age&gt;30?&#39;老男人&#39;:&#39;小鲜肉&#39; }}\n            (5)  支持数组与对象的取值语法\n            (6)  不支持分支语法与循环语法\n            */\n            data: {\n                message: &#39;Hello Vue!&#39;,\n                name: &#39;坤哥&#39;,\n                age: 32,\n                sex: &#39;男&#39;,\n                girlFried:[&#39;代码&#39;,&#39;学生&#39;,&#39;咖啡&#39;],\n                daughter:{\n                    name:&#39;小布丁&#39;,\n                    age:1\n                }\n            }\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n'),(13,3,'css笔记（1）','<h1 id=\"h1-emmet-\"><a name=\"Emmet语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Emmet语法</h1><h2 id=\"h2--html-\"><a name=\"快速生成HTML结构语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>快速生成HTML结构语法</h2><p><img src=\"https://img-blog.csdnimg.cn/20210125105313655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMjQ2OTE2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;body&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 输入div*3即可获得 --&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;&lt;/div&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;&lt;/div&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;&lt;/div&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 父子关系：输入ul&gt;li即可获得 --&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;ul&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;li&gt;&lt;/li&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/ul&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 兄弟关系：输入div+p即可获得 --&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;&lt;/div&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;p&gt;&lt;/p&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 输入.nav即可获得 --&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"nav\"</span><span class=\"tag\">&gt;&lt;/div&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 输入#ban即可获得 --&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"ban\"</span><span class=\"tag\">&gt;&lt;/div&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 输入p.one即可获得 --&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;p</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"one\"</span><span class=\"tag\">&gt;&lt;/p&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 输入ul&gt;li#two即可获得 --&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;ul&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"tag\">&lt;li</span><span class=\"pln\"> </span><span class=\"atn\">id</span><span class=\"pun\">=</span><span class=\"atv\">\"two\"</span><span class=\"tag\">&gt;&lt;/li&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/ul&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 输入.demo$*5即可获得 --&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"demo1\"</span><span class=\"tag\">&gt;&lt;/div&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"demo2\"</span><span class=\"tag\">&gt;&lt;/div&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"demo3\"</span><span class=\"tag\">&gt;&lt;/div&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"demo4\"</span><span class=\"tag\">&gt;&lt;/div&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"demo5\"</span><span class=\"tag\">&gt;&lt;/div&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- 输入div{hhhhhh}*3即可获得 --&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">hhhhhh</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">hhhhhh</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">hhhhhh</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"com\">&lt;!-- div{$}*5 --&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">1</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">2</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">3</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">4</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div&gt;</span><span class=\"pln\">5</span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"tag\">&lt;/body&gt;</span></code></li></ol></pre>\n<hr>\n<h2 id=\"h2--css-\"><a name=\"快速生成CSS结构语法\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>快速生成CSS结构语法</h2><p>这个，大概就是 输入缩写。难以语言表达。看完视频只能说tql，txl。需要复习时直接回顾一下这个视频吧。<br><a href=\"https://www.bilibili.com/video/BV14J4114768?p=95\">快速生成css</a></p>\n<hr>\n<h1 id=\"h1-css-\"><a name=\"CSS元素显示模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>CSS元素显示模式</h1><p>作用:网页的标签非常多,在不同地方会用到不同类型的标签，了解他们的特点<strong>可以更好的布局我们的网页</strong><br>元素显示模式就是<strong>元素(标签)以什么方式进行显示</strong>,比如<code>&lt;div&gt;</code>自己占-行,比如一行可以多个<code>&lt;span&gt;.</code><br>HTML元素-般分为==块元素==和==行内元素==两种类型。</p>\n<h2 id=\"h2-u5757u5143u7D20\"><a name=\"块元素\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>块元素</h2><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;</code>、<code>&lt;p&gt;、 &lt;div&gt;、 &lt;ul&gt;、 &lt;o|&gt;、 &lt;li&gt;</code>等 ,其中<code>&lt;div&gt;</code>标签是最典型的块元素。<br>块级元素的特点:<br>① 比较霸道,自己独占一行。<br>② 高度，宽度、外边距以及内边距都可以控制。<br>③ 宽度默认是容器(父级宽度)的100%。<br>④ 是一个容器及盒子,里面可以放行内或者块级元素。</p>\n<p><strong>注意:</strong><br>●文字类的元素内不能使用块级元素<br>●<code>&lt;p&gt;</code>标签主要用于存放文字,因此<code>&lt;p&gt;</code>里面不能放块级元素,特别是不能放<code>&lt;div&gt;</code><br>●同理，<code>&lt;h1&gt;~ &lt;h6</code>&gt;等都是文字类块级标签,里面也不能放其他块级元素</p>\n<hr>\n<h2 id=\"h2-u884Cu5185u5143u7D20\"><a name=\"行内元素\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>行内元素</h2><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、 &lt;b&gt;、 &lt;em&gt;、 &lt;i&gt;、 &lt;del&gt;、 &lt;s&gt;. &lt;ins&gt;、 &lt;u&gt;、 &lt;span&gt;</code>等,其中<br><code>&lt;span&gt;</code>标签是最典型的行内元素。有的地方也将行内元素称为<strong>内联元素</strong>。<br>行内元素的特点:<br>①相邻行内元素在一行上, 一行可以显示多个。<br>②高、宽直接设置是无效的。<br>③默认宽度就是它本身内容的宽度。<br>④行内元素只能容纳文本或其他行内元素。</p>\n<p>==注意==<br>1.链接内不能再放链接<br>2.特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素,但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</p>\n<hr>\n<h2 id=\"h2-u884Cu5185u5757u5143u7D20\"><a name=\"行内块元素\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>行内块元素</h2><p>在行内元素中有几个特殊的标签一一<code>&lt;img/&gt;、 &lt;input/&gt;、 &lt;td&gt; ,</code>它们同时具有块元素和行内元素的特点。<br>有些资料称它们为行内块元素。<br>行内块元素的特点:<br>①和相邻行内元素(行内块)在一行上,但是他们之间会有空白缝隙。一行可以显示多个 (行内元素特点)。<br>②默认宽度就是它本身内容的宽度(行内元素特点)。<br>③高度,行高、外边距以及内边距都可以控制(块级元素特点)。</p>\n<hr>\n<h2 id=\"h2-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h2><p><img src=\"https://img-blog.csdnimg.cn/20210125160042928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMjQ2OTE2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"h2-u5143u7D20u663Eu793Au6A21u5F0Fu8F6Cu6362\"><a name=\"元素显示模式转换\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>元素显示模式转换</h2><p>特殊情况下,我们需要元素模式的转换,简单理解: -个模式的元素需要另外-种模式的特性<br>比如想要增加链接<code>&lt;a&gt;</code>的触发范围。<br><strong>● 转换为块元素: display:block;</strong><br>● 转换为行内元素: display:inline;<br><strong>● 转换为行内块: display: inline- block;</strong></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;title&gt;</span><span class=\"pln\">元素显示模式转换</span><span class=\"tag\">&lt;/title&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;style&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">        a </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">            width</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">150px</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">            height</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">50px</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            background</span><span class=\"pun\">-</span><span class=\"pln\">color</span><span class=\"pun\">:</span><span class=\"pln\"> pink</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 把行内元素 a 转换为 块级元素 */</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">            display</span><span class=\"pun\">:</span><span class=\"pln\"> block</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L9\"><code class=\"lang-html\"></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">        div </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">            width</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">300px</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">            height</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">100px</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">            background</span><span class=\"pun\">-</span><span class=\"pln\">color</span><span class=\"pun\">:</span><span class=\"pln\">cornflowerblue</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 把 div 块级元素转换为行内元素 */</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            display</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">inline</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L7\"><code class=\"lang-html\"></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">        span </span><span class=\"pun\">{</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">            width</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">300px</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">            height</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">30px</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">            background</span><span class=\"pun\">-</span><span class=\"pln\">color</span><span class=\"pun\">:</span><span class=\"pln\"> skyblue</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 行内块元素 */</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">            display</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"kwd\">inline</span><span class=\"pun\">-</span><span class=\"pln\">block</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/style&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"tag\">&lt;/head&gt;</span></code></li></ol></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20210125160838487.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMjQ2OTE2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<p>小米侧边栏练习</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"dec\">&lt;!DOCTYPE html&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"tag\">&lt;html</span><span class=\"pln\"> </span><span class=\"atn\">lang</span><span class=\"pun\">=</span><span class=\"atv\">\"en\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"tag\">&lt;head&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">charset</span><span class=\"pun\">=</span><span class=\"atv\">\"UTF-8\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"viewport\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"width=device-width, initial-scale=1.0\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;title&gt;</span><span class=\"pln\">小米侧边栏</span><span class=\"tag\">&lt;/title&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;style&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">        a </span><span class=\"pun\">{</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 行变块 */</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">            display</span><span class=\"pun\">:</span><span class=\"pln\"> block</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">            width</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">230px</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">            height</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">40px</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">            background</span><span class=\"pun\">-</span><span class=\"pln\">color</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"com\">#55585a;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">            font</span><span class=\"pun\">-</span><span class=\"pln\">size</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">14px</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">            color</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"com\">#ffffff;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 去除下划线 */</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">            text</span><span class=\"pun\">-</span><span class=\"pln\">decoration</span><span class=\"pun\">:</span><span class=\"pln\"> none</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">            text</span><span class=\"pun\">-</span><span class=\"pln\">indent</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">2em</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* 单行文字垂直居中 */</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">            line</span><span class=\"pun\">-</span><span class=\"pln\">height</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">40px</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">        a</span><span class=\"pun\">:</span><span class=\"pln\">hover </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">            background</span><span class=\"pun\">-</span><span class=\"pln\">color</span><span class=\"pun\">:#</span><span class=\"pln\">ff6700</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/style&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"tag\">&lt;/head&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"tag\">&lt;body&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/p/1915.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">手机 电话卡</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/a/h/9819.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">电视 盒子</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/a/h/7529.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">笔记本 显示器</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/p/9285.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">家电 插线板</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/p/9289.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">出行 穿戴</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/a/h/8363.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">智能 路由器</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/p/9290.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">电源 配件</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/p/9291.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">健康 儿童</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/p/9292.html\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">耳机 音箱</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;a</span><span class=\"pln\"> </span><span class=\"atn\">href</span><span class=\"pun\">=</span><span class=\"atv\">\"https://www.mi.com/buy/detail?product_id=11674\"</span><span class=\"pln\"> </span><span class=\"atn\">target</span><span class=\"pun\">=</span><span class=\"atv\">\"_blank\"</span><span class=\"tag\">&gt;</span><span class=\"pln\">生活 箱包</span><span class=\"tag\">&lt;/a&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"tag\">&lt;/body&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"tag\">&lt;/html&gt;</span></code></li></ol></pre>\n<hr>\n',0,0,'2021-06-18 12:47:24','/img/articlePic/img0.jpg',2,'Emmet语法快速生成HTML结构语法\n&lt;body&gt;\n    &lt;!-- 输入div*3即可获得 --&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;!-- 父子关系：输入ul&gt;li即可获得 --&gt;\n    &lt;ul&gt;\n        &lt;li&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;!-- 兄弟关系：输入div+p即可获得 --&gt;\n    &lt;div&gt;&lt;/div&gt;\n    &lt;p&gt;&lt;/p&gt;\n    &lt;!-- 输入.nav即可获得 --&gt;\n    &lt;div class=&quot;nav&quot;&gt;&lt;/div&gt;\n    &lt;!-- 输入#ban即可获得 --&gt;\n    &lt;div id=&quot;ban&quot;&gt;&lt;/div&gt;\n    &lt;!-- 输入p.one即可获得 --&gt;\n    &lt;p class=&quot;one&quot;&gt;&lt;/p&gt;\n    &lt;!-- 输入ul&gt;li#two即可获得 --&gt;\n    &lt;ul&gt;\n        &lt;li id=&quot;two&quot;&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;!-- 输入.demo$*5即可获得 --&gt;\n    &lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;demo4&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;demo5&quot;&gt;&lt;/div&gt;\n    &lt;!-- 输入div{hhhhhh}*3即可获得 --&gt;\n    &lt;div&gt;hhhhhh&lt;/div&gt;\n    &lt;div&gt;hhhhhh&lt;/div&gt;\n    &lt;div&gt;hhhhhh&lt;/div&gt;\n    &lt;!-- div{$}*5 --&gt;\n    &lt;div&gt;1&lt;/div&gt;\n    &lt;div&gt;2&lt;/div&gt;\n    &lt;div&gt;3&lt;/div&gt;\n    &lt;div&gt;4&lt;/div&gt;\n    &lt;div&gt;5&lt;/div&gt;\n&lt;/body&gt;\n\n\n快速生成CSS结构语法这个，大概就是 输入缩写。难以语言表达。看完视频只能说tql，txl。需要复习时直接回顾一下这个视频吧。快速生成css\n\nCSS元素显示模式作用:网页的标签非常多,在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页元素显示模式就是元素(标签)以什么方式进行显示,比如&lt;div&gt;自己占-行,比如一行可以多个&lt;span&gt;.HTML元素-般分为==块元素==和==行内元素==两种类型。\n块元素常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、 &lt;div&gt;、 &lt;ul&gt;、 &lt;o|&gt;、 &lt;li&gt;等 ,其中&lt;div&gt;标签是最典型的块元素。块级元素的特点:① 比较霸道,自己独占一行。② 高度，宽度、外边距以及内边距都可以控制。③ 宽度默认是容器(父级宽度)的100%。④ 是一个容器及盒子,里面可以放行内或者块级元素。\n注意:●文字类的元素内不能使用块级元素●&lt;p&gt;标签主要用于存放文字,因此&lt;p&gt;里面不能放块级元素,特别是不能放&lt;div&gt;●同理，&lt;h1&gt;~ &lt;h6&gt;等都是文字类块级标签,里面也不能放其他块级元素\n\n行内元素常见的行内元素有&lt;a&gt;、&lt;strong&gt;、 &lt;b&gt;、 &lt;em&gt;、 &lt;i&gt;、 &lt;del&gt;、 &lt;s&gt;. &lt;ins&gt;、 &lt;u&gt;、 &lt;span&gt;等,其中&lt;span&gt;标签是最典型的行内元素。有的地方也将行内元素称为内联元素。行内元素的特点:①相邻行内元素在一行上, 一行可以显示多个。②高、宽直接设置是无效的。③默认宽度就是它本身内容的宽度。④行内元素只能容纳文本或其他行内元素。\n==注意==1.链接内不能再放链接2.特殊情况链接&lt;a&gt;里面可以放块级元素,但是给&lt;a&gt;转换一下块级模式最安全\n\n行内块元素在行内元素中有几个特殊的标签一一&lt;img/&gt;、 &lt;input/&gt;、 &lt;td&gt; ,它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。行内块元素的特点:①和相邻行内元素(行内块)在一行上,但是他们之间会有空白缝隙。一行可以显示多个 (行内元素特点)。②默认宽度就是它本身内容的宽度(行内元素特点)。③高度,行高、外边距以及内边距都可以控制(块级元素特点)。\n\n总结\n\n元素显示模式转换特殊情况下,我们需要元素模式的转换,简单理解: -个模式的元素需要另外-种模式的特性比如想要增加链接&lt;a&gt;的触发范围。● 转换为块元素: display:block;● 转换为行内元素: display:inline;● 转换为行内块: display: inline- block;\n    &lt;title&gt;元素显示模式转换&lt;/title&gt;\n    &lt;style&gt;\n        a {\n            width: 150px;\n            height: 50px;\n            background-color: pink;\n            /* 把行内元素 a 转换为 块级元素 */\n            display: block;\n        }\n\n        div {\n            width: 300px;\n            height: 100px;\n            background-color:cornflowerblue;\n            /* 把 div 块级元素转换为行内元素 */\n            display: inline;\n        }\n\n        span {\n            width: 300px;\n            height: 30px;\n            background-color: skyblue;\n            /* 行内块元素 */\n            display: inline-block;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n\n\n小米侧边栏练习\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;小米侧边栏&lt;/title&gt;\n    &lt;style&gt;\n        a {\n            /* 行变块 */\n            display: block;\n            width: 230px;\n            height: 40px;\n            background-color: #55585a;\n            font-size: 14px;\n            color: #ffffff;\n            /* 去除下划线 */\n            text-decoration: none;\n            text-indent: 2em;\n            /* 单行文字垂直居中 */\n            line-height: 40px;\n        }\n        a:hover {\n            background-color:#ff6700;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;a href=&quot;https://www.mi.com/p/1915.html&quot; target=&quot;_blank&quot;&gt;手机 电话卡&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/a/h/9819.html&quot; target=&quot;_blank&quot;&gt;电视 盒子&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/a/h/7529.html&quot; target=&quot;_blank&quot;&gt;笔记本 显示器&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/p/9285.html&quot; target=&quot;_blank&quot;&gt;家电 插线板&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/p/9289.html&quot; target=&quot;_blank&quot;&gt;出行 穿戴&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/a/h/8363.html&quot; target=&quot;_blank&quot;&gt;智能 路由器&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/p/9290.html&quot; target=&quot;_blank&quot;&gt;电源 配件&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/p/9291.html&quot; target=&quot;_blank&quot;&gt;健康 儿童&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/p/9292.html&quot; target=&quot;_blank&quot;&gt;耳机 音箱&lt;/a&gt;\n    &lt;a href=&quot;https://www.mi.com/buy/detail?product_id=11674&quot; target=&quot;_blank&quot;&gt;生活 箱包&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n'),(14,3,'css盒子','<h1 id=\"h1-u76D2u5B50\"><a name=\"盒子\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>盒子</h1><p>所谓子模型:就是把HTML页面中的布局元素看作是一个矩形的耔,也就是一个盛装内容的容器。<br>CSS盒子模型本质上是一个子,封装周围的HTML元素,它包括:边框、外边距、内边距、和实际内容<br><img src=\"https://img-blog.csdnimg.cn/20210126170027603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMjQ2OTE2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h2 id=\"h2-border\"><a name=\"border\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>border</h2><p><img src=\"https://img-blog.csdnimg.cn/20210126170129425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMjQ2OTE2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<hr>\n<h3 id=\"h3-border-style\"><a name=\"border-style\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>border-style</h3>',0,0,'2021-06-18 13:15:17','/img/articlePic/img7.jpg',2,'盒子所谓子模型:就是把HTML页面中的布局元素看作是一个矩形的耔,也就是一个盛装内容的容器。CSS盒子模型本质上是一个子,封装周围的HTML元素,它包括:边框、外边距、内边距、和实际内容\n\nborder\n\nborder-style'),(15,3,'css元素的显示与隐藏','<h1 id=\"h1-u5143u7D20u7684u663Eu793Au4E0Eu9690u85CF\"><a name=\"元素的显示与隐藏\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>元素的显示与隐藏</h1><p>类似网站广告,当我们点击关闭就不见了,但是我们重新刷新页面,会重新出现!<br>本质:让一个元素在页面中隐藏或者显示出来。</p>\n<h2 id=\"h2-4-1-display-\"><a name=\"4.1 display属性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.1 display属性</h2><p>display属性用于设置一个元素应如何显示。<br>● display:none ; 隐藏对象<br>● display : block ; 除了转换为块级元素之外,同时还有显示元素的意思<br><strong>display隐藏元素后,不再占有原来的位置。</strong><br>后面应用及其广泛,搭配JS可以做很多的网页特效。</p>\n<h2 id=\"h2-4-2-visibility-\"><a name=\"4.2 visibility可见性\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.2 visibility可见性</h2><p>visibility属性用于指定一个元素应可见还是隐藏。<br>●visibility : visible;元素可视<br>●vibility : hidden;元素隐藏<br><strong>visibility隐藏元素后,继续占有原来的位置。</strong><br>如果隐藏元素想要原来位置，就用visibility : hidden<br>如果隐藏元素不想要原来位置，就用display : none (用处更多重点)</p>\n<h2 id=\"h2-4-3-overflow-\"><a name=\"4.3 overflow溢出\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4.3 overflow溢出</h2><p><img src=\"https://img-blog.csdnimg.cn/20210207210443675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUxMjQ2OTE2,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-html\"><span class=\"dec\">&lt;!DOCTYPE html&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"tag\">&lt;html</span><span class=\"pln\"> </span><span class=\"atn\">lang</span><span class=\"pun\">=</span><span class=\"atv\">\"en\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"tag\">&lt;head&gt;</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">charset</span><span class=\"pun\">=</span><span class=\"atv\">\"UTF-8\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">name</span><span class=\"pun\">=</span><span class=\"atv\">\"viewport\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"width=device-width, initial-scale=1.0\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;meta</span><span class=\"pln\"> </span><span class=\"atn\">http-equiv</span><span class=\"pun\">=</span><span class=\"atv\">\"X-UA-Compatible\"</span><span class=\"pln\"> </span><span class=\"atn\">content</span><span class=\"pun\">=</span><span class=\"atv\">\"ie=edge\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;title&gt;</span><span class=\"pln\">显示隐藏元素之overflow</span><span class=\"tag\">&lt;/title&gt;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;style&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">.</span><span class=\"pln\">peppa </span><span class=\"pun\">{</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* overflow: visible; */</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* overflow: hidden; */</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* scroll 溢出的部分显示滚动条  不溢出也显示滚动条 */</span></code></li><li class=\"L3\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* overflow: scroll; */</span></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* auto 溢出的时候才显示滚动条 不溢出不显示滚动条 */</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">            </span><span class=\"com\">/* overflow: auto; */</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">            width</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">200px</span><span class=\"pun\">;</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">            height</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">200px</span><span class=\"pun\">;</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">            border</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">3px</span><span class=\"pln\"> solid pink</span><span class=\"pun\">;</span></code></li><li class=\"L9\"><code class=\"lang-html\"><span class=\"pln\">            margin</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"lit\">100px</span><span class=\"pln\"> </span><span class=\"kwd\">auto</span><span class=\"pun\">;</span></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"pln\">        </span><span class=\"pun\">}</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/style&gt;</span></code></li><li class=\"L2\"><code class=\"lang-html\"><span class=\"tag\">&lt;/head&gt;</span></code></li><li class=\"L3\"><code class=\"lang-html\"></code></li><li class=\"L4\"><code class=\"lang-html\"><span class=\"tag\">&lt;body&gt;</span></code></li><li class=\"L5\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;div</span><span class=\"pln\"> </span><span class=\"atn\">class</span><span class=\"pun\">=</span><span class=\"atv\">\"peppa\"</span><span class=\"tag\">&gt;</span></code></li><li class=\"L6\"><code class=\"lang-html\"><span class=\"pln\">        《小猪佩奇》，又名《粉红猪小妹》（台湾名为粉红猪），英文名为《Peppa</span></code></li><li class=\"L7\"><code class=\"lang-html\"><span class=\"pln\">        Pig》，是由英国人阿斯特利（Astley）、贝克（Baker）、</span></code></li><li class=\"L8\"><code class=\"lang-html\"><span class=\"pln\">    </span><span class=\"tag\">&lt;/div&gt;</span></code></li><li class=\"L9\"><code class=\"lang-html\"></code></li><li class=\"L0\"><code class=\"lang-html\"><span class=\"tag\">&lt;/body&gt;</span></code></li><li class=\"L1\"><code class=\"lang-html\"><span class=\"tag\">&lt;/html&gt;</span></code></li></ol></pre>\n<ol>\n<li><p>display 显示隐藏元素但是不保留位置</p>\n</li><li><p>visibility 示隐藏元素但是保留原来的位置</p>\n</li><li>overflow 溢出显示隐藏但是只是对于溢出的部分处理</li></ol>\n',0,0,'2021-06-18 13:16:20','/img/articlePic/img1.jpg',2,'元素的显示与隐藏类似网站广告,当我们点击关闭就不见了,但是我们重新刷新页面,会重新出现!本质:让一个元素在页面中隐藏或者显示出来。\n4.1 display属性display属性用于设置一个元素应如何显示。● display:none ; 隐藏对象● display : block ; 除了转换为块级元素之外,同时还有显示元素的意思display隐藏元素后,不再占有原来的位置。后面应用及其广泛,搭配JS可以做很多的网页特效。\n4.2 visibility可见性visibility属性用于指定一个元素应可见还是隐藏。●visibility : visible;元素可视●vibility : hidden;元素隐藏visibility隐藏元素后,继续占有原来的位置。如果隐藏元素想要原来位置，就用visibility : hidden如果隐藏元素不想要原来位置，就用display : none (用处更多重点)\n4.3 overflow溢出\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;显示隐藏元素之overflow&lt;/title&gt;\n    &lt;style&gt;\n        .peppa {\n            /* overflow: visible; */\n            /* overflow: hidden; */\n            /* scroll 溢出的部分显示滚动条  不溢出也显示滚动条 */\n            /* overflow: scroll; */\n            /* auto 溢出的时候才显示滚动条 不溢出不显示滚动条 */\n            /* overflow: auto; */\n            width: 200px;\n            height: 200px;\n            border: 3px solid pink;\n            margin: 100px auto;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=&quot;peppa&quot;&gt;\n        《小猪佩奇》，又名《粉红猪小妹》（台湾名为粉红猪），英文名为《Peppa\n        Pig》，是由英国人阿斯特利（Astley）、贝克（Baker）、\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\ndisplay 显示隐藏元素但是不保留位置\nvisibility 示隐藏元素但是保留原来的位置\noverflow 溢出显示隐藏但是只是对于溢出的部分处理\n'),(16,3,'嵌入式学习笔记','<p>date</p>\n<h1 id=\"h1--\"><a name=\"显示日期的指令。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>显示日期的指令。</h1><p>cal</p>\n<h1 id=\"h1--\"><a name=\"显示日历的指令。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>显示日历的指令。</h1><p>bc</p>\n<h1 id=\"h1--qiut-bc-\"><a name=\"简单好用的计算器；输入qiut离开bc这个计算器。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>简单好用的计算器；输入qiut离开bc这个计算器。</h1><p>Tab按键</p>\n<p>功能：</p>\n<p>1、 命令补全。</p>\n<p>2、 档案补齐。</p>\n<p>*#Tab接在一串指令的第一个字的后面，则为命令补全。</p>\n<p>*#Tab接在一串指令的第二个字以后时，则为档案补齐。</p>\n<p>Ctrl + c按键</p>\n<h1 id=\"h1--\"><a name=\"让当前的程序停掉。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>让当前的程序停掉。</h1><p>Ctrl +ｄ按键</p>\n<h1 id=\"h1-ctrl-d-end-of-file-eof-or-end-of-input-\"><a name=\"Ctrl+d按键代表：键盘输入结束（End of File,EOF or End of Input）的意思！\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Ctrl+d按键代表：键盘输入结束（End of File,EOF or End of Input）的意思！</h1><h1 id=\"h1--exit-ctrl-d-\"><a name=\"另外，他也可以用来取代exit的输入！例如你想要离开文字接口，可以直接按下Ctrl+d就可以直接离开。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>另外，他也可以用来取代exit的输入！例如你想要离开文字接口，可以直接按下Ctrl+d就可以直接离开。</h1><p>man page</p>\n<h1 id=\"h1--\"><a name=\"查询指令的用法和相关参数的说明。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>查询指令的用法和相关参数的说明。</h1><h1 id=\"h1--\"><a name=\"指令后面跟的数字表示的内容：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>指令后面跟的数字表示的内容：</h1><h1 id=\"h1--1-5-8-\"><a name=\"其中1、5、8三个号码特别重要。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>其中1、5、8三个号码特别重要。</h1><h1 id=\"h1-man-page-\"><a name=\"man page的内容所包含的的部分：\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>man page的内容所包含的的部分：</h1><h1 id=\"h1--authors-copyright-\"><a name=\"还可能会看到Authors与Copyright等。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>还可能会看到Authors与Copyright等。</h1><p>info page</p>\n<h1 id=\"h1-info-man-man-page-info-page-node-\"><a name=\"info与man 的用途其实差不多，都是用来查询指令的用法或者是档案的格式。但是与man page 一口气输出一堆信息不同的是，info page 则是将文件数据拆成一个一个的段落，每个段落用自己的页面来撰写，并且在各个页面中还有类似网页的『超链接』来跳到各不同的页面中，每个独立的页面也被称为一个节点(node)。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>info与man 的用途其实差不多，都是用来查询指令的用法或者是档案的格式。但是与man page 一口气输出一堆信息不同的是，info page 则是将文件数据拆成一个一个的段落，每个段落用自己的页面来撰写，并且在各个页面中还有类似网页的『超链接』来跳到各不同的页面中，每个独立的页面也被称为一个节点(node)。</h1><p>1、File：代表这个info page的资料是来自info.info档案所提供的；</p>\n<p>2、Node：代表目前的这个页面是属于Top节点。 意思是info.info 内含有很多信息，而Top 仅是info.info 档案内的一个节点内容而已；</p>\n<p>3、Next：下一个节点的名称为GettingStarted，你也可以按『N』到下个节点去；</p>\n<p>4、Up：回到上一层的节点总揽画面，你也可以按下『U』回到上一层；</p>\n<p>5、Prev：前一个节点。但由于Top 是info.info 的第一个节点，所以上面没有前一个节点的信息。</p>\n<p>nano</p>\n<h1 id=\"h1--\"><a name=\"超简单文字编辑器。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>超简单文字编辑器。</h1><p>1、[ctrl]-G：取得联机帮助(help)，很有用的！</p>\n<p>2、[ctrl]-X：离开naon 软件，若有修改过档案会提示是否需要储存喔！</p>\n<p>3、[ctrl]-O：储存档案，若你有权限的话就能够储存档案了；</p>\n<p>4、[ctrl]-R：从其他档案读入资料，可以将某个档案的内容贴在本档案中；</p>\n<p>5、[ctrl]-W：搜寻字符串，这个也是很有帮助的指令喔！</p>\n<p>6、[ctrl]-C：说明目前光标所在处的行数与列数等信息；</p>\n<p>7、[ctrl]-_：可以直接输入行号，让光标快速移动到该行；</p>\n<p>8、[alt]-Y：校正语法功能开启或关闭(单击开、再单击关)</p>\n<p>9、[alt]-M：可以支持鼠标来移动光标的功能。</p>\n<p>正确的关机方式</p>\n<p>1、 who 查看有谁在线</p>\n<p>2、 netstat –a 查看网络的联机状态</p>\n<p>3、 ps –sux 查看背景执行的程序</p>\n<p>4、 sync 将数据同步写入硬盘中的指令</p>\n<p>5、 shutdown 关机指令</p>\n<p>6、 reboot, halt, poweroff 重新启动。</p>\n<p>切换执行等级：init</p>\n<h1 id=\"h1-linux-\"><a name=\"Linux共有七种执行等级。\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Linux共有七种执行等级。</h1><h1 id=\"h1-run-level-0-\"><a name=\"run level 0 : 关机\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>run level 0 : 关机</h1><h1 id=\"h1-run-level-3-\"><a name=\"run level 3 : 纯文本模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>run level 3 : 纯文本模式</h1><h1 id=\"h1-run-level-5-\"><a name=\"run level 5 : 含有图形接口模式\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>run level 5 : 含有图形接口模式</h1><h1 id=\"h1-run-level-6-\"><a name=\"run level 6 : 重新启动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>run level 6 : 重新启动</h1><p>linux 的档案权限与目录配置</p>\n<p>chgrp</p>\n<p>改变档案所属群组</p>\n<p>命令chgrpgroupname install.log</p>\n<p>chmod</p>\n<p>改变档案的权限</p>\n<p>1、 用chmod改变拥有者和群组，chmoduser.group file或者chmoduser:group file</p>\n<p>2、 chmod xyz 档案或目录</p>\n<p>3、 chmod (u/g/o/a) (+/-/=) (r/w/x)档案或目录</p>\n<p>mkdir</p>\n<p>mkdir [-mp] 目录名称</p>\n<p>-m : 配置文件的权限！直接设定，不需要看预设权限的脸色。</p>\n<p>-p : 帮助你直接将所需要的目录（包括上层目录）递归建立起来！</p>\n<p>rmdir</p>\n<p>rmdir [-p] 目录名称</p>\n<p>-p ：连同上层空的目录一起删除</p>\n<p>cp</p>\n<p>cp [-adfilprsu] 来源文件（source） 目标文件（destination）</p>\n<p>选项与参数：</p>\n<p>-a : 相当于–pdr 的意思，至于pdr 请参考下列说明；</p>\n<p>-d : 若来源文件为链接文件的属性（link file），则复制链接文件属性而非档案本身；</p>\n<p>-f : 为强制（force）的意思，若目标档案已经存在且无法开启，则移除后再尝试一次；</p>\n<p>-i : 若目标文件已经存在时，在覆盖时会先询问动作的进行</p>\n<p>-l : 进行硬式连接（hand link）的连接档建立，而非复制档案本身</p>\n<p>-p : 连同档案的属性一起复制过去，而非使用默认属性；</p>\n<p>-r : 递归持续复制，用于目录的复制行为</p>\n<p>-s : 复制成为符号链接文件（symbolic link），亦即【快捷方式】档案</p>\n<p>-u : 若destination比source旧才更新destination！</p>\n<p>rm</p>\n<p>移除档案或目录</p>\n<p>rm [-fir] 档案或目录</p>\n<p>-f : 就是force的意思，忽略不存在的档案，不会出现警告讯息；</p>\n<p>-i : 互动模式，在删除前会询问使用者是否动作</p>\n<p>-r : 递归删除啊！最常用在目录的删除了！</p>\n<p>mv</p>\n<p>移动档案与目录，或更名</p>\n<p>mv [-fiu] source destination</p>\n<p>-f : force强制的意思，如果目标档案已经存在，不会询问而直接覆盖</p>\n<p>-i : 若目标档案（destination）已经存在时，就会询问是否覆盖</p>\n<p>-u : 若目标档案已经存在，且source比较新，才会更新（update）</p>\n<p>touch</p>\n<p>建立一个空的档案</p>\n<p>将某个档案日期修订为目前</p>\n<p>touch [-acdmt] 档案</p>\n<p>-a : 仅修订access time</p>\n<p>-c : 仅修订档案的时间，若该档案不存在则不建立新档案</p>\n<p>-d : 后面可以接欲修订的日期而不用目前的日期，也可以使用–date=”日期或时间”</p>\n<p>-m : 仅修改mtime</p>\n<p>-t : 后面可以接欲修订的时间而不用目前的时间</p>\n<p>whereis</p>\n<p>寻找特定档案（在数据库档案里面搜寻，不搜寻硬盘）</p>\n<p>whereis [-bmsu] 档案或目录名</p>\n<p>-b : 只找binary格式的的档案</p>\n<p>-m : 只找在说明文件manual路径下的档案</p>\n<p>-s : 只找source来源档案</p>\n<p>-u : 搜寻不在上诉三个项目当中的其他档案</p>\n<p>locate</p>\n<p>locate [-ir] keyword</p>\n<p>-i : 忽略大小写的差异</p>\n<p>-r : 后面可接正规表示法的显示方式</p>\n<p>压缩文件</p>\n<p>*.Z         compress程序压缩的档案</p>\n<p>*.gz        gzip程序压缩的档案</p>\n<p>*.bz2      bzip2程序压缩的档案</p>\n<p>*.tar        tar程序打包的档案，并没有压缩</p>\n<p>*.tar.gz    tar程序打包的档案，并且经过gzip的压缩</p>\n<p>*.tar.bz2  tar程序打包的档案，其中并且经过bzip2的压缩</p>\n<p>tar</p>\n<p>1、 压缩：tar –jcv –f filename.tar.bz2 要被压缩的档案或目录名称</p>\n<p>2、 查询：tar –jtv –f filename.tar.bz2</p>\n<p>3、 解压缩：tar –jxv –f filename.tar.bz2 –C 要解压的目录</p>\n<p>dump</p>\n<p>dump 的功能颇强，他除了可以备份整个文件系统之外，还可以制定等级喔</p>\n<p>vim程序编辑器</p>\n<p>删除</p>\n<p>复制</p>\n<p>yy           复制游标所在的那一行；</p>\n<p>nyy         n为数字，复制光标所在的向下n行；</p>\n<p>粘贴</p>\n<p>复原与重复</p>\n<p>插入或取代</p>\n<p>储存与离开</p>\n<p>Vim环境的变更</p>\n<p>区块选择</p>\n<p>多档案编辑</p>\n<p>多窗口</p>\n<p>认识与学习BASH</p>\n<p>Linux使用的shell称为【BourneAgain SHell】，简称bash。</p>\n<p>命令编修能力（history）</p>\n<p>在指令列按上下键就可以找到前后一个输入的指令。这么多指令记录在家目录内的.bash_history里面。</p>\n<p>放在/root/.bash_history里面。</p>\n<p>命令与档案补齐功能（[tab]按键）</p>\n<p>命令别名设定功能（alias）</p>\n<p>例：alias lm=’ls-al’</p>\n<p>后面的lm=’ls-al’不能有空格，要连在一起。</p>\n<p>通配符（Wildcard）</p>\n<p>Bash shell的内建命令：type</p>\n<p>查看指令是来自与外部指令或是内建bash当中的。</p>\n<p>export</p>\n<p>自定义变量转成环境变量</p>\n<p>影响显示结果的语系变量（locale）</p>\n<p>declare / typeset</p>\n<p>宣告变量的类型</p>\n<h1 id=\"h1-declare-aixr-variable\"><a name=\"declare [-aixr] variable\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>declare [-aixr] variable</h1><p>-a :　将后面名为variable的变量定义成数组类型</p>\n<p>-i :   将后面名为variable的变量定义成整数数字类型</p>\n<p>-x : 用法与export一样，就是将后面的variable变成环境变量</p>\n<p>-r : 将变量设定为readonly类型，该变量不可被更改内容，也不能unset</p>\n<p>正规表示法与文件格式化处理</p>\n<p>grep</p>\n<p>用法：grep  [选项]…  模式 [文件]…</p>\n<p>在每个文件中查找样式或标准输入。</p>\n<p>PATTERN默认的是一个基本的正则表达式（BRE）。</p>\n<p>例： grep –I ‘hello’menu.h main.c</p>\n<p>正则表达式的选择和解释：</p>\n<p>  -E,—extended-regexp     PATTERN是一个扩展的正则表达式(ERE)</p>\n<p>  -F,—fixed-strings        PATTERN是一套新行分离修复字符串</p>\n<p>  -G,—basic-regexp        PATTERN是一个基本的正则表达式(BRE)</p>\n<p>  -P,—perl-regexp         PATTERN是一个Perl正则表达式</p>\n<p>  -e,—regexp=PATTERN      使用 PATTERN 来匹配</p>\n<p>  -f,—file=FILE           从 FILE 来获得 PATTERN</p>\n<p>  -i,—ignore-case         忽略大小写</p>\n<p>  -w,—word-regexp         强制 PATTERN 仅匹配整个词</p>\n<p>  -x,—line-regexp         强制 PATTERN 仅匹配整行</p>\n<p>  -z,—null-data           结尾为 0 字节而不是新行符的数据行</p>\n<p>杂项：</p>\n<p> -s,—no-messages 不显示错误信息</p>\n<p> -v,—invert-match 选择不匹配的行</p>\n<p> -V,—version 打印版本信息并退出</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">help </span><span class=\"pun\">显示本帮助并退出</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">mmap </span><span class=\"pun\">如果可能，使用内存映象作为输入</span></code></li></ol></pre><p>输出控制：</p>\n<p>  -m,—max-count=NUM       在有NUM个匹配后停止</p>\n<p>  -b,—byte-offset         在输出行的同时打印字节位移</p>\n<p>  -n,—line-number         在输出行的同时打印行数</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">line</span><span class=\"pun\">-</span><span class=\"pln\">buffered       flush outputon every line</span></code></li></ol></pre><p>  -H,—with-filename       print the filenamefor each match</p>\n<p>  -h,—no-filename         suppress theprefixing filename on output</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">label</span><span class=\"pun\">=</span><span class=\"pln\">LABEL         </span><span class=\"kwd\">print</span><span class=\"pln\"> </span><span class=\"typ\">LABELas</span><span class=\"pln\"> filename </span><span class=\"kwd\">for</span><span class=\"pln\"> standard input</span></code></li></ol></pre><p>  -o,—only-matching       show only the partof a line matching PATTERN</p>\n<p>  -q,—quiet, —silent     suppress all normaloutput</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">binary</span><span class=\"pun\">-</span><span class=\"pln\">files</span><span class=\"pun\">=</span><span class=\"pln\">TYPE   assume thatbinary files are TYPE</span><span class=\"pun\">;</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\">                        TYPE </span><span class=\"kwd\">is</span><span class=\"pln\"> </span><span class=\"str\">`binary\',`</span><span class=\"pln\">text</span><span class=\"str\">\', or `without-match\'</span></code></li></ol></pre><p>  -a,—text                等同于 —binary-files=text</p>\n<p> -I                        等同于 —binary-files=without-match</p>\n<p>  -d,—directories=ACTION  how to handledirectories;</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">                        ACTION </span><span class=\"kwd\">is</span><span class=\"pln\"> </span><span class=\"str\">`read\',`</span><span class=\"pln\">recurse</span><span class=\"str\">\', or `skip\'</span></code></li></ol></pre><p>  -D,—devices=ACTION      how to handledevices, FIFOs and sockets;</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">                        ACTION </span><span class=\"kwd\">is</span><span class=\"pln\"> </span><span class=\"str\">`read\' or`</span><span class=\"pln\">skip</span><span class=\"str\">\'</span></code></li></ol></pre><p>  -R,-r, —recursive       等同于 —directories=recurse</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">include</span><span class=\"pun\">=</span><span class=\"pln\">FILE_PATTERN  </span><span class=\"pun\">只搜索符合</span><span class=\"pln\">FILE_PATTERN</span><span class=\"pun\">型式的文件</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">exclude</span><span class=\"pun\">=</span><span class=\"pln\">FILE_PATTERN  </span><span class=\"pun\">跳过名字为</span><span class=\"pln\">FILE_PATTERN</span><span class=\"pun\">的文件或目录</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">exclude</span><span class=\"pun\">-</span><span class=\"kwd\">from</span><span class=\"pun\">=</span><span class=\"pln\">FILE   skip filesmatching any file pattern </span><span class=\"kwd\">from</span><span class=\"pln\"> FILE</span></code></li><li class=\"L5\"><code></code></li><li class=\"L6\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">exclude</span><span class=\"pun\">-</span><span class=\"pln\">dir</span><span class=\"pun\">=</span><span class=\"pln\">PATTERN directories that match PATTERN will be skipped</span><span class=\"pun\">.</span></code></li></ol></pre><p>  -L,—files-without-match print only names of FILEs containing no match</p>\n<p>  -l,—files-with-matches  print only names ofFILEs containing matches</p>\n<p>  -c,—count               print only a countof matching lines per FILE</p>\n<p>  -T,—initial-tab         make tabs line up(if needed)</p>\n<p>  -Z,—null                FILE名字后打印0字节</p>\n<p>上下文控制:</p>\n<p>  -B,—before-context=NUM  打印 NUM 行上文</p>\n<p>  -A,—after-context=NUM   打印 NUM 行下文</p>\n<p>  -C,—context=NUM         打印 NUM 行输出上下文</p>\n<p> -NUM                      与 —context=NUM相同</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">color</span><span class=\"pun\">[=</span><span class=\"pln\">WHEN</span><span class=\"pun\">],</span></code></li><li class=\"L1\"><code></code></li><li class=\"L2\"><code><span class=\"pln\"> </span><span class=\"pun\">--</span><span class=\"pln\">colour</span><span class=\"pun\">[=</span><span class=\"pln\">WHEN</span><span class=\"pun\">]</span><span class=\"pln\">       </span><span class=\"pun\">使用标记来高亮匹配的字符串；</span></code></li><li class=\"L3\"><code></code></li><li class=\"L4\"><code><span class=\"pln\">                        WHEN </span><span class=\"pun\">可取值为“</span><span class=\"pln\">always</span><span class=\"pun\">”，“</span><span class=\"pln\">never</span><span class=\"pun\">”或“</span><span class=\"kwd\">auto</span><span class=\"pun\">”</span></code></li></ol></pre><p>  -U,—binary             不去掉 EOL(MSDOS)处的 CR 字符</p>\n<p>  -u,—unix-byte-offsets   如果 CR 不在那里(MSDOS)，报告偏移值</p>\n<p>‘egrep’ 与 ‘grep -E’含义一致。‘fgrep’与 ‘grep -F’的含义一致。</p>\n<p>直接调用‘egrep’和‘fgrep’的方式已经被废弃了。</p>\n<p>没有 FILE或者 FILE 是 -，读取标准输入。如果少于两个 FILE，</p>\n<p>假设 -h。如果任意行被选中，退出状态为 0；</p>\n<p>如果出现任何错误并且 -q 未被给出，退出状态为 2。</p>\n<p>如果想查看没有某个字符的行，用反向选择[^]来实现。</p>\n<p>想要查看the开头的：</p>\n<h1 id=\"h1-grep-the-a-txt\"><a name=\"grep ‘^the’ a.txt\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>grep ‘^the’ a.txt</h1><p>符号’^’在[]内和外是不同的，在[]内表示反向选择，在[]外表示定位在行首的意思。</p>\n<p>搜寻空白行，</p>\n<h1 id=\"h1-grep-a-txt\"><a name=\"grep ‘^$’ a.txt\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>grep ‘^$’ a.txt</h1><p>(小数点). 代表一定有一个任意字符的意思</p>\n<p>（星星号）* 代表重复前一个0到无穷多次的意思，为组合形态</p>\n<p>限定连续字符范围{}</p>\n<p>Shell script</p>\n<p>1、 指令的执行是从上而下、从左而右的分析与执行</p>\n<p>2、 指令的下达：指令、选项与参数间的多个空白都会被忽略掉</p>\n<p>3、 空白行也会被忽略掉，并且[tab]按键所推开的空白同样视为空格键</p>\n<p>4、 如果读到一个ENTER符号（CR），就尝试开始执行该行命令</p>\n<p>5、 至于如果一行的内容太多，则可以使用【\\enter】来延伸至下一行</p>\n<p>6、 【#】可作为批注，任何加在#后面的资料将全部被视为批注文字而被忽略</p>\n<p>sh sh01.sh 和  ./sh01.sh 执行完以后，子程序内的各项变量将会结束而不会传回到父程序中</p>\n<p>source sh01.sh  执行完以后，子程序内的各项变量将会传回到父程序中。</p>\n',0,0,'2021-06-18 13:21:49','/img/articlePic/img1.jpg',3,'date\n显示日期的指令。cal\n显示日历的指令。bc\n简单好用的计算器；输入qiut离开bc这个计算器。Tab按键\n功能：\n1、 命令补全。\n2、 档案补齐。\n*#Tab接在一串指令的第一个字的后面，则为命令补全。\n*#Tab接在一串指令的第二个字以后时，则为档案补齐。\nCtrl + c按键\n让当前的程序停掉。Ctrl +ｄ按键\nCtrl+d按键代表：键盘输入结束（End of File,EOF or End of Input）的意思！另外，他也可以用来取代exit的输入！例如你想要离开文字接口，可以直接按下Ctrl+d就可以直接离开。man page\n查询指令的用法和相关参数的说明。指令后面跟的数字表示的内容：其中1、5、8三个号码特别重要。man page的内容所包含的的部分：还可能会看到Authors与Copyright等。info page\ninfo与man 的用途其实差不多，都是用来查询指令的用法或者是档案的格式。但是与man page 一口气输出一堆信息不同的是，info page 则是将文件数据拆成一个一个的段落，每个段落用自己的页面来撰写，并且在各个页面中还有类似网页的『超链接』来跳到各不同的页面中，每个独立的页面也被称为一个节点(node)。1、File：代表这个info page的资料是来自info.info档案所提供的；\n2、Node：代表目前的这个页面是属于Top节点。 意思是info.info 内含有很多信息，而Top 仅是info.info 档案内的一个节点内容而已；\n3、Next：下一个节点的名称为GettingStarted，你也可以按『N』到下个节点去；\n4、Up：回到上一层的节点总揽画面，你也可以按下『U』回到上一层；\n5、Prev：前一个节点。但由于Top 是info.info 的第一个节点，所以上面没有前一个节点的信息。\nnano\n超简单文字编辑器。1、[ctrl]-G：取得联机帮助(help)，很有用的！\n2、[ctrl]-X：离开naon 软件，若有修改过档案会提示是否需要储存喔！\n3、[ctrl]-O：储存档案，若你有权限的话就能够储存档案了；\n4、[ctrl]-R：从其他档案读入资料，可以将某个档案的内容贴在本档案中；\n5、[ctrl]-W：搜寻字符串，这个也是很有帮助的指令喔！\n6、[ctrl]-C：说明目前光标所在处的行数与列数等信息；\n7、[ctrl]-_：可以直接输入行号，让光标快速移动到该行；\n8、[alt]-Y：校正语法功能开启或关闭(单击开、再单击关)\n9、[alt]-M：可以支持鼠标来移动光标的功能。\n正确的关机方式\n1、 who 查看有谁在线\n2、 netstat –a 查看网络的联机状态\n3、 ps –sux 查看背景执行的程序\n4、 sync 将数据同步写入硬盘中的指令\n5、 shutdown 关机指令\n6、 reboot, halt, poweroff 重新启动。\n切换执行等级：init\nLinux共有七种执行等级。run level 0 : 关机run level 3 : 纯文本模式run level 5 : 含有图形接口模式run level 6 : 重新启动linux 的档案权限与目录配置\nchgrp\n改变档案所属群组\n命令chgrpgroupname install.log\nchmod\n改变档案的权限\n1、 用chmod改变拥有者和群组，chmoduser.group file或者chmoduser:group file\n2、 chmod xyz 档案或目录\n3、 chmod (u/g/o/a) (+/-/=) (r/w/x)档案或目录\nmkdir\nmkdir [-mp] 目录名称\n-m : 配置文件的权限！直接设定，不需要看预设权限的脸色。\n-p : 帮助你直接将所需要的目录（包括上层目录）递归建立起来！\nrmdir\nrmdir [-p] 目录名称\n-p ：连同上层空的目录一起删除\ncp\ncp [-adfilprsu] 来源文件（source） 目标文件（destination）\n选项与参数：\n-a : 相当于–pdr 的意思，至于pdr 请参考下列说明；\n-d : 若来源文件为链接文件的属性（link file），则复制链接文件属性而非档案本身；\n-f : 为强制（force）的意思，若目标档案已经存在且无法开启，则移除后再尝试一次；\n-i : 若目标文件已经存在时，在覆盖时会先询问动作的进行\n-l : 进行硬式连接（hand link）的连接档建立，而非复制档案本身\n-p : 连同档案的属性一起复制过去，而非使用默认属性；\n-r : 递归持续复制，用于目录的复制行为\n-s : 复制成为符号链接文件（symbolic link），亦即【快捷方式】档案\n-u : 若destination比source旧才更新destination！\nrm\n移除档案或目录\nrm [-fir] 档案或目录\n-f : 就是force的意思，忽略不存在的档案，不会出现警告讯息；\n-i : 互动模式，在删除前会询问使用者是否动作\n-r : 递归删除啊！最常用在目录的删除了！\nmv\n移动档案与目录，或更名\nmv [-fiu] source destination\n-f : force强制的意思，如果目标档案已经存在，不会询问而直接覆盖\n-i : 若目标档案（destination）已经存在时，就会询问是否覆盖\n-u : 若目标档案已经存在，且source比较新，才会更新（update）\ntouch\n建立一个空的档案\n将某个档案日期修订为目前\ntouch [-acdmt] 档案\n-a : 仅修订access time\n-c : 仅修订档案的时间，若该档案不存在则不建立新档案\n-d : 后面可以接欲修订的日期而不用目前的日期，也可以使用–date=”日期或时间”\n-m : 仅修改mtime\n-t : 后面可以接欲修订的时间而不用目前的时间\nwhereis\n寻找特定档案（在数据库档案里面搜寻，不搜寻硬盘）\nwhereis [-bmsu] 档案或目录名\n-b : 只找binary格式的的档案\n-m : 只找在说明文件manual路径下的档案\n-s : 只找source来源档案\n-u : 搜寻不在上诉三个项目当中的其他档案\nlocate\nlocate [-ir] keyword\n-i : 忽略大小写的差异\n-r : 后面可接正规表示法的显示方式\n压缩文件\n*.Z         compress程序压缩的档案\n*.gz        gzip程序压缩的档案\n*.bz2      bzip2程序压缩的档案\n*.tar        tar程序打包的档案，并没有压缩\n*.tar.gz    tar程序打包的档案，并且经过gzip的压缩\n*.tar.bz2  tar程序打包的档案，其中并且经过bzip2的压缩\ntar\n1、 压缩：tar –jcv –f filename.tar.bz2 要被压缩的档案或目录名称\n2、 查询：tar –jtv –f filename.tar.bz2\n3、 解压缩：tar –jxv –f filename.tar.bz2 –C 要解压的目录\ndump\ndump 的功能颇强，他除了可以备份整个文件系统之外，还可以制定等级喔\nvim程序编辑器\n删除\n复制\nyy           复制游标所在的那一行；\nnyy         n为数字，复制光标所在的向下n行；\n粘贴\n复原与重复\n插入或取代\n储存与离开\nVim环境的变更\n区块选择\n多档案编辑\n多窗口\n认识与学习BASH\nLinux使用的shell称为【BourneAgain SHell】，简称bash。\n命令编修能力（history）\n在指令列按上下键就可以找到前后一个输入的指令。这么多指令记录在家目录内的.bash_history里面。\n放在/root/.bash_history里面。\n命令与档案补齐功能（[tab]按键）\n命令别名设定功能（alias）\n例：alias lm=’ls-al’\n后面的lm=’ls-al’不能有空格，要连在一起。\n通配符（Wildcard）\nBash shell的内建命令：type\n查看指令是来自与外部指令或是内建bash当中的。\nexport\n自定义变量转成环境变量\n影响显示结果的语系变量（locale）\ndeclare / typeset\n宣告变量的类型\ndeclare [-aixr] variable-a :　将后面名为variable的变量定义成数组类型\n-i :   将后面名为variable的变量定义成整数数字类型\n-x : 用法与export一样，就是将后面的variable变成环境变量\n-r : 将变量设定为readonly类型，该变量不可被更改内容，也不能unset\n正规表示法与文件格式化处理\ngrep\n用法：grep  [选项]…  模式 [文件]…\n在每个文件中查找样式或标准输入。\nPATTERN默认的是一个基本的正则表达式（BRE）。\n例： grep –I ‘hello’menu.h main.c\n正则表达式的选择和解释：\n  -E,—extended-regexp     PATTERN是一个扩展的正则表达式(ERE)\n  -F,—fixed-strings        PATTERN是一套新行分离修复字符串\n  -G,—basic-regexp        PATTERN是一个基本的正则表达式(BRE)\n  -P,—perl-regexp         PATTERN是一个Perl正则表达式\n  -e,—regexp=PATTERN      使用 PATTERN 来匹配\n  -f,—file=FILE           从 FILE 来获得 PATTERN\n  -i,—ignore-case         忽略大小写\n  -w,—word-regexp         强制 PATTERN 仅匹配整个词\n  -x,—line-regexp         强制 PATTERN 仅匹配整行\n  -z,—null-data           结尾为 0 字节而不是新行符的数据行\n杂项：\n -s,—no-messages 不显示错误信息\n -v,—invert-match 选择不匹配的行\n -V,—version 打印版本信息并退出\n --help 显示本帮助并退出\n\n --mmap 如果可能，使用内存映象作为输入\n输出控制：\n  -m,—max-count=NUM       在有NUM个匹配后停止\n  -b,—byte-offset         在输出行的同时打印字节位移\n  -n,—line-number         在输出行的同时打印行数\n --line-buffered       flush outputon every line\n  -H,—with-filename       print the filenamefor each match\n  -h,—no-filename         suppress theprefixing filename on output\n --label=LABEL         print LABELas filename for standard input\n  -o,—only-matching       show only the partof a line matching PATTERN\n  -q,—quiet, —silent     suppress all normaloutput\n --binary-files=TYPE   assume thatbinary files are TYPE;\n\n                        TYPE is `binary&#39;,`text&#39;, or `without-match&#39;\n  -a,—text                等同于 —binary-files=text\n -I                        等同于 —binary-files=without-match\n  -d,—directories=ACTION  how to handledirectories;\n                        ACTION is `read&#39;,`recurse&#39;, or `skip&#39;\n  -D,—devices=ACTION      how to handledevices, FIFOs and sockets;\n                        ACTION is `read&#39; or`skip&#39;\n  -R,-r, —recursive       等同于 —directories=recurse\n --include=FILE_PATTERN  只搜索符合FILE_PATTERN型式的文件\n\n --exclude=FILE_PATTERN  跳过名字为FILE_PATTERN的文件或目录\n\n --exclude-from=FILE   skip filesmatching any file pattern from FILE\n\n --exclude-dir=PATTERN directories that match PATTERN will be skipped.\n  -L,—files-without-match print only names of FILEs containing no match\n  -l,—files-with-matches  print only names ofFILEs containing matches\n  -c,—count               print only a countof matching lines per FILE\n  -T,—initial-tab         make tabs line up(if needed)\n  -Z,—null                FILE名字后打印0字节\n上下文控制:\n  -B,—before-context=NUM  打印 NUM 行上文\n  -A,—after-context=NUM   打印 NUM 行下文\n  -C,—context=NUM         打印 NUM 行输出上下文\n -NUM                      与 —context=NUM相同\n --color[=WHEN],\n\n --colour[=WHEN]       使用标记来高亮匹配的字符串；\n\n                        WHEN 可取值为“always”，“never”或“auto”\n  -U,—binary             不去掉 EOL(MSDOS)处的 CR 字符\n  -u,—unix-byte-offsets   如果 CR 不在那里(MSDOS)，报告偏移值\n‘egrep’ 与 ‘grep -E’含义一致。‘fgrep’与 ‘grep -F’的含义一致。\n直接调用‘egrep’和‘fgrep’的方式已经被废弃了。\n没有 FILE或者 FILE 是 -，读取标准输入。如果少于两个 FILE，\n假设 -h。如果任意行被选中，退出状态为 0；\n如果出现任何错误并且 -q 未被给出，退出状态为 2。\n如果想查看没有某个字符的行，用反向选择[^]来实现。\n想要查看the开头的：\ngrep ‘^the’ a.txt符号’^’在[]内和外是不同的，在[]内表示反向选择，在[]外表示定位在行首的意思。\n搜寻空白行，\ngrep ‘^$’ a.txt(小数点). 代表一定有一个任意字符的意思\n（星星号）* 代表重复前一个0到无穷多次的意思，为组合形态\n限定连续字符范围{}\nShell script\n1、 指令的执行是从上而下、从左而右的分析与执行\n2、 指令的下达：指令、选项与参数间的多个空白都会被忽略掉\n3、 空白行也会被忽略掉，并且[tab]按键所推开的空白同样视为空格键\n4、 如果读到一个ENTER符号（CR），就尝试开始执行该行命令\n5、 至于如果一行的内容太多，则可以使用【\\enter】来延伸至下一行\n6、 【#】可作为批注，任何加在#后面的资料将全部被视为批注文字而被忽略\nsh sh01.sh 和  ./sh01.sh 执行完以后，子程序内的各项变量将会结束而不会传回到父程序中\nsource sh01.sh  执行完以后，子程序内的各项变量将会传回到父程序中。\n'),(17,3,'arm','<h2 id=\"h2-arm-\"><a name=\"ARM处理器指令集特点\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>ARM处理器指令集特点</h2><p>在ARM中，内存和外设都能被CPU看见，CPU可以根据物理地址去进行访问。但是ARM中的flash不一定能被CPU直接操作，比如会有EMMU来管理FLASH。</p>\n<p><code>豆芽专栏</code></p>\n<p>采用RISC架构的ARM微处理器一般具有如下特点：</p>\n<ol>\n<li><strong>体积小</strong>、<strong>低功耗</strong>、<strong>低成本</strong>、<strong>高性能</strong>；</li><li>支持Thumb（16位）/ARM（32位）<strong>双指令集</strong>，能很好的兼容8位/16位器件；</li><li>大量使用<strong>寄存器</strong>，指令执行速度更快；</li><li>大多数数据操作都在<strong>寄存器</strong>中完成；</li><li>寻址方式灵活简单，执行效率高；</li><li><strong>指令长度固定</strong>；</li></ol>\n<p>除此以外，ARM体系结构还采用了一些特别的技术，在保证高性能的前提下尽量缩小芯片的面积，并降低功耗：</p>\n<ol>\n<li><p>所有的指令都可根据前面的执行结果决定是否被执行，从而提高指令的执行效率。</p>\n</li><li><p>可用加载/存储指令批量传输数据，以提高数据的传输效率。</p>\n</li><li><p>可在一条数据处理指令中同时完成逻辑处理和移位处理。</p>\n</li><li><p>在循环处理中使用地址的自动增减来提高运行效率。</p>\n</li><li><p>支持协处理器来扩展ARM的功能</p>\n</li></ol>\n',0,0,'2021-06-18 13:28:24','/img/articlePic/img6.jpg',3,'ARM处理器指令集特点在ARM中，内存和外设都能被CPU看见，CPU可以根据物理地址去进行访问。但是ARM中的flash不一定能被CPU直接操作，比如会有EMMU来管理FLASH。\n豆芽专栏\n采用RISC架构的ARM微处理器一般具有如下特点：\n\n体积小、低功耗、低成本、高性能；支持Thumb（16位）/ARM（32位）双指令集，能很好的兼容8位/16位器件；大量使用寄存器，指令执行速度更快；大多数数据操作都在寄存器中完成；寻址方式灵活简单，执行效率高；指令长度固定；\n除此以外，ARM体系结构还采用了一些特别的技术，在保证高性能的前提下尽量缩小芯片的面积，并降低功耗：\n\n所有的指令都可根据前面的执行结果决定是否被执行，从而提高指令的执行效率。\n可用加载/存储指令批量传输数据，以提高数据的传输效率。\n可在一条数据处理指令中同时完成逻辑处理和移位处理。\n在循环处理中使用地址的自动增减来提高运行效率。\n支持协处理器来扩展ARM的功能\n\n'),(18,3,'寄存器','<h2 id=\"h2-u7B80u4ECB\"><a name=\"简介\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>简介</h2><p>一般单片机编程，寄存器都被定义好了放在头文件中，比如，51单片机中存放在#include&lt;reg51.h&gt;(编译器弄好了，我们不需要手动天添加该文件，只需要声明即可),stm32则存放在#include”stm32f10x.h”。</p>\n<h2 id=\"h2-u5BC4u5B58u5668u6620u5C04\"><a name=\"寄存器映射\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>寄存器映射</h2><p>​    在图 STM32F10xx 系统框图 中，被控单元的 FLASH， RAM， FSMC 和 AHB 到 APB 的桥（即片上外设），这些功能部件共同排列在一个 4GB 的地址空间内。我们在编程的时候，可以通过他们的地址找到他们，然后来操作他们（通过 C 语言对它们进行数据的读和写）。</p>\n<p>​    存储器本身不具有地址信息，它的地址是由芯片厂商或用户分配，给存储器分配地址的过程就称为存储器映射，具体见图存储器映射。如果给存储器再分配一个地址就叫存储器重映射。  ==就是给一些特定功能的地址编门牌号，这些门牌号就是寄存器。==</p>\n<h2 id=\"h2-u5B58u50A8u5668u533Au57DFu529Fu80FDu5212u5206\"><a name=\"存储器区域功能划分\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存储器区域功能划分</h2><p>在这 4GB 的地址空间中， ARM 已经粗线条的平均分成了 8 个块，每块 512MB，每个块也都规定了用途，具体分类见表格存储器功能分类。每个块的大小都有 512MB，显然这是非常大的，芯片厂商在每个块的范围内设计各具特色的外设时并不一定都用得完，都是只用了其中的一部分而已。</p>\n<p><img src=\"https://gitee.com/wang_chunfeng/pic-go/raw/master/img/20210506175317.png\" alt=\"image-20210506175316018\"></p>\n<p>在这 8 个 Block 里面，有 3 个块非常重要，也是我们最关心的三个块。 Block0 用来设计成内部FLASH， Block1 用来设计成内部 RAM， Block2 用来设计成片上的外设，下面我们简单的介绍下这三个 Block 里面的具体区域的功能划分 。</p>\n<h3 id=\"h3--block0-\"><a name=\"存储器 Block0 内部区域功能划分\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>存储器 Block0 内部区域功能划分</h3><p><img src=\"https://gitee.com/wang_chunfeng/pic-go/raw/master/img/20210506175435.png\" alt=\"image-20210506175434131\"></p>\n<h3 id=\"h3--block2-\"><a name=\"储存器 Block2 内部区域功能划分\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>储存器 Block2 内部区域功能划分</h3><p><img src=\"https://gitee.com/wang_chunfeng/pic-go/raw/master/img/20210506175510.png\" alt=\"image-20210506175509486\"></p>\n<h2 id=\"h2-c-\"><a name=\"C语言对寄存器的封装\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>C语言对寄存器的封装</h2><h3 id=\"h3-u5C01u88C5u603Bu7EBFu548Cu5916u8BBEu57FAu5730u5740\"><a name=\"封装总线和外设基地址\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>封装总线和外设基地址</h3><p>总线基地址和外设基地址都以相应的宏定义起来，总线或者外设都以他们的名字作为宏名  。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-c\"><span class=\"com\">/* 外设基地址 */</span></code></li><li class=\"L1\"><code class=\"lang-c\"><span class=\"pln\"> </span><span class=\"com\">#define</span><span class=\"pln\"> PERIPH_BASE </span><span class=\"pun\">((</span><span class=\"kwd\">unsigned</span><span class=\"pln\"> </span><span class=\"typ\">int</span><span class=\"pun\">)</span><span class=\"lit\">0x40000000</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code class=\"lang-c\"></code></li><li class=\"L3\"><code class=\"lang-c\"><span class=\"com\">/* 总线基地址 */</span></code></li><li class=\"L4\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> APB1PERIPH_BASE PERIPH_BASE</span></code></li><li class=\"L5\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> APB2PERIPH_BASE </span><span class=\"pun\">(</span><span class=\"pln\">PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x00010000</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> AHBPERIPH_BASE </span><span class=\"pun\">(</span><span class=\"pln\">PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x00020000</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code class=\"lang-c\"></code></li><li class=\"L8\"><code class=\"lang-c\"><span class=\"com\">/* GPIO 外设基地址 */</span></code></li><li class=\"L9\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOA_BASE </span><span class=\"pun\">(</span><span class=\"pln\">APB2PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x0800</span><span class=\"pun\">)</span></code></li><li class=\"L0\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_BASE </span><span class=\"pun\">(</span><span class=\"pln\">APB2PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x0C00</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOC_BASE </span><span class=\"pun\">(</span><span class=\"pln\">APB2PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x1000</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOD_BASE </span><span class=\"pun\">(</span><span class=\"pln\">APB2PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x1400</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOE_BASE </span><span class=\"pun\">(</span><span class=\"pln\">APB2PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x1800</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOF_BASE </span><span class=\"pun\">(</span><span class=\"pln\">APB2PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x1C00</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOG_BASE </span><span class=\"pun\">(</span><span class=\"pln\">APB2PERIPH_BASE </span><span class=\"pun\">+</span><span class=\"pln\"> </span><span class=\"lit\">0x2000</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code class=\"lang-c\"></code></li><li class=\"L7\"><code class=\"lang-c\"><span class=\"com\">/* 寄存器基地址，以 GPIOB 为例 */</span></code></li><li class=\"L8\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_CRL </span><span class=\"pun\">(</span><span class=\"pln\">GPIOB_BASE</span><span class=\"pun\">+</span><span class=\"lit\">0x00</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_CRH </span><span class=\"pun\">(</span><span class=\"pln\">GPIOB_BASE</span><span class=\"pun\">+</span><span class=\"lit\">0x04</span><span class=\"pun\">)</span></code></li><li class=\"L0\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_IDR </span><span class=\"pun\">(</span><span class=\"pln\">GPIOB_BASE</span><span class=\"pun\">+</span><span class=\"lit\">0x08</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_ODR </span><span class=\"pun\">(</span><span class=\"pln\">GPIOB_BASE</span><span class=\"pun\">+</span><span class=\"lit\">0x0C</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_BSRR </span><span class=\"pun\">(</span><span class=\"pln\">GPIOB_BASE</span><span class=\"pun\">+</span><span class=\"lit\">0x10</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_BRR </span><span class=\"pun\">(</span><span class=\"pln\">GPIOB_BASE</span><span class=\"pun\">+</span><span class=\"lit\">0x14</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB_LCKR </span><span class=\"pun\">(</span><span class=\"pln\">GPIOB_BASE</span><span class=\"pun\">+</span><span class=\"lit\">0x18</span><span class=\"pun\">)</span></code></li></ol></pre>\n<p>但是这样子还是有点麻烦，可以利用C语言的结构体，来进一步简化代码。</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-c\"><span class=\"kwd\">typedef</span><span class=\"pln\"> </span><span class=\"kwd\">unsigned</span><span class=\"pln\"> </span><span class=\"typ\">int</span><span class=\"pln\"> </span><span class=\"typ\">uint32_t</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/* 无符号 32 位变量 */</span></code></li><li class=\"L1\"><code class=\"lang-c\"><span class=\"kwd\">typedef</span><span class=\"pln\"> </span><span class=\"kwd\">unsigned</span><span class=\"pln\"> </span><span class=\"kwd\">short</span><span class=\"pln\"> </span><span class=\"typ\">int</span><span class=\"pln\"> </span><span class=\"typ\">uint16_t</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/* 无符号 16 位变量 */</span></code></li><li class=\"L2\"><code class=\"lang-c\"></code></li><li class=\"L3\"><code class=\"lang-c\"><span class=\"com\">/* GPIO 寄存器列表 */</span></code></li><li class=\"L4\"><code class=\"lang-c\"><span class=\"kwd\">typedef</span><span class=\"pln\"> </span><span class=\"kwd\">struct</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L5\"><code class=\"lang-c\"><span class=\"typ\">uint32_t</span><span class=\"pln\"> CRL</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/*GPIO 端口配置低寄存器 地址偏移: 0x00 */</span></code></li><li class=\"L6\"><code class=\"lang-c\"><span class=\"typ\">uint32_t</span><span class=\"pln\"> CRH</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/*GPIO 端口配置高寄存器 地址偏移: 0x04 */</span></code></li><li class=\"L7\"><code class=\"lang-c\"><span class=\"typ\">uint32_t</span><span class=\"pln\"> IDR</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/*GPIO 数据输入寄存器 地址偏移: 0x08 */</span></code></li><li class=\"L8\"><code class=\"lang-c\"><span class=\"typ\">uint32_t</span><span class=\"pln\"> ODR</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/*GPIO 数据输出寄存器 地址偏移: 0x0C */</span></code></li><li class=\"L9\"><code class=\"lang-c\"><span class=\"typ\">uint32_t</span><span class=\"pln\"> BSRR</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/*GPIO 位设置/清除寄存器 地址偏移: 0x10 */</span></code></li><li class=\"L0\"><code class=\"lang-c\"><span class=\"typ\">uint32_t</span><span class=\"pln\"> BRR</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/*GPIO 端口位清除寄存器 地址偏移: 0x14 */</span></code></li><li class=\"L1\"><code class=\"lang-c\"><span class=\"typ\">uint16_t</span><span class=\"pln\"> LCKR</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">/*GPIO 端口配置锁定寄存器 地址偏移: 0x18 */</span></code></li><li class=\"L2\"><code class=\"lang-c\"><span class=\"pun\">}</span><span class=\"pln\"> GPIO_TypeDef</span><span class=\"pun\">;</span></code></li></ol></pre>\n<p>==原理如下:==</p>\n<p><img src=\"https://gitee.com/wang_chunfeng/pic-go/raw/master/img/20210506180643.png\" alt=\"image-20210506180642485\"></p>\n<p>这样我们就可以定义一个结构体指针，指向这个结构体，操作更加方便。同时我们更进一步，直接使用宏定义好 GPIO_TypeDef 类型的指针，而且指针指向各个 GPIO端口的首地址 。</p>\n<p>以GPIOB为例：</p>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-c\"><span class=\"com\">#define</span><span class=\"pln\"> GPIOB </span><span class=\"pun\">((</span><span class=\"pln\">GPIO_TypeDef </span><span class=\"pun\">*)</span><span class=\"pln\"> GPIOB_BASE</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code class=\"lang-c\"></code></li><li class=\"L2\"><code class=\"lang-c\"><span class=\"com\">/* 使用定义好的宏直接访问 */</span></code></li><li class=\"L3\"><code class=\"lang-c\"><span class=\"com\">/* 访问 GPIOB 端口的寄存器 */</span></code></li><li class=\"L4\"><code class=\"lang-c\"><span class=\"pln\">GPIOB</span><span class=\"pun\">-&gt;</span><span class=\"pln\">BSRR </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0xFFFF</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">//通过指针访问并修改 GPIOB_BSRR 寄存器</span></code></li><li class=\"L5\"><code class=\"lang-c\"><span class=\"pln\">GPIOB</span><span class=\"pun\">-&gt;</span><span class=\"pln\">CRL </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0xFFFF</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">//修改 GPIOB_CRL 寄存器</span></code></li><li class=\"L6\"><code class=\"lang-c\"><span class=\"pln\">GPIOB</span><span class=\"pun\">-&gt;</span><span class=\"pln\">ODR </span><span class=\"pun\">=</span><span class=\"lit\">0xFFFF</span><span class=\"pun\">;</span><span class=\"pln\"> </span><span class=\"com\">//修改 GPIOB_ODR 寄存器</span></code></li></ol></pre>\n',0,0,'2021-06-18 13:29:11','/img/articlePic/img1.jpg',3,'简介一般单片机编程，寄存器都被定义好了放在头文件中，比如，51单片机中存放在#include&lt;reg51.h&gt;(编译器弄好了，我们不需要手动天添加该文件，只需要声明即可),stm32则存放在#include”stm32f10x.h”。\n寄存器映射​    在图 STM32F10xx 系统框图 中，被控单元的 FLASH， RAM， FSMC 和 AHB 到 APB 的桥（即片上外设），这些功能部件共同排列在一个 4GB 的地址空间内。我们在编程的时候，可以通过他们的地址找到他们，然后来操作他们（通过 C 语言对它们进行数据的读和写）。\n​    存储器本身不具有地址信息，它的地址是由芯片厂商或用户分配，给存储器分配地址的过程就称为存储器映射，具体见图存储器映射。如果给存储器再分配一个地址就叫存储器重映射。  ==就是给一些特定功能的地址编门牌号，这些门牌号就是寄存器。==\n存储器区域功能划分在这 4GB 的地址空间中， ARM 已经粗线条的平均分成了 8 个块，每块 512MB，每个块也都规定了用途，具体分类见表格存储器功能分类。每个块的大小都有 512MB，显然这是非常大的，芯片厂商在每个块的范围内设计各具特色的外设时并不一定都用得完，都是只用了其中的一部分而已。\n\n在这 8 个 Block 里面，有 3 个块非常重要，也是我们最关心的三个块。 Block0 用来设计成内部FLASH， Block1 用来设计成内部 RAM， Block2 用来设计成片上的外设，下面我们简单的介绍下这三个 Block 里面的具体区域的功能划分 。\n存储器 Block0 内部区域功能划分\n储存器 Block2 内部区域功能划分\nC语言对寄存器的封装封装总线和外设基地址总线基地址和外设基地址都以相应的宏定义起来，总线或者外设都以他们的名字作为宏名  。\n/* 外设基地址 */\n #define PERIPH_BASE ((unsigned int)0x40000000)\n\n/* 总线基地址 */\n#define APB1PERIPH_BASE PERIPH_BASE\n#define APB2PERIPH_BASE (PERIPH_BASE + 0x00010000)\n#define AHBPERIPH_BASE (PERIPH_BASE + 0x00020000)\n\n/* GPIO 外设基地址 */\n#define GPIOA_BASE (APB2PERIPH_BASE + 0x0800)\n#define GPIOB_BASE (APB2PERIPH_BASE + 0x0C00)\n#define GPIOC_BASE (APB2PERIPH_BASE + 0x1000)\n#define GPIOD_BASE (APB2PERIPH_BASE + 0x1400)\n#define GPIOE_BASE (APB2PERIPH_BASE + 0x1800)\n#define GPIOF_BASE (APB2PERIPH_BASE + 0x1C00)\n#define GPIOG_BASE (APB2PERIPH_BASE + 0x2000)\n\n/* 寄存器基地址，以 GPIOB 为例 */\n#define GPIOB_CRL (GPIOB_BASE+0x00)\n#define GPIOB_CRH (GPIOB_BASE+0x04)\n#define GPIOB_IDR (GPIOB_BASE+0x08)\n#define GPIOB_ODR (GPIOB_BASE+0x0C)\n#define GPIOB_BSRR (GPIOB_BASE+0x10)\n#define GPIOB_BRR (GPIOB_BASE+0x14)\n#define GPIOB_LCKR (GPIOB_BASE+0x18)\n\n但是这样子还是有点麻烦，可以利用C语言的结构体，来进一步简化代码。\ntypedef unsigned int uint32_t; /* 无符号 32 位变量 */\ntypedef unsigned short int uint16_t; /* 无符号 16 位变量 */\n\n/* GPIO 寄存器列表 */\ntypedef struct {\nuint32_t CRL; /*GPIO 端口配置低寄存器 地址偏移: 0x00 */\nuint32_t CRH; /*GPIO 端口配置高寄存器 地址偏移: 0x04 */\nuint32_t IDR; /*GPIO 数据输入寄存器 地址偏移: 0x08 */\nuint32_t ODR; /*GPIO 数据输出寄存器 地址偏移: 0x0C */\nuint32_t BSRR; /*GPIO 位设置/清除寄存器 地址偏移: 0x10 */\nuint32_t BRR; /*GPIO 端口位清除寄存器 地址偏移: 0x14 */\nuint16_t LCKR; /*GPIO 端口配置锁定寄存器 地址偏移: 0x18 */\n} GPIO_TypeDef;\n\n==原理如下:==\n\n这样我们就可以定义一个结构体指针，指向这个结构体，操作更加方便。同时我们更进一步，直接使用宏定义好 GPIO_TypeDef 类型的指针，而且指针指向各个 GPIO端口的首地址 。\n以GPIOB为例：\n#define GPIOB ((GPIO_TypeDef *) GPIOB_BASE)\n\n/* 使用定义好的宏直接访问 */\n/* 访问 GPIOB 端口的寄存器 */\nGPIOB-&gt;BSRR = 0xFFFF; //通过指针访问并修改 GPIOB_BSRR 寄存器\nGPIOB-&gt;CRL = 0xFFFF; //修改 GPIOB_CRL 寄存器\nGPIOB-&gt;ODR =0xFFFF; //修改 GPIOB_ODR 寄存器\n\n'),(19,3,'移植','<h1 id=\"h1-stm32-\"><a name=\"STM32不同芯片之间裸机程序移植\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>STM32不同芯片之间裸机程序移植</h1><p>STM32F10X_MD, USE_STDPERIPH_DRIVER</p>\n<p>这两个宏分别在system_stm32f10x.c中和stm32f10x.h中定义，（STM32F10X_MD在两个文件中都有使用），更加方便移植。前者可以决定启动的相关配置，以及一些初始设置，后者决定stm32f10x_conf.h是否包含。</p>\n<h2 id=\"h2--\"><a name=\"标准库文件架构—基础文件（启动等等）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>标准库文件架构—基础文件（启动等等）</h2><p><img src=\"https://gitee.com/wang_chunfeng/pic-go/raw/master/img/20210506192715.png\" alt=\"image-20210506192714163\"></p>\n<h3 id=\"h3-u5185u6838u76F8u5173u6587u4EF6\"><a name=\"内核相关文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>内核相关文件</h3><p><strong>Core_cm3.h</strong> 头文件里面实现了内核的寄存器映射，对应外设头文件 stm32f10x.h，区别就是一个针对内核的外设，一个针对片上<br>（内核之外）的外设。<strong>core_cm3.c</strong> 文件实现了一下操作内核外设寄存器的函数，用的比较少。  这两个文件是ARM提供的，也算是CMSIS的一部分吧！！</p>\n<p>同时再core_cm3.h中有“stdint.h”这个头文件  ，主要作用是提供一些类型定义，所以这里面和C语言编译器是相通的。==<strong>这些新类型定义屏蔽了在不同芯片平台时，出现的诸如 int 的大小是 16 位，还是 32 位的差异（这就是CMSIS的作用，屏蔽这种细节）</strong>==。所以在我们以后的程序中，都将使用新类型如 uint8_t 、uint16_t 等。在稍旧版的程序中还经常会出现如 u8、 u16、 u32 这样的类型，分别表示的无符号的 8 位、 16 位、32 位整型。初学者碰到这样的旧类型感觉一头雾水，它们定义的位置在 STM32f10x.h 文件中。建议在以后的新程序中尽量使用 uint8_t 、 uint16_t 类型的定义。  </p>\n<h3 id=\"h3-u542Fu52A8u6587u4EF6\"><a name=\"启动文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>启动文件</h3><p>需要根据不同单片机的FLAH和RAM选择即可，详细描述请看Stm32目录下启动流程文件。</p>\n<h3 id=\"h3-stm32f10x-h\"><a name=\"Stm32f10x.h\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Stm32f10x.h</h3><p>片上外设的所以寄存器的映射，是一个非常重要的头文件，在内核中与之想对应的头文件是 core_cm3.h 。</p>\n<h3 id=\"h3-system_stm32f10x-c\"><a name=\"system_stm32f10x.c\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>system_stm32f10x.c</h3><p>其中有一个非常重要的函数：SystemInit（上电之后在启动文件夹里会调用这个函数，调用完之后，系统的时钟就被初始化成 72M  ） 。system_stm32f10x.c 文件实现了 STM32 的时钟配置，操作的是片上的 RCC 这个外设 。如果需要修改时钟配置，可以参考这个函数重写。<strong>为了维持库的完整性，我们不会直接在这个文件里面修改时钟配置函数。  </strong></p>\n<h2 id=\"h2--\"><a name=\"标准库文件架构—应用文件（具体外设）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>标准库文件架构—应用文件（具体外设）</h2><p>存放于Libraries\\STM32F10x_StdPeriph_Driver  。官方写好，非常非常详细！</p>\n<p>在头文件中：存放外设的初始化结构体，外设初始化结构体成员的参数列表，外设固件库函数的声明。</p>\n<p>这两个文件夹中，还有一个很特别的==<strong>misc.c</strong>== 文件，这个文件提供了外设对<strong>内核中的 NVIC(中断向量控制器) 的访问函数（与前面的core_cm3.c相呼应，系统滴答定时器也是它提供）</strong>，在配置中断时，我们必须把这个文件添加到工程中。  </p>\n<h2 id=\"h2--\"><a name=\"标准库文件架构—接口文件（让库文件之间产生关联）\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>标准库文件架构—接口文件（让库文件之间产生关联）</h2><p>文件目录： STM32F10x_StdPeriph_Lib_V3.5.0\\Project\\STM32F10x_StdPeriph_Template  </p>\n<h3 id=\"h3-stm32f10x_it-c-stm32f10x_conf-h-system_stm32f10x-c\"><a name=\"stm32f10x_it.c、 stm32f10x_conf.h 和 system_stm32f10x.c\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>stm32f10x_it.c、 stm32f10x_conf.h 和 system_stm32f10x.c</h3><p>stm32f10x_it.c：这个文件是专门用来编写中断服务函数的，在我们修改前，这个文件已经定义了一些系统异常 (特殊中断) 的接口，其它普通中断服务函数由我们自己添加。  （中断服务函数不可以自己随便命名）。</p>\n<p>system_stm32f10x.c：这个文件包含了 STM32 芯片上电后初始化系统时钟、扩展外部存储器用的函数。</p>\n<p>stm32f10x_conf.h：这个文件被包含进 stm32f10x.h 文件。当我们使用固件库编程的时候，如果需要某个外设的驱动库，就需要包含该外设的头文件： stm32f10x_ppp.h  ，这个文件方便了外设的添加与不添加。这个配置头文件统一管理这些外设的头文件。</p>\n<p>stm32f10x_conf.h 这个文件还可配置是否使用“断言”编译选项 ，高级用法，开发时可以用来做测试（待仔细研究）。</p>\n<p><img src=\"https://gitee.com/wang_chunfeng/pic-go/raw/master/img/20210506200230.png\" alt=\"image-20210506200211913\"></p>\n<h1 id=\"h1-stm32-ucos-\"><a name=\"STM32不同芯片之间UCOS移植\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>STM32不同芯片之间UCOS移植</h1><h2 id=\"h2-ucos-\"><a name=\"UCOS移植\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>UCOS移植</h2><h2 id=\"h2--\"><a name=\"整体文件系统架构，各个文件作用\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>整体文件系统架构，各个文件作用</h2>',0,0,'2021-06-18 13:33:16','/img/articlePic/img2.jpg',3,'STM32不同芯片之间裸机程序移植STM32F10X_MD, USE_STDPERIPH_DRIVER\n这两个宏分别在system_stm32f10x.c中和stm32f10x.h中定义，（STM32F10X_MD在两个文件中都有使用），更加方便移植。前者可以决定启动的相关配置，以及一些初始设置，后者决定stm32f10x_conf.h是否包含。\n标准库文件架构—基础文件（启动等等）\n内核相关文件Core_cm3.h 头文件里面实现了内核的寄存器映射，对应外设头文件 stm32f10x.h，区别就是一个针对内核的外设，一个针对片上（内核之外）的外设。core_cm3.c 文件实现了一下操作内核外设寄存器的函数，用的比较少。  这两个文件是ARM提供的，也算是CMSIS的一部分吧！！\n同时再core_cm3.h中有“stdint.h”这个头文件  ，主要作用是提供一些类型定义，所以这里面和C语言编译器是相通的。==这些新类型定义屏蔽了在不同芯片平台时，出现的诸如 int 的大小是 16 位，还是 32 位的差异（这就是CMSIS的作用，屏蔽这种细节）==。所以在我们以后的程序中，都将使用新类型如 uint8_t 、uint16_t 等。在稍旧版的程序中还经常会出现如 u8、 u16、 u32 这样的类型，分别表示的无符号的 8 位、 16 位、32 位整型。初学者碰到这样的旧类型感觉一头雾水，它们定义的位置在 STM32f10x.h 文件中。建议在以后的新程序中尽量使用 uint8_t 、 uint16_t 类型的定义。  \n启动文件需要根据不同单片机的FLAH和RAM选择即可，详细描述请看Stm32目录下启动流程文件。\nStm32f10x.h片上外设的所以寄存器的映射，是一个非常重要的头文件，在内核中与之想对应的头文件是 core_cm3.h 。\nsystem_stm32f10x.c其中有一个非常重要的函数：SystemInit（上电之后在启动文件夹里会调用这个函数，调用完之后，系统的时钟就被初始化成 72M  ） 。system_stm32f10x.c 文件实现了 STM32 的时钟配置，操作的是片上的 RCC 这个外设 。如果需要修改时钟配置，可以参考这个函数重写。为了维持库的完整性，我们不会直接在这个文件里面修改时钟配置函数。  \n标准库文件架构—应用文件（具体外设）存放于Libraries\\STM32F10x_StdPeriph_Driver  。官方写好，非常非常详细！\n在头文件中：存放外设的初始化结构体，外设初始化结构体成员的参数列表，外设固件库函数的声明。\n这两个文件夹中，还有一个很特别的==misc.c== 文件，这个文件提供了外设对内核中的 NVIC(中断向量控制器) 的访问函数（与前面的core_cm3.c相呼应，系统滴答定时器也是它提供），在配置中断时，我们必须把这个文件添加到工程中。  \n标准库文件架构—接口文件（让库文件之间产生关联）文件目录： STM32F10x_StdPeriph_Lib_V3.5.0\\Project\\STM32F10x_StdPeriph_Template  \nstm32f10x_it.c、 stm32f10x_conf.h 和 system_stm32f10x.cstm32f10x_it.c：这个文件是专门用来编写中断服务函数的，在我们修改前，这个文件已经定义了一些系统异常 (特殊中断) 的接口，其它普通中断服务函数由我们自己添加。  （中断服务函数不可以自己随便命名）。\nsystem_stm32f10x.c：这个文件包含了 STM32 芯片上电后初始化系统时钟、扩展外部存储器用的函数。\nstm32f10x_conf.h：这个文件被包含进 stm32f10x.h 文件。当我们使用固件库编程的时候，如果需要某个外设的驱动库，就需要包含该外设的头文件： stm32f10x_ppp.h  ，这个文件方便了外设的添加与不添加。这个配置头文件统一管理这些外设的头文件。\nstm32f10x_conf.h 这个文件还可配置是否使用“断言”编译选项 ，高级用法，开发时可以用来做测试（待仔细研究）。\n\nSTM32不同芯片之间UCOS移植UCOS移植整体文件系统架构，各个文件作用'),(20,4,'决策树','<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> matplotlib</span><span class=\"pun\">.</span><span class=\"pln\">pyplot </span><span class=\"kwd\">as</span><span class=\"pln\"> plt</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> numpy </span><span class=\"kwd\">as</span><span class=\"pln\"> np </span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> pandas </span><span class=\"kwd\">as</span><span class=\"pln\"> pd</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> scipy </span><span class=\"kwd\">as</span><span class=\"pln\"> sc</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> seaborn </span><span class=\"kwd\">as</span><span class=\"pln\"> sns</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> queue</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"kwd\">from</span><span class=\"pln\"> sklearn </span><span class=\"kwd\">import</span><span class=\"pln\"> datasets</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"kwd\">from</span><span class=\"pln\"> sklearn</span><span class=\"pun\">.</span><span class=\"pln\">metrics </span><span class=\"kwd\">import</span><span class=\"pln\"> accuracy_score</span><span class=\"pun\">,</span><span class=\"pln\">f1_score</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"kwd\">from</span><span class=\"pln\"> sklearn</span><span class=\"pun\">.</span><span class=\"pln\">tree </span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">DecisionTreeClassifier</span></code></li></ol></pre>\n<h1 id=\"h1-decision-tree\"><a name=\"Decision Tree\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>Decision Tree</h1><ul>\n<li>把产生的连续变量转化成类别标签,用这个数据做决策树，就方便很多了。</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">x</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">=</span><span class=\"pln\">datasets</span><span class=\"pun\">.</span><span class=\"pln\">make_classification</span><span class=\"pun\">()</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"com\">#三个分位数：</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">x</span><span class=\"pun\">=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">apply_along_axis</span><span class=\"pun\">(</span><span class=\"kwd\">lambda</span><span class=\"pln\"> a</span><span class=\"pun\">:</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">searchsorted</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">quantile</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">sort</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">random</span><span class=\"pun\">.</span><span class=\"pln\">rand</span><span class=\"pun\">(</span><span class=\"lit\">5</span><span class=\"pun\">))),</span><span class=\"pln\">a</span><span class=\"pun\">),</span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\">x</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> list</span><span class=\"pun\">(</span><span class=\"pln\">set</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">)):</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">    plt</span><span class=\"pun\">.</span><span class=\"pln\">plot</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">[</span><span class=\"pln\">y</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">][:,</span><span class=\"lit\">0</span><span class=\"pun\">],</span><span class=\"pln\">x</span><span class=\"pun\">[</span><span class=\"pln\">y</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">][:,</span><span class=\"lit\">1</span><span class=\"pun\">],</span><span class=\"str\">\'*\'</span><span class=\"pun\">,</span><span class=\"pln\">label</span><span class=\"pun\">=</span><span class=\"pln\">i</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">legend</span><span class=\"pun\">()</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">show</span><span class=\"pun\">()</span></code></li></ol></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/11875530-c6b9a8661ae11c4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"output_3_0.png\"></p>\n<h2 id=\"h2-1-1-\"><a name=\"1.1信息熵\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.1信息熵</h2><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">def</span><span class=\"pln\"> </span><span class=\"typ\">Entropy</span><span class=\"pun\">(</span><span class=\"pln\">series</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    计算类别变量的熵</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">    pi</span><span class=\"pun\">=</span><span class=\"pln\">pd</span><span class=\"pun\">.</span><span class=\"typ\">Series</span><span class=\"pun\">(</span><span class=\"pln\">series</span><span class=\"pun\">).</span><span class=\"pln\">value_counts</span><span class=\"pun\">()/</span><span class=\"pln\">len</span><span class=\"pun\">(</span><span class=\"pln\">series</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span><span class=\"pun\">*</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">sum</span><span class=\"pun\">(</span><span class=\"pln\">pi</span><span class=\"pun\">*</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">log2</span><span class=\"pun\">(</span><span class=\"pln\">pi</span><span class=\"pun\">))</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">en</span><span class=\"pun\">=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">apply_along_axis</span><span class=\"pun\">(</span><span class=\"typ\">Entropy</span><span class=\"pun\">,</span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\">x</span><span class=\"pun\">)</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">plot</span><span class=\"pun\">(</span><span class=\"pln\">en</span><span class=\"pun\">,</span><span class=\"str\">\'*\'</span><span class=\"pun\">)</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">[&lt;</span><span class=\"pln\">matplotlib</span><span class=\"pun\">.</span><span class=\"pln\">lines</span><span class=\"pun\">.</span><span class=\"typ\">Line2D</span><span class=\"pln\"> at </span><span class=\"lit\">0x2dec9264b00</span><span class=\"pun\">&gt;]</span></code></li></ol></pre><p><img src=\"https://upload-images.jianshu.io/upload_images/11875530-c483d2353e1fb92b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"output_5_1.png\"></p>\n<h1 id=\"h1-1-2-\"><a name=\"1.2条件熵\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2条件熵</h1><ul>\n<li>D 为样本</li><li>k为类别个数 ，Ck为类别为k的样本数</li><li>特征A有不同的特征1,2,3…n,根据特征A可以将特征分为D1,D2,D3….Dn  ,|D1|为样本个数</li><li>即Di中属于Ck的样本集合为Dik</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">def</span><span class=\"pln\"> </span><span class=\"typ\">EntropyCondition</span><span class=\"pun\">(</span><span class=\"pln\">series</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    计算series的条件熵</span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">    series:数据集</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">    y:类别</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"str\">    先数据集按照特征A分开，然后计算没一份数据的经验熵</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span><span class=\"pln\">    </span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"lit\">1</span><span class=\"pun\">*</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">sum</span><span class=\"pun\">([</span><span class=\"typ\">Entropy</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">[</span><span class=\"pln\">series</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">])</span><span class=\"pln\"> </span><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> set</span><span class=\"pun\">(</span><span class=\"pln\">series</span><span class=\"pun\">)])</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"typ\">EntropyCondition</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">[:,</span><span class=\"lit\">1</span><span class=\"pun\">],</span><span class=\"pln\">y</span><span class=\"pun\">)</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">-</span><span class=\"lit\">5.8599831625893435</span></code></li></ol></pre><h1 id=\"h1-1-4-\"><a name=\"1.4 信息增益\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.4 信息增益</h1><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">def</span><span class=\"pln\"> </span><span class=\"typ\">GainInf</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    计算信息增益</span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">    array: data</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">    y:label</span></code></li><li class=\"L6\"><code class=\"lang-python\"></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"str\">    return 返回每个特征的增益</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">    gain</span><span class=\"pun\">=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">zeros</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">.</span><span class=\"pln\">shape</span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">])</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">for</span><span class=\"pln\"> i</span><span class=\"pun\">,</span><span class=\"pln\">series </span><span class=\"kwd\">in</span><span class=\"pln\"> enumerate</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">.</span><span class=\"pln\">T</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">        gain</span><span class=\"pun\">[</span><span class=\"pln\">i</span><span class=\"pun\">]=</span><span class=\"typ\">Entropy</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">)-</span><span class=\"typ\">EntropyCondition</span><span class=\"pun\">(</span><span class=\"pln\">series</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> gain   </span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">\'\'\'</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">测试全都一样的数据</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"str\">\'\'\'</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">a</span><span class=\"pun\">=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">ones_like</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">b</span><span class=\"pun\">=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">ones_like</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">)</span></code></li><li class=\"L9\"><code class=\"lang-python\"></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"typ\">GainInf</span><span class=\"pun\">(</span><span class=\"pln\">a</span><span class=\"pun\">,</span><span class=\"pln\">b</span><span class=\"pun\">)#.</span><span class=\"pln\">argmax</span><span class=\"pun\">()</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">array</span><span class=\"pun\">([</span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span></code></li><li class=\"L1\"><code><span class=\"pln\">       </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.</span><span class=\"pun\">])</span></code></li></ol></pre><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">def</span><span class=\"pln\"> </span><span class=\"typ\">GainInfRatio</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    计算信息增益比</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"str\">    ??? 如果信息增益比的分为0怎么办??</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">    返回信息增益比</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"com\">#对于信息熵等于0的特征，直接把所有特征的信息熵平均值*10</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">    gain</span><span class=\"pun\">=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">apply_along_axis</span><span class=\"pun\">(</span><span class=\"typ\">Entropy</span><span class=\"pun\">,</span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\">array</span><span class=\"pun\">)</span><span class=\"pln\">   </span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"com\">#尽量不要找都一样的数据，因为这样会导致分不下去</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">    gain</span><span class=\"pun\">[</span><span class=\"pln\">gain</span><span class=\"pun\">==</span><span class=\"lit\">0</span><span class=\"pun\">]+=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">mean</span><span class=\"pun\">(</span><span class=\"pln\">gain</span><span class=\"pun\">)*</span><span class=\"lit\">10</span></code></li><li class=\"L0\"><code class=\"lang-python\"></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"typ\">GainInf</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">)/</span><span class=\"pln\">gain</span></code></li><li class=\"L2\"><code class=\"lang-python\"></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"typ\">GainInfRatio</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">).</span><span class=\"pln\">argmax</span><span class=\"pun\">()</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"lit\">3</span></code></li></ol></pre><h1 id=\"h1-id3\"><a name=\"ID3\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>ID3</h1><ul>\n<li>每棵树不一定有几个子树，所以用列表表示他的所有子树</li><li>如果信息增益最大的那个特征有多个取值，我应该怎么选取呢？难道是随便选，直接分开n个？</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Node</span><span class=\"pun\">():</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    决策树单棵树的实现（只要提供树的数据集，就可以继续下一步了。）</span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">    决策树的子树不一定只有两颗树，所以用列表表示所有的子树</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">    每课树保留自己的数据集、维度、值</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> __init__</span><span class=\"pun\">(</span><span class=\"pln\">self</span><span class=\"pun\">,</span><span class=\"pln\">data</span><span class=\"pun\">,</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">nodes</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">):</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">nodes</span><span class=\"pun\">=</span><span class=\"pln\">nodes </span><span class=\"com\">#保存左树</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">=</span><span class=\"pln\">data  </span><span class=\"com\">#保存数据集</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"pln\">iIndex </span><span class=\"com\">#记录切割的维度</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"pln\">value </span><span class=\"com\"># 当前维度的值</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> set_node</span><span class=\"pun\">(</span><span class=\"pln\">self</span><span class=\"pun\">,</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">nodes</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">):</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">nodes</span><span class=\"pun\">=</span><span class=\"pln\">nodes</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"pln\">value</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"pln\">iIndex</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">def</span><span class=\"pln\"> </span><span class=\"typ\">DecisionTree</span><span class=\"pun\">(</span><span class=\"pln\">node</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    通过计算信息增益比来切割数据集</span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">    对数据的第iIndex个维度分割</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">    包含左侧数据集的树节点，右侧数据集节点，切分点</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">    array</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">=</span><span class=\"pln\">node</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"com\"># </span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"typ\">Childes</span><span class=\"pun\">=[]</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">    iIndex</span><span class=\"pun\">=</span><span class=\"typ\">GainInfRatio</span><span class=\"pun\">(</span><span class=\"pln\">array</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">).</span><span class=\"pln\">argmax</span><span class=\"pun\">()</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">    node</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"pln\">iIndex</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    currentFeature</span><span class=\"pun\">=</span><span class=\"pln\">array</span><span class=\"pun\">[:,</span><span class=\"pln\">iIndex</span><span class=\"pun\">]</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> set</span><span class=\"pun\">(</span><span class=\"pln\">currentFeature</span><span class=\"pun\">):</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">        nodei</span><span class=\"pun\">=</span><span class=\"typ\">Node</span><span class=\"pun\">((</span><span class=\"pln\">array</span><span class=\"pun\">[</span><span class=\"pln\">currentFeature</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">],</span><span class=\"pln\">y</span><span class=\"pun\">[</span><span class=\"pln\">currentFeature</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">]))</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">        nodei</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"pln\">i</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">        </span><span class=\"typ\">Childes</span><span class=\"pun\">.</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"pln\">nodei</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">        </span><span class=\"com\">#print(iIndex,i,np.sum(currentFeature==i))</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">    node</span><span class=\"pun\">.</span><span class=\"pln\">nodes</span><span class=\"pun\">=</span><span class=\"typ\">Childes</span><span class=\"pln\"> </span></code></li><li class=\"L8\"><code class=\"lang-python\"></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"typ\">Childes</span></code></li></ol></pre>\n<h1 id=\"h1-u6784u5EFAu51B3u7B56u6811\"><a name=\"构建决策树\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>构建决策树</h1><ul>\n<li>第一步构建跟目录</li><li>第二步根据某个特征（iIndex）切分，切分后的数据保存到子节点nodes，设置子节点value(如果该特征的值等于values)则搜索时进入该子节点</li><li>第三步，选择一个nodes 继续构建，或者增益比较少，或者节点数少于2</li><li>考虑？等于零之类的呢？</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"typ\">MinSample</span><span class=\"pun\">=</span><span class=\"lit\">3</span><span class=\"pln\"> </span><span class=\"com\">#最小样本点</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">myqueue</span><span class=\"pun\">=</span><span class=\"pln\">queue</span><span class=\"pun\">.</span><span class=\"typ\">Queue</span><span class=\"pun\">()</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">root</span><span class=\"pun\">=</span><span class=\"typ\">Node</span><span class=\"pun\">((</span><span class=\"pln\">x</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">),</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"com\">#生成根节点</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">currentDecision</span><span class=\"pun\">=</span><span class=\"pln\">root</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">myqueue</span><span class=\"pun\">.</span><span class=\"pln\">put</span><span class=\"pun\">(</span><span class=\"pln\">currentDecision</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code class=\"lang-python\"></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"kwd\">while</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> myqueue</span><span class=\"pun\">.</span><span class=\"pln\">empty</span><span class=\"pun\">():</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"com\">#随便取出来一个继续决策</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    currentDecision</span><span class=\"pun\">=</span><span class=\"pln\">myqueue</span><span class=\"pun\">.</span><span class=\"pln\">get</span><span class=\"pun\">()</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">    childe_nodes</span><span class=\"pun\">=</span><span class=\"typ\">DecisionTree</span><span class=\"pun\">(</span><span class=\"pln\">currentDecision</span><span class=\"pun\">)</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"com\">#print(myqueue.qsize(),childe_nodes[0].data[1].shape,len(childe_nodes))</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> childe_nodes</span><span class=\"pun\">:</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">        </span><span class=\"com\"># 只有子节点大于5个样本点才回继续</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">        </span><span class=\"kwd\">if</span><span class=\"pln\"> len</span><span class=\"pun\">(</span><span class=\"pln\">i</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">])&gt;</span><span class=\"typ\">MinSample</span><span class=\"pun\">:</span><span class=\"pln\">            </span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">            myqueue</span><span class=\"pun\">.</span><span class=\"pln\">put</span><span class=\"pun\">(</span><span class=\"pln\">i</span><span class=\"pun\">)</span></code></li></ol></pre>\n<h1 id=\"h1-u641Cu7D22u51B3u7B56u6811\"><a name=\"搜索决策树\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>搜索决策树</h1><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">y_pred</span><span class=\"pun\">=[]</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> range</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">.</span><span class=\"pln\">shape</span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">]):</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    search</span><span class=\"pun\">=</span><span class=\"pln\">x</span><span class=\"pun\">[</span><span class=\"pln\">i</span><span class=\"pun\">]#设置搜索目标</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">    searchDecision</span><span class=\"pun\">=</span><span class=\"pln\">root</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"com\">#当前擦找的决策树，的索引</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">while</span><span class=\"pln\"> searchDecision</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">!=</span><span class=\"kwd\">None</span><span class=\"pun\">:</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">        </span><span class=\"com\"># </span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">        searchDecision</span><span class=\"pun\">=[</span><span class=\"pln\">i  </span><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> searchDecision</span><span class=\"pun\">.</span><span class=\"pln\">nodes </span><span class=\"kwd\">if</span><span class=\"pln\"> i</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">==</span><span class=\"pln\">search</span><span class=\"pun\">[</span><span class=\"pln\">searchDecision</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">]][</span><span class=\"lit\">0</span><span class=\"pun\">]</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    y_pred</span><span class=\"pun\">.</span><span class=\"pln\">append</span><span class=\"pun\">(</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">mean</span><span class=\"pun\">(</span><span class=\"pln\">searchDecision</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">])&gt;</span><span class=\"lit\">0.5</span><span class=\"pun\">)</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"com\">#我自己写的，还有一个主要的问题。</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">accuracy_score</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">&gt;</span><span class=\"lit\">0.5</span><span class=\"pun\">,</span><span class=\"pln\">y_pred</span><span class=\"pun\">),</span><span class=\"pln\">f1_score</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">&gt;</span><span class=\"lit\">0.5</span><span class=\"pun\">,</span><span class=\"pln\">y_pred</span><span class=\"pun\">)</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">(</span><span class=\"lit\">0.63</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">0.5066666666666666</span><span class=\"pun\">)</span></code></li></ol></pre><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">tree</span><span class=\"pun\">=</span><span class=\"typ\">DecisionTreeClassifier</span><span class=\"pun\">()</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">tree</span><span class=\"pun\">.</span><span class=\"pln\">fit</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">)</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">y_pred</span><span class=\"pun\">=</span><span class=\"pln\">tree</span><span class=\"pun\">.</span><span class=\"pln\">predict</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">accuracy_score</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">&gt;</span><span class=\"lit\">0.5</span><span class=\"pun\">,</span><span class=\"pln\">y_pred</span><span class=\"pun\">),</span><span class=\"pln\">f1_score</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">&gt;</span><span class=\"lit\">0.5</span><span class=\"pun\">,</span><span class=\"pln\">y_pred</span><span class=\"pun\">)</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">(</span><span class=\"lit\">1.0</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"lit\">1.0</span><span class=\"pun\">)</span></code></li></ol></pre><h1 id=\"h1-u603Bu7ED3\"><a name=\"总结\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>总结</h1><ul>\n<li>主要的问题，当变量变少后，容易选择完全一致的变量。<ul>\n<li>重新发布。</li></ul>\n</li></ul>\n',0,0,'2021-06-18 13:38:59','/img/articlePic/img1.jpg',4,'import matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd\nimport scipy as sc\nimport seaborn as sns\nimport queue\nfrom sklearn import datasets\nfrom sklearn.metrics import accuracy_score,f1_score\nfrom sklearn.tree import DecisionTreeClassifier\n\nDecision Tree\n把产生的连续变量转化成类别标签,用这个数据做决策树，就方便很多了。\nx,y=datasets.make_classification()\n#三个分位数：\nx=np.apply_along_axis(lambda a:np.searchsorted(np.quantile(a,np.sort(np.random.rand(5))),a),0,x)\nfor i in list(set(y)):\n    plt.plot(x[y==i][:,0],x[y==i][:,1],&#39;*&#39;,label=i)\nplt.legend()\nplt.show()\n\n\n1.1信息熵def Entropy(series):\n    &#39;&#39;&#39;\n    计算类别变量的熵\n    &#39;&#39;&#39;\n    pi=pd.Series(series).value_counts()/len(series)\n    return -1*np.sum(pi*np.log2(pi))\nen=np.apply_along_axis(Entropy,0,x)\nplt.plot(en,&#39;*&#39;)\n\n[&lt;matplotlib.lines.Line2D at 0x2dec9264b00&gt;]\n\n1.2条件熵\nD 为样本k为类别个数 ，Ck为类别为k的样本数特征A有不同的特征1,2,3…n,根据特征A可以将特征分为D1,D2,D3….Dn  ,|D1|为样本个数即Di中属于Ck的样本集合为Dik\ndef EntropyCondition(series,y):\n    &#39;&#39;&#39;\n    计算series的条件熵\n\n    series:数据集\n    y:类别\n    先数据集按照特征A分开，然后计算没一份数据的经验熵\n    &#39;&#39;&#39;    \n    return -1*np.sum([Entropy(y[series==i]) for i in set(series)])\n\nEntropyCondition(x[:,1],y)\n\n-5.8599831625893435\n1.4 信息增益def GainInf(array,y):\n    &#39;&#39;&#39;\n    计算信息增益\n\n    array: data\n    y:label\n\n    return 返回每个特征的增益\n    &#39;&#39;&#39;\n    gain=np.zeros(array.shape[1])\n    for i,series in enumerate(array.T):\n        gain[i]=Entropy(y)-EntropyCondition(series,y)\n    return gain   \n\n&#39;&#39;&#39;\n测试全都一样的数据\n&#39;&#39;&#39;\na=np.ones_like(x)\nb=np.ones_like(y)\n\nGainInf(a,b)#.argmax()\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n       0., 0., 0.])\ndef GainInfRatio(array,y):\n    &#39;&#39;&#39;\n    计算信息增益比\n    ??? 如果信息增益比的分为0怎么办??\n    返回信息增益比\n    &#39;&#39;&#39;\n    #对于信息熵等于0的特征，直接把所有特征的信息熵平均值*10\n    gain=np.apply_along_axis(Entropy,0,array)   \n    #尽量不要找都一样的数据，因为这样会导致分不下去\n    gain[gain==0]+=np.mean(gain)*10\n\n    return GainInf(array,y)/gain\n\nGainInfRatio(x,y).argmax()\n\n3\nID3\n每棵树不一定有几个子树，所以用列表表示他的所有子树如果信息增益最大的那个特征有多个取值，我应该怎么选取呢？难道是随便选，直接分开n个？\nclass Node():\n    &#39;&#39;&#39;\n    决策树单棵树的实现（只要提供树的数据集，就可以继续下一步了。）\n\n    决策树的子树不一定只有两颗树，所以用列表表示所有的子树\n    每课树保留自己的数据集、维度、值\n    &#39;&#39;&#39;\n    def __init__(self,data,value=None,nodes=None,iIndex=None):\n        self.nodes=nodes #保存左树\n        self.data=data  #保存数据集\n        self.iIndex=iIndex #记录切割的维度\n        self.value=value # 当前维度的值\n    def set_node(self,value=None,nodes=None,iIndex=None):\n        self.nodes=nodes\n        self.value=value\n        self.iIndex=iIndex\n\ndef DecisionTree(node):\n    &#39;&#39;&#39;\n    通过计算信息增益比来切割数据集\n\n    对数据的第iIndex个维度分割\n    包含左侧数据集的树节点，右侧数据集节点，切分点\n    &#39;&#39;&#39;\n    array,y=node.data# \n    Childes=[]\n    iIndex=GainInfRatio(array,y).argmax()\n    node.iIndex=iIndex\n    currentFeature=array[:,iIndex]\n    for i in set(currentFeature):\n        nodei=Node((array[currentFeature==i],y[currentFeature==i]))\n        nodei.value=i\n        Childes.append(nodei)\n        #print(iIndex,i,np.sum(currentFeature==i))\n    node.nodes=Childes \n\n    return Childes\n\n构建决策树\n第一步构建跟目录第二步根据某个特征（iIndex）切分，切分后的数据保存到子节点nodes，设置子节点value(如果该特征的值等于values)则搜索时进入该子节点第三步，选择一个nodes 继续构建，或者增益比较少，或者节点数少于2考虑？等于零之类的呢？\nMinSample=3 #最小样本点\nmyqueue=queue.Queue()\nroot=Node((x,y),value=0,iIndex=0) #生成根节点\ncurrentDecision=root\nmyqueue.put(currentDecision)\n\nwhile not myqueue.empty():\n    #随便取出来一个继续决策\n    currentDecision=myqueue.get()\n    childe_nodes=DecisionTree(currentDecision)\n    #print(myqueue.qsize(),childe_nodes[0].data[1].shape,len(childe_nodes))\n    for i in childe_nodes:\n        # 只有子节点大于5个样本点才回继续\n        if len(i.data[1])&gt;MinSample:            \n            myqueue.put(i)\n\n搜索决策树y_pred=[]\nfor i in range(y.shape[0]):\n    search=x[i]#设置搜索目标\n    searchDecision=root\n    #当前擦找的决策树，的索引\n    while searchDecision.iIndex!=None:\n        # \n        searchDecision=[i  for i in searchDecision.nodes if i.value==search[searchDecision.iIndex]][0]\n    y_pred.append(np.mean(searchDecision.data[1])&gt;0.5)\n\n#我自己写的，还有一个主要的问题。\naccuracy_score(y&gt;0.5,y_pred),f1_score(y&gt;0.5,y_pred)\n\n(0.63, 0.5066666666666666)\ntree=DecisionTreeClassifier()\ntree.fit(x,y)\ny_pred=tree.predict(x)\naccuracy_score(y&gt;0.5,y_pred),f1_score(y&gt;0.5,y_pred)\n\n(1.0, 1.0)\n总结\n主要的问题，当变量变少后，容易选择完全一致的变量。\n重新发布。\n\n'),(21,4,'KD决策树','<h1 id=\"h1-kd-tree\"><a name=\"KD-Tree\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>KD-Tree</h1><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> matplotlib</span><span class=\"pun\">.</span><span class=\"pln\">pyplot </span><span class=\"kwd\">as</span><span class=\"pln\"> plt</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> numpy </span><span class=\"kwd\">as</span><span class=\"pln\"> np </span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> pandas </span><span class=\"kwd\">as</span><span class=\"pln\"> pd</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> scipy </span><span class=\"kwd\">as</span><span class=\"pln\"> sc</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> seaborn </span><span class=\"kwd\">as</span><span class=\"pln\"> sns</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"kwd\">import</span><span class=\"pln\"> queue</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"kwd\">from</span><span class=\"pln\"> sklearn</span><span class=\"pun\">.</span><span class=\"pln\">neighbors </span><span class=\"kwd\">import</span><span class=\"pln\"> </span><span class=\"typ\">KDTree</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"kwd\">from</span><span class=\"pln\"> sklearn </span><span class=\"kwd\">import</span><span class=\"pln\"> datasets</span></code></li></ol></pre>\n<ul>\n<li>随机生成一些数据点</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">x</span><span class=\"pun\">,</span><span class=\"pln\">y</span><span class=\"pun\">=</span><span class=\"pln\">datasets</span><span class=\"pun\">.</span><span class=\"pln\">make_blobs</span><span class=\"pun\">(</span><span class=\"pln\">n_features</span><span class=\"pun\">=</span><span class=\"lit\">2</span><span class=\"pun\">)</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> list</span><span class=\"pun\">(</span><span class=\"pln\">set</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">)):</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    plt</span><span class=\"pun\">.</span><span class=\"pln\">plot</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">[</span><span class=\"pln\">y</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">][:,</span><span class=\"lit\">0</span><span class=\"pun\">],</span><span class=\"pln\">x</span><span class=\"pun\">[</span><span class=\"pln\">y</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">][:,</span><span class=\"lit\">1</span><span class=\"pun\">],</span><span class=\"str\">\'*\'</span><span class=\"pun\">,</span><span class=\"pln\">label</span><span class=\"pun\">=</span><span class=\"pln\">i</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">legend</span><span class=\"pun\">()</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">show</span><span class=\"pun\">()</span></code></li></ol></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/11875530-d2d3cab23bae116a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"output_3_0.png\"></p>\n<h2 id=\"h2-0-knn\"><a name=\"0. KNN\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>0. KNN</h2><ul>\n<li>举手表决，选择得到票数最多的类别</li></ul>\n<h2 id=\"h2-1-k-dimension-tree\"><a name=\"1.k-Dimension tree\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.k-Dimension tree</h2><ul>\n<li>K近邻的实现：kd树</li></ul>\n<h2 id=\"h2-1-2-\"><a name=\"1.2首先实现查找树\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.2首先实现查找树</h2><ul>\n<li><p>它或者是一棵空树；或者是具有下列性质的二叉树： </p>\n<p>   （1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；<br>   （2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；<br>   （3）左、右子树也分别为二叉排序树</p>\n</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">class</span><span class=\"pln\"> </span><span class=\"typ\">Node</span><span class=\"pun\">():</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    单棵树的实现</span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">    其中：左树是一颗树，右树也是一颗树， 每棵树包含他的子节点和数据集和value</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> __init__</span><span class=\"pun\">(</span><span class=\"pln\">self</span><span class=\"pun\">,</span><span class=\"pln\">data</span><span class=\"pun\">,</span><span class=\"pln\">lnode</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">rnode</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">):</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">rnode</span><span class=\"pun\">=</span><span class=\"pln\">rnode </span><span class=\"com\">#保存右树</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">lnode</span><span class=\"pun\">=</span><span class=\"pln\">lnode </span><span class=\"com\">#保存左树</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"pln\">value </span><span class=\"com\">#保存切割点</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">=</span><span class=\"pln\">data  </span><span class=\"com\">#保存数据集</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"pln\">iIndex </span><span class=\"com\">#记录切割的维度</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">def</span><span class=\"pln\"> set_node</span><span class=\"pun\">(</span><span class=\"pln\">self</span><span class=\"pun\">,</span><span class=\"pln\">lnode</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">rnode</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"kwd\">None</span><span class=\"pun\">):</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">rnode</span><span class=\"pun\">=</span><span class=\"pln\">rnode</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">lnode</span><span class=\"pun\">=</span><span class=\"pln\">lnode</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"pln\">value</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">        self</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">=</span><span class=\"pln\">iIndex</span></code></li></ol></pre>\n<h2 id=\"h2-1-3-kd-\"><a name=\"1.3 KD树\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.3 KD树</h2><ul>\n<li>当树不停切分的时候，节点会不停增多，怎么处理呢？</li><li>把产生的所有的树都加入队列中，然后选择一个出来</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"kwd\">def</span><span class=\"pln\"> kdTree</span><span class=\"pun\">(</span><span class=\"pln\">data</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">):</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"str\">    对数据集切割</span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"str\">    对数据的第iIndex个维度分割</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"str\">    包含左侧数据集的树节点，右侧数据集节点，切分点</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">    value</span><span class=\"pun\">=</span><span class=\"pln\">np</span><span class=\"pun\">.</span><span class=\"pln\">median</span><span class=\"pun\">(</span><span class=\"pln\">data</span><span class=\"pun\">[:,</span><span class=\"pln\">iIndex</span><span class=\"pun\">])</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"com\">#value=np.mean(data[:,iIndex])</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">    right</span><span class=\"pun\">=</span><span class=\"pln\">data</span><span class=\"pun\">[</span><span class=\"pln\">data</span><span class=\"pun\">[:,</span><span class=\"pln\">iIndex</span><span class=\"pun\">]&gt;=</span><span class=\"pln\">value</span><span class=\"pun\">]</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">    left</span><span class=\"pun\">=</span><span class=\"pln\">data</span><span class=\"pun\">[</span><span class=\"pln\">data</span><span class=\"pun\">[:,</span><span class=\"pln\">iIndex</span><span class=\"pun\">]&lt;</span><span class=\"pln\">value</span><span class=\"pun\">]</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"typ\">Node</span><span class=\"pun\">(</span><span class=\"pln\">left</span><span class=\"pun\">),</span><span class=\"typ\">Node</span><span class=\"pun\">(</span><span class=\"pln\">right</span><span class=\"pun\">),</span><span class=\"pln\">value</span></code></li></ol></pre>\n<h2 id=\"h2-1-4-kd-\"><a name=\"1.4 构造简单kd树\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.4 构造简单kd树</h2><ul>\n<li>切割的维度轮着来</li><li>每次切割按照中位数 或平均数</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">i</span><span class=\"pun\">=</span><span class=\"lit\">0</span><span class=\"pln\"> </span><span class=\"com\"># 维度</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">kd</span><span class=\"pun\">=</span><span class=\"typ\">Node</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"com\">#生成根节点</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">myqueue</span><span class=\"pun\">=</span><span class=\"pln\">queue</span><span class=\"pun\">.</span><span class=\"typ\">Queue</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"com\">#空队列</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">myqueue</span><span class=\"pun\">.</span><span class=\"pln\">put</span><span class=\"pun\">(</span><span class=\"pln\">kd</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"com\">#加入根节点</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"kwd\">while</span><span class=\"pln\"> </span><span class=\"kwd\">not</span><span class=\"pln\"> myqueue</span><span class=\"pun\">.</span><span class=\"pln\">empty</span><span class=\"pun\">():</span><span class=\"pln\">  </span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"str\">\'\'\'</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"str\">    获取节点，分割节点，将分割好的左右树加入当前节点，</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"str\">    若分割后的节点符合在分割的要求，则将节点加入队列    </span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"str\">    \'\'\'</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">    iIndex</span><span class=\"pun\">=</span><span class=\"pln\">i</span><span class=\"pun\">%(</span><span class=\"pln\">x</span><span class=\"pun\">.</span><span class=\"pln\">shape</span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">])</span><span class=\"pln\"> </span><span class=\"com\">#对维度循环</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">    currentNode</span><span class=\"pun\">=</span><span class=\"pln\">myqueue</span><span class=\"pun\">.</span><span class=\"pln\">get</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"com\">#获取节点    </span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">    left</span><span class=\"pun\">,</span><span class=\"pln\">right</span><span class=\"pun\">,</span><span class=\"pln\">value</span><span class=\"pun\">=</span><span class=\"pln\">kdTree</span><span class=\"pun\">(</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">)#</span><span class=\"pln\"> </span><span class=\"pun\">分割该节点</span><span class=\"pln\">    </span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    currentNode</span><span class=\"pun\">.</span><span class=\"pln\">set_node</span><span class=\"pun\">(</span><span class=\"pln\">left</span><span class=\"pun\">,</span><span class=\"pln\">right</span><span class=\"pun\">,</span><span class=\"pln\">value</span><span class=\"pun\">,</span><span class=\"pln\">iIndex</span><span class=\"pun\">)#设置根节点的左右节点</span></code></li><li class=\"L3\"><code class=\"lang-python\"></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">if</span><span class=\"pln\"> len</span><span class=\"pun\">(</span><span class=\"pln\">left</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">)&gt;</span><span class=\"lit\">1</span><span class=\"pun\">:#至少有两个数据</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">        myqueue</span><span class=\"pun\">.</span><span class=\"pln\">put</span><span class=\"pun\">(</span><span class=\"pln\">left</span><span class=\"pun\">)</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">if</span><span class=\"pln\"> len</span><span class=\"pun\">(</span><span class=\"pln\">right</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">)&gt;</span><span class=\"lit\">1</span><span class=\"pun\">:#至少有两个数据</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">        myqueue</span><span class=\"pun\">.</span><span class=\"pln\">put</span><span class=\"pun\">(</span><span class=\"pln\">right</span><span class=\"pun\">)</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    i</span><span class=\"pun\">+=</span><span class=\"lit\">1</span></code></li></ol></pre>\n<h2 id=\"h2-1-5-kd-\"><a name=\"1.5 搜索kd树\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1.5 搜索kd树</h2><ul>\n<li>查询的时候按照每个维度是值</li><li>如果当前节点的数据数少于2，则不会继续分割，所以他的子节点肯定是None</li></ul>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">search</span><span class=\"pun\">=[-</span><span class=\"lit\">9</span><span class=\"pun\">,</span><span class=\"lit\">0</span><span class=\"pun\">]#</span><span class=\"pln\"> </span><span class=\"pun\">查找（</span><span class=\"lit\">0</span><span class=\"pun\">,</span><span class=\"lit\">0</span><span class=\"pun\">）点的最近邻</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"pln\">currentNode</span><span class=\"pun\">=</span><span class=\"pln\">kd</span></code></li><li class=\"L2\"><code class=\"lang-python\"></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"kwd\">while</span><span class=\"pln\"> currentNode</span><span class=\"pun\">.</span><span class=\"pln\">rnode</span><span class=\"pun\">!=</span><span class=\"kwd\">None</span><span class=\"pun\">:</span><span class=\"pln\">    </span></code></li><li class=\"L4\"><code class=\"lang-python\"></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">if</span><span class=\"pln\"> currentNode</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">&gt;</span><span class=\"pln\">search</span><span class=\"pun\">[</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">]:</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">        </span><span class=\"com\">#选择左子树</span></code></li><li class=\"L7\"><code class=\"lang-python\"><span class=\"pln\">        currentNode</span><span class=\"pun\">=</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">lnode</span></code></li><li class=\"L8\"><code class=\"lang-python\"><span class=\"pln\">    </span><span class=\"kwd\">elif</span><span class=\"pln\"> currentNode</span><span class=\"pun\">.</span><span class=\"pln\">value</span><span class=\"pun\">&lt;</span><span class=\"pln\">search</span><span class=\"pun\">[</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">iIndex</span><span class=\"pun\">]:</span></code></li><li class=\"L9\"><code class=\"lang-python\"><span class=\"pln\">        </span><span class=\"com\">#选择右</span></code></li><li class=\"L0\"><code class=\"lang-python\"><span class=\"pln\">        currentNode</span><span class=\"pun\">=</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">rnode</span></code></li><li class=\"L1\"><code class=\"lang-python\"></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"kwd\">print</span><span class=\"pun\">(</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">)</span></code></li></ol></pre>\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pun\">[[-</span><span class=\"lit\">8.49693735</span><span class=\"pln\">  </span><span class=\"lit\">0.07710253</span><span class=\"pun\">]]</span></code></li></ol></pre><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code class=\"lang-python\"><span class=\"com\">#画一下数据集</span></code></li><li class=\"L1\"><code class=\"lang-python\"><span class=\"kwd\">for</span><span class=\"pln\"> i </span><span class=\"kwd\">in</span><span class=\"pln\"> list</span><span class=\"pun\">(</span><span class=\"pln\">set</span><span class=\"pun\">(</span><span class=\"pln\">y</span><span class=\"pun\">)):</span></code></li><li class=\"L2\"><code class=\"lang-python\"><span class=\"pln\">    plt</span><span class=\"pun\">.</span><span class=\"pln\">plot</span><span class=\"pun\">(</span><span class=\"pln\">x</span><span class=\"pun\">[</span><span class=\"pln\">y</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">][:,</span><span class=\"lit\">0</span><span class=\"pun\">],</span><span class=\"pln\">x</span><span class=\"pun\">[</span><span class=\"pln\">y</span><span class=\"pun\">==</span><span class=\"pln\">i</span><span class=\"pun\">][:,</span><span class=\"lit\">1</span><span class=\"pun\">],</span><span class=\"str\">\'*\'</span><span class=\"pun\">,</span><span class=\"pln\">label</span><span class=\"pun\">=</span><span class=\"pln\">i</span><span class=\"pun\">)</span></code></li><li class=\"L3\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">plot</span><span class=\"pun\">(</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">[:,</span><span class=\"lit\">0</span><span class=\"pun\">],</span><span class=\"pln\">currentNode</span><span class=\"pun\">.</span><span class=\"pln\">data</span><span class=\"pun\">[:,</span><span class=\"lit\">1</span><span class=\"pun\">],</span><span class=\"str\">\'bo\'</span><span class=\"pun\">,</span><span class=\"pln\">label</span><span class=\"pun\">=</span><span class=\"str\">\'find_result\'</span><span class=\"pun\">,</span><span class=\"pln\">alpha</span><span class=\"pun\">=</span><span class=\"lit\">0.2</span><span class=\"pun\">)</span></code></li><li class=\"L4\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">plot</span><span class=\"pun\">(</span><span class=\"pln\">search</span><span class=\"pun\">[</span><span class=\"lit\">0</span><span class=\"pun\">],</span><span class=\"pln\">search</span><span class=\"pun\">[</span><span class=\"lit\">1</span><span class=\"pun\">],</span><span class=\"str\">\'bo\'</span><span class=\"pun\">,</span><span class=\"pln\">label</span><span class=\"pun\">=</span><span class=\"str\">\'target\'</span><span class=\"pun\">)</span></code></li><li class=\"L5\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">legend</span><span class=\"pun\">()</span></code></li><li class=\"L6\"><code class=\"lang-python\"><span class=\"pln\">plt</span><span class=\"pun\">.</span><span class=\"pln\">show</span><span class=\"pun\">()</span></code></li></ol></pre>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/11875530-45e61a2b238a416e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"output_12_0.png\"></p>\n',0,0,'2021-06-18 13:40:11','/img/articlePic/img4.jpg',4,'KD-Treeimport matplotlib.pyplot as plt\nimport numpy as np \nimport pandas as pd\nimport scipy as sc\nimport seaborn as sns\nimport queue\nfrom sklearn.neighbors import KDTree\nfrom sklearn import datasets\n\n\n随机生成一些数据点\nx,y=datasets.make_blobs(n_features=2)\nfor i in list(set(y)):\n    plt.plot(x[y==i][:,0],x[y==i][:,1],&#39;*&#39;,label=i)\nplt.legend()\nplt.show()\n\n\n0. KNN\n举手表决，选择得到票数最多的类别\n1.k-Dimension tree\nK近邻的实现：kd树\n1.2首先实现查找树\n它或者是一棵空树；或者是具有下列性质的二叉树： \n   （1）若左子树不空，则左子树上所有结点的值均小于它的根结点的值；   （2）若右子树不空，则右子树上所有结点的值均大于它的根结点的值；   （3）左、右子树也分别为二叉排序树\n\nclass Node():\n    &#39;&#39;&#39;\n    单棵树的实现\n\n    其中：左树是一颗树，右树也是一颗树， 每棵树包含他的子节点和数据集和value\n    &#39;&#39;&#39;\n    def __init__(self,data,lnode=None,rnode=None,value=None,iIndex=None):\n        self.rnode=rnode #保存右树\n        self.lnode=lnode #保存左树\n        self.value=value #保存切割点\n        self.data=data  #保存数据集\n        self.iIndex=iIndex #记录切割的维度\n    def set_node(self,lnode=None,rnode=None,value=None,iIndex=None):\n        self.rnode=rnode\n        self.lnode=lnode\n        self.value=value\n        self.iIndex=iIndex\n\n1.3 KD树\n当树不停切分的时候，节点会不停增多，怎么处理呢？把产生的所有的树都加入队列中，然后选择一个出来\ndef kdTree(data,iIndex):\n    &#39;&#39;&#39;\n    对数据集切割\n\n    对数据的第iIndex个维度分割\n    包含左侧数据集的树节点，右侧数据集节点，切分点\n    &#39;&#39;&#39;\n    value=np.median(data[:,iIndex])\n    #value=np.mean(data[:,iIndex])\n    right=data[data[:,iIndex]&gt;=value]\n    left=data[data[:,iIndex]&lt;value]\n    return Node(left),Node(right),value\n\n1.4 构造简单kd树\n切割的维度轮着来每次切割按照中位数 或平均数\ni=0 # 维度\nkd=Node(x) #生成根节点\nmyqueue=queue.Queue() #空队列\nmyqueue.put(kd) #加入根节点\nwhile not myqueue.empty():  \n    &#39;&#39;&#39;\n    获取节点，分割节点，将分割好的左右树加入当前节点，\n    若分割后的节点符合在分割的要求，则将节点加入队列    \n    &#39;&#39;&#39;\n    iIndex=i%(x.shape[1]) #对维度循环\n    currentNode=myqueue.get() #获取节点    \n    left,right,value=kdTree(currentNode.data,iIndex)# 分割该节点    \n    currentNode.set_node(left,right,value,iIndex)#设置根节点的左右节点\n\n    if len(left.data)&gt;1:#至少有两个数据\n        myqueue.put(left)\n    if len(right.data)&gt;1:#至少有两个数据\n        myqueue.put(right)\n    i+=1\n\n1.5 搜索kd树\n查询的时候按照每个维度是值如果当前节点的数据数少于2，则不会继续分割，所以他的子节点肯定是None\nsearch=[-9,0]# 查找（0,0）点的最近邻\ncurrentNode=kd\n\nwhile currentNode.rnode!=None:    \n\n    if currentNode.value&gt;search[currentNode.iIndex]:\n        #选择左子树\n        currentNode=currentNode.lnode\n    elif currentNode.value&lt;search[currentNode.iIndex]:\n        #选择右\n        currentNode=currentNode.rnode\n\nprint(currentNode.data)\n\n[[-8.49693735  0.07710253]]\n#画一下数据集\nfor i in list(set(y)):\n    plt.plot(x[y==i][:,0],x[y==i][:,1],&#39;*&#39;,label=i)\nplt.plot(currentNode.data[:,0],currentNode.data[:,1],&#39;bo&#39;,label=&#39;find_result&#39;,alpha=0.2)\nplt.plot(search[0],search[1],&#39;bo&#39;,label=&#39;target&#39;)\nplt.legend()\nplt.show()\n\n\n');

/*Table structure for table `category` */

DROP TABLE IF EXISTS `category`;

CREATE TABLE `category` (
  `category_id` int(11) NOT NULL AUTO_INCREMENT,
  `category_name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`category_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `category` */

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `comment_time` datetime DEFAULT NULL,
  `comment_user_id` int(11) NOT NULL,
  `comment_blog_id` int(11) NOT NULL,
  `comment_last_id` int(11) DEFAULT NULL,
  `comment_content` text,
  PRIMARY KEY (`comment_id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

/*Data for the table `comment` */

insert  into `comment`(`comment_id`,`comment_time`,`comment_user_id`,`comment_blog_id`,`comment_last_id`,`comment_content`) values (16,'2021-06-18 11:17:07',2,4,NULL,'大佬'),(17,'2021-06-18 11:17:18',2,4,NULL,'666'),(18,'2021-06-18 11:18:17',1,4,NULL,'orz'),(19,'2021-06-18 22:22:52',3,4,18,'萌新求带'),(20,'2021-06-18 22:23:37',4,4,19,'感谢'),(21,'2021-06-18 16:11:31',1,5,NULL,'这篇文章对你有帮助嘛？');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `user_id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(32) DEFAULT NULL,
  `password` varchar(32) DEFAULT NULL,
  `user_nickname` varchar(32) DEFAULT NULL,
  `user_avatar` varchar(255) DEFAULT NULL,
  `user_last_time` datetime DEFAULT NULL,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`user_id`,`username`,`password`,`user_nickname`,`user_avatar`,`user_last_time`) values (1,'yjl','luv','安日','/img/avatar/yjl.jpg','2021-06-01 20:59:55'),(2,'luv','yjl','高积云','/img/avatar/avatar5.jpg','2021-06-10 21:14:00'),(3,'张三','123','张三 ','/img/avatar/avatar4.jpg','2021-06-10 21:14:53'),(4,'李四','123','李四','/img/avatar/avatar3.jpg','2021-06-10 21:15:50'),(10,'666','111','666','/img/avatar/avatar3.jpg','2021-06-18 11:52:08'),(11,'l','111','l','/img/avatar/avatar3.jpg','2021-06-18 11:54:59');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
